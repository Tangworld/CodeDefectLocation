@@ -0,0 +1,19 @@
+public aspect Code2 {
+
+  static int[] a = new int[]{1,2,3};
+
+  static void f(){
+    new Test(a[0]++);
+}
+
+after() returning(Object obj) : call(Test.new(..)) {
+}
+
+  public static void main(String []argv) {
+   f();
+ }
+}
+
+class Test {
+  Test(int i) {}
+}
@@ -25,6 +25,10 @@ public class Ajc1612Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("verifyerror");
 	}
 
+	public void testVerifyError_315398_2() {
+		runTest("verifyerror - 2");
+	}
+	
 	public void testRawTypePointcut_327134() {
 		runTest("rawtype pointcut");
 	}
@@ -13,6 +13,12 @@
 </stdout></run>
 </ajc-test>
 
+<ajc-test dir="bugs1612/pr315398" title="verifyerror - 2">
+<compile files="Code2.java" options="-1.5">
+</compile>
+<run class="Code2"></run>
+</ajc-test>
+
 <ajc-test dir="bugs1612/pr335810" title="rawtype warning">
 <compile files="One.java" options="-1.5 -warn:+raw -warn:+warningToken">
 </compile>
@@ -184,40 +184,41 @@ public class BcelShadow extends Shadow {
 				if (depth == 0) {
 					break;
 				}
-			} else if (inst.opcode == Constants.DUP_X2) {
-				// This code seen in the wild (by Brad):
-				// 40: new #12; //class java/lang/StringBuffer
-				// STACK: STRINGBUFFER
-				// 43: dup
-				// STACK: STRINGBUFFER/STRINGBUFFER
-				// 44: aload_0
-				// STACK: STRINGBUFFER/STRINGBUFFER/THIS
-				// 45: dup_x2
-				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/THIS
-				// 46: getfield #36; //Field value:Ljava/lang/String;
-				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/STRING<value>
-				// 49: invokestatic #37; //Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
-				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/STRING
-				// 52: invokespecial #19; //Method java/lang/StringBuffer."<init>":(Ljava/lang/String;)V
-				// STACK: THIS/STRINGBUFFER
-				// 55: aload_1
-				// STACK: THIS/STRINGBUFFER/LOCAL1
-				// 56: invokevirtual #22; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
-				// STACK: THIS/STRINGBUFFER
-				// 59: invokevirtual #34; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
-				// STACK: THIS/STRING
-				// 62: putfield #36; //Field value:Ljava/lang/String;
-				// STACK: <empty>
-				// 65: return
-
-				// if we attempt to match on the ctor call to StringBuffer.<init> then we get into trouble.
-				// if we simply delete the new/dup pair without fixing up the dup_x2 then the dup_x2 will fail due to there
-				// not being 3 elements on the stack for it to work with. The fix *in this situation* is to change it to
-				// a simple 'dup'
-
-				// this fix is *not* very clean - but a general purpose decent solution will take much longer and this
-				// bytecode sequence has only been seen once in the wild.
-				ih.setInstruction(InstructionConstants.DUP);
+				// need a testcase to show this can really happen in a modern compiler - removed due to 315398
+//			} else if (inst.opcode == Constants.DUP_X2) {
+//				// This code seen in the wild (by Brad):
+//				// 40: new #12; //class java/lang/StringBuffer
+//				// STACK: STRINGBUFFER
+//				// 43: dup
+//				// STACK: STRINGBUFFER/STRINGBUFFER
+//				// 44: aload_0
+//				// STACK: STRINGBUFFER/STRINGBUFFER/THIS
+//				// 45: dup_x2
+//				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/THIS
+//				// 46: getfield #36; //Field value:Ljava/lang/String;
+//				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/STRING<value>
+//				// 49: invokestatic #37; //Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
+//				// STACK: THIS/STRINGBUFFER/STRINGBUFFER/STRING
+//				// 52: invokespecial #19; //Method java/lang/StringBuffer."<init>":(Ljava/lang/String;)V
+//				// STACK: THIS/STRINGBUFFER
+//				// 55: aload_1
+//				// STACK: THIS/STRINGBUFFER/LOCAL1
+//				// 56: invokevirtual #22; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
+//				// STACK: THIS/STRINGBUFFER
+//				// 59: invokevirtual #34; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
+//				// STACK: THIS/STRING
+//				// 62: putfield #36; //Field value:Ljava/lang/String;
+//				// STACK: <empty>
+//				// 65: return
+//
+//				// if we attempt to match on the ctor call to StringBuffer.<init> then we get into trouble.
+//				// if we simply delete the new/dup pair without fixing up the dup_x2 then the dup_x2 will fail due to there
+//				// not being 3 elements on the stack for it to work with. The fix *in this situation* is to change it to
+//				// a simple 'dup'
+//
+//				// this fix is *not* very clean - but a general purpose decent solution will take much longer and this
+//				// bytecode sequence has only been seen once in the wild.
+//				ih.setInstruction(InstructionConstants.DUP);
 			}
 			ih = ih.getPrev();
 		}
@@ -289,8 +290,7 @@ public class BcelShadow extends Shadow {
 	@Override
 	protected void prepareForMungers() {
 		// if we're a constructor call, we need to remove the new:dup or the new:dup_x1:swap,
-		// and store all our
-		// arguments on the frame.
+		// and store all our arguments on the frame.
 
 		// ??? This is a bit of a hack (for the Java langauge). We do this because
 		// we sometime add code "outsideBefore" when dealing with weaving join points. We only
@@ -0,0 +1,22 @@
+public aspect Code {
+
+  static int[] a = new int[]{1,2,3};
+
+  static void f(){
+    System.out.println(a[0]);
+    new Test(a[0]++);
+    System.out.println(a[0]);
+  }
+
+  before(): call(Test.new(..)) {
+    System.out.println("advice");
+  }
+
+  public static void main(String []argv) {
+   f();
+ }
+}
+
+class Test {
+  Test(int i) {}
+}
@@ -21,6 +21,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
  */
 public class Ajc1612Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testVerifyError_315398() {
+		runTest("verifyerror");
+	}
+	
 	public void testRawTypePointcut_327134() {
 		runTest("rawtype pointcut");
 	}
@@ -2,6 +2,17 @@
 
 <suite>
 
+<ajc-test dir="bugs1612/pr315398" title="verifyerror">
+<compile files="Code.java" options="-1.5">
+</compile>
+<run class="Code">
+<stdout>
+<line text="1"/>
+<line text="advice"/>
+<line text="2"/>
+</stdout></run>
+</ajc-test>
+
 <ajc-test dir="bugs1612/pr335810" title="rawtype warning">
 <compile files="One.java" options="-1.5 -warn:+raw -warn:+warningToken">
 </compile>

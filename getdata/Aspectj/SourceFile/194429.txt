@@ -238,7 +238,7 @@ public class ReferencePointcut extends Pointcut {
 			    !p.getExactType().equals(UnresolvedType.OBJECT);
 			}
 			if (reportProblem) {
-				scope.message(IMessage.ERROR, p, "incompatible type, expected " +
+				scope.message(IMessage.ERROR, this, "incompatible type, expected " +
 						parameterTypes[i].getName() + " found " + p +".  Check the type specified in your pointcut");
 				return;
 			}
@@ -0,0 +1,18 @@
+import java.util.*;
+
+public class A {
+  public void foo(Set s) {
+  }
+  public void goo(Map s) {
+  }
+}
+
+aspect X {
+
+  pointcut p(Set s): execution(* *(..)) && args(s);
+
+  before(Map m): p(m) {
+  }
+
+}
+
@@ -19,6 +19,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc162Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.2	
+	public void testMissingContext_pr194429() { runTest("missing context"); }
 	public void testWarningsForLimitations_pr210114() { runTest("warnings for limitations"); }
 	public void testPTW_pr244830() { runTest("ptw initFailureCause"); }
 	public void testGenericItdsOverrides_pr222648() { runTest("generic itds - overrides"); }
@@ -3,6 +3,12 @@
 <!-- AspectJ v1.6.2 Tests -->
 <suite>
 
+	<ajc-test dir="bugs162/pr194429" title="missing context">
+	  <compile files="A.java" options="-1.5">
+	    <message kind="error" line="14" text="incompatible type, expected java.util.Set found BindingTypePattern("/>
+	  </compile>
+	</ajc-test>
+	
 	<ajc-test dir="bugs162/pr210114" title="warnings for limitations">
 	  <compile files="TestAspect.java" options="-1.5">
 	  	<message kind="warning" text="Only before advice is supported on handler join points (compiler limitation)"/>

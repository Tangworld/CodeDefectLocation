@@ -22,6 +22,9 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.0rc1
+    public void testLTWITDs_pr223094() {
+        runTest("ltw inherited itds");
+    }
   //  public void testBrokenIfArgsCflowAtAj_pr145018() {
     //    runTest("ataj crashing with cflow, if and args");
    // }
@@ -3,6 +3,16 @@
 <!-- AspectJ v1.6.0 Tests -->
 <suite>
 
+    <ajc-test dir="bugs160/pr223094" title="ltw inherited itds">
+      <compile files="B.java" outjar="foo.jar"/>
+      <compile files="A.java" classpath="$sandbox/foo.jar"/>
+      <run class="p.A" classpath="$sandbox/foo.jar" ltw="aop.xml">
+        <stdout>
+          <line text="ok"/>
+ 	    </stdout>
+      </run>
+    </ajc-test>
+
    <ajc-test dir="bugs160/pr167197" title="generic type parameterized with array type">
      <compile options="-1.5" files="AspectBreaker.java"/>
    </ajc-test>
@@ -0,0 +1,8 @@
+package p;
+
+public class A {
+  public static void main(String []argv) {
+    ((IFace)new A()).foo();
+    System.out.println("ok");
+  }
+}
@@ -0,0 +1,12 @@
+package p;
+
+aspect B extends Y {
+  declare parents: A* implements IFace;
+
+}
+
+abstract aspect Y {
+  public void IFace.foo() {}
+}
+
+interface IFace {}
@@ -0,0 +1,13 @@
+<?xml version="1.0"?>
+<aspectj>
+
+	
+	<weaver options="-verbose -showWeaveInfo">
+	</weaver>
+	
+	<aspects>
+  	<aspect name="p.B"/>
+	</aspects>
+
+</aspectj>
+
@@ -71,8 +71,8 @@ import org.aspectj.weaver.IWeaver;
 import org.aspectj.weaver.NewParentTypeMunger;
 import org.aspectj.weaver.ReferenceType;
 import org.aspectj.weaver.ReferenceTypeDelegate;
-import org.aspectj.weaver.ResolvedTypeMunger;
 import org.aspectj.weaver.ResolvedType;
+import org.aspectj.weaver.ResolvedTypeMunger;
 import org.aspectj.weaver.Shadow;
 import org.aspectj.weaver.ShadowMunger;
 import org.aspectj.weaver.UnresolvedType;
@@ -201,6 +201,14 @@ public class BcelWeaver implements IWeaver {
             //=> mainly for nothing for LTW - pbly for something in incremental build...
 			xcutSet.addOrReplaceAspect(type);
 	    	if (trace.isTraceEnabled()) trace.exit("addLibraryAspect",type);
+            if (type.getSuperclass().isAspect()) {
+                // If the supertype includes ITDs and the user has not included that aspect in the aop.xml, they will
+                // not get picked up, which can give unusual behaviour! See bug 223094
+                // This change causes us to pick up the super aspect regardless of what was said in the aop.xml - giving
+                // predictable behaviour. If the user also supplied it, there will be no problem other than the second
+                // addition overriding the first
+                addLibraryAspect(type.getSuperclass().getName());
+            }
             return type;
         } else {
             // FIXME AV - better warning upon no such aspect from aop.xml

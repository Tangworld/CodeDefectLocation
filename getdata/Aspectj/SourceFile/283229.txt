@@ -285,7 +285,7 @@ public final class LazyClassGen {
 			}
 
 			// Do we need to calculate an SUID and add it?
-			if (!hasSerialVersionUIDField && world.isAddSerialVerUID()) {
+			if (!getType().isInterface() && !hasSerialVersionUIDField && world.isAddSerialVerUID()) {
 				calculatedSerialVersionUID = myGen.getSUID();
 				FieldGen fg = new FieldGen(Constants.ACC_PRIVATE | Constants.ACC_FINAL | Constants.ACC_STATIC, BasicType.LONG,
 						"serialVersionUID", getConstantPool());
@@ -0,0 +1,13 @@
+public class Foo implements I {
+  public static void main(String []argv) {
+    new Foo();
+  }
+}
+
+interface I {
+}
+
+
+aspect X {
+  declare parents: I implements java.io.Serializable;
+}
@@ -12,6 +12,7 @@ import org.aspectj.systemtest.ajc162.AllTestsAspectJ162;
 import org.aspectj.systemtest.ajc163.AllTestsAspectJ163;
 import org.aspectj.systemtest.ajc164.AllTestsAspectJ164;
 import org.aspectj.systemtest.ajc165.AllTestsAspectJ165;
+import org.aspectj.systemtest.ajc166.AllTestsAspectJ166;
 
 public class AllTests16 {
 
@@ -25,6 +26,7 @@ public class AllTests16 {
 		suite.addTest(AllTestsAspectJ163.suite());
 		suite.addTest(AllTestsAspectJ164.suite());
 		suite.addTest(AllTestsAspectJ165.suite());
+		suite.addTest(AllTestsAspectJ166.suite());
 		suite.addTest(AllTests15.suite());
 		// $JUnit-END$
 		return suite;
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Contributors 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc166;
+
+import java.io.File;
+
+import junit.framework.Test;
+
+import org.aspectj.testing.XMLBasedAjcTestCase;
+
+public class Ajc166Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
+
+	// fix is too disruptive for 1.6.5
+	// public void testGenericsBridge_pr279983() {
+	// runTest("generics bridge");
+	// }
+
+	public void testInterfacesSerializable_pr283229() {
+		runTest("interfaces and serializable");
+	}
+
+	// ---
+
+	public static Test suite() {
+		return XMLBasedAjcTestCase.loadSuite(Ajc166Tests.class);
+	}
+
+	protected File getSpecFile() {
+		return new File("../tests/src/org/aspectj/systemtest/ajc166/ajc166.xml");
+	}
+
+}
\ No newline at end of file
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc166;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTestsAspectJ166 {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("AspectJ 1.6.5 tests");
+		// $JUnit-BEGIN$
+		suite.addTest(Ajc166Tests.suite());
+		// $JUnit-END$
+		return suite;
+	}
+}
@@ -0,0 +1,18 @@
+<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>
+
+<suite>
+   
+   <ajc-test dir="bugs166/pr283229" title="interfaces and serializable">
+     <compile files="Foo.java" options="-1.5 -XaddSerialVersionUID"/>
+     <run class="Foo">
+     <!--
+       <stdout>
+         <line text="if method: public static final boolean X.ajc$if$1ba()"/>
+         <line text="if method: public static final boolean X.ajc$if$177()"/>
+         <line text="if method: public static final boolean X.ajc$if$165()"/>
+       </stdout>
+       -->
+     </run>
+   </ajc-test>
+
+</suite>
\ No newline at end of file

@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr115607.java  [java source file] TEST_SANDBOX\pr115607.java:1:
-      import declarations  [import reference] 
+        [import reference] 
       I  [annotation] TEST_SANDBOX\pr115607.java:1:
       Simple  [class] TEST_SANDBOX\pr115607.java:3:
       pr115607  [aspect] TEST_SANDBOX\pr115607.java:5:
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     A.java  [java source file] TEST_SANDBOX\A.java:1:
-      import declarations  [import reference] 
+        [import reference] 
         org.aspectj.lang.annotation.DeclareError  [import reference] TEST_SANDBOX\A.java:4:
         org.aspectj.lang.annotation.DeclareWarning  [import reference] TEST_SANDBOX\A.java:3:
         org.aspectj.lang.annotation.Aspect  [import reference] TEST_SANDBOX\A.java:2:
@@ -10,15 +10,15 @@
         warning  [field] TEST_SANDBOX\A.java:10:
         error  [field] TEST_SANDBOX\A.java:13:
     C.java  [java source file] TEST_SANDBOX\C.java:1:
-      import declarations  [import reference] 
+        [import reference] 
       C  [class] TEST_SANDBOX\C.java:3:
         warningMethod()  [method] TEST_SANDBOX\C.java:5:
         badMethod()  [method] TEST_SANDBOX\C.java:8:
 === END OF MODEL REPORT =========
 === RELATIONSHIPS REPORT ========= After a batch build
+(targets=1) <{C.java[C~badMethod (matches declare) <{A.java}A^error
 (targets=1) <{C.java[C~warningMethod (matches declare) <{A.java}A^warning
 (targets=1) <{A.java}A^warning (matched by) <{C.java[C~warningMethod
-(targets=1) <{C.java[C~badMethod (matches declare) <{A.java}A^error
 (targets=1) <{A.java}A^error (matched by) <{C.java[C~badMethod
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr131932.aj  [java source file] TEST_SANDBOX\pr131932.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
         java.util.List  [import reference] TEST_SANDBOX\pr131932.aj:1:
       Slide74  [aspect] TEST_SANDBOX\pr131932.aj:3:
         Bar  [class] TEST_SANDBOX\pr131932.aj:13:
@@ -16,9 +16,9 @@
 (targets=1) <*pr131932.aj}Slide74)Bar.children (declared on) <*pr131932.aj}Slide74[Bar
 (targets=1) <*pr131932.aj}Slide74)Bar.getFirst (declared on) <*pr131932.aj}Slide74[Bar
 (targets=1) <*pr131932.aj[Foo (aspect declarations) <*pr131932.aj}Slide74)Foo.Foo_new)Qjava.util.List\<TT;>;
-(targets=1) <*pr131932.aj}Slide74)Foo.Foo_new)Qjava.util.List\<TT;>; (declared on) <*pr131932.aj[Foo
 (targets=2) <*pr131932.aj}Slide74[Bar (aspect declarations) <*pr131932.aj}Slide74)Bar.getFirst
 (targets=2) <*pr131932.aj}Slide74[Bar (aspect declarations) <*pr131932.aj}Slide74)Bar.children
+(targets=1) <*pr131932.aj}Slide74)Foo.Foo_new)Qjava.util.List\<TT;>; (declared on) <*pr131932.aj[Foo
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
 import reference=2
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr132130.aj  [java source file] TEST_SANDBOX\pr132130.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
       basic  [aspect] TEST_SANDBOX\pr132130.aj:1:
         declare @method: * debit(..) : @Secured(role = "supervisor")  [declare @method] TEST_SANDBOX\pr132130.aj:3:
         declare @constructor: BankAccount+.new(..) : @Secured(role = "supervisor")  [declare @constructor] TEST_SANDBOX\pr132130.aj:4:
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr141730.aj  [java source file] TEST_SANDBOX\pr141730.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
       A  [aspect] TEST_SANDBOX\pr141730.aj:1:
         p()  [pointcut] TEST_SANDBOX\pr141730.aj:3:
         before(): p..  [advice] TEST_SANDBOX\pr141730.aj:5:
@@ -35,12 +35,12 @@
 (targets=11) <*pr141730.aj}A&before (advises) <*pr141730.aj[C~main~\[QString;
 (targets=11) <*pr141730.aj}A&before (advises) <*pr141730.aj[C~multiMethod~\[\[QString;
 (targets=11) <*pr141730.aj}A&before (advises) <*pr141730.aj[C~intArray~\[I
+(targets=1) <*pr141730.aj[C~multiMethod~\[\[QString; (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj[C~stringMethod~QString; (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj[C~intArray~\[I (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj[C~myClassMethod~LMyClass; (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj[C~C (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj}A (advised by) <*pr141730.aj}A&before
-(targets=1) <*pr141730.aj[C~multiMethod~\[\[QString; (advised by) <*pr141730.aj}A&before
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
 method=8
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr141730.aj  [java source file] TEST_SANDBOX\pr141730.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
         java.util.List  [import reference] TEST_SANDBOX\pr141730.aj:1:
       A  [aspect] TEST_SANDBOX\pr141730.aj:3:
         p()  [pointcut] TEST_SANDBOX\pr141730.aj:5:
@@ -14,17 +14,17 @@
       MyGenericClass  [class] TEST_SANDBOX\pr141730.aj:22:
 === END OF MODEL REPORT =========
 === RELATIONSHIPS REPORT ========= After a batch build
-(targets=1) <*pr141730.aj[MyClass (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj[MyGenericClass (advised by) <*pr141730.aj}A&before
-(targets=1) <*pr141730.aj[C~genericMethod2~QMyGenericClass\<QString;LMyClass;>; (advised by) <*pr141730.aj}A&before
+(targets=1) <*pr141730.aj[MyClass (advised by) <*pr141730.aj}A&before
+(targets=1) <*pr141730.aj[C~genericMethod~Qjava.util.List\<QString;>; (advised by) <*pr141730.aj}A&before
 (targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj}A
 (targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[C
 (targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[C~genericMethod~Qjava.util.List\<QString;>;
 (targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[C~genericMethod2~QMyGenericClass\<QString;LMyClass;>;
-(targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[MyGenericClass
 (targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[MyClass
-(targets=1) <*pr141730.aj[C~genericMethod~Qjava.util.List\<QString;>; (advised by) <*pr141730.aj}A&before
+(targets=6) <*pr141730.aj}A&before (advises) <*pr141730.aj[MyGenericClass
 (targets=1) <*pr141730.aj[C (advised by) <*pr141730.aj}A&before
+(targets=1) <*pr141730.aj[C~genericMethod2~QMyGenericClass\<QString;LMyClass;>; (advised by) <*pr141730.aj}A&before
 (targets=1) <*pr141730.aj}A (advised by) <*pr141730.aj}A&before
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   foo  [package] 
     MyFoo.java  [java source file] TEST_SANDBOX\MyFoo.java:1:
-      import declarations  [import reference] 
+      foo  [package declaration] TEST_SANDBOX\MyFoo.java:1:
+        [import reference] 
       MyFoo  [class] TEST_SANDBOX\MyFoo.java:3:
         callMain()  [method] TEST_SANDBOX\MyFoo.java:5:
           method-call(void foo.MyFoo.main())  [code] TEST_SANDBOX\MyFoo.java:6:
@@ -13,11 +14,12 @@
 (targets=1) {MyBar.class (advises) <foo{MyFoo.java[MyFoo~callMain?method-call(void foo.MyFoo.main())
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
-package=1
-FileMapSize=1
-RelationshipMapSize=2
-java source file=2
+method=2
 import reference=1
 code=1
 class=1
-method=2
+RelationshipMapSize=2
+package declaration=1
+FileMapSize=1
+package=1
+java source file=2
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   bar  [package] 
     MyBar.aj  [java source file] TEST_SANDBOX\MyBar.aj:1:
-      import declarations  [import reference] 
+      bar  [package declaration] TEST_SANDBOX\MyBar.aj:1:
+        [import reference] 
         foo.*  [import reference] TEST_SANDBOX\MyBar.aj:3:
       MyBar  [aspect] TEST_SANDBOX\MyBar.aj:5:
         before(): <anonymous pointcut>  [advice] TEST_SANDBOX\MyBar.aj:7:
@@ -13,17 +14,19 @@
         declare @constructor: *Foo.new(java.lang.String) : @MyAnnotation  [declare @constructor] TEST_SANDBOX\MyBar.aj:15:
         declare @field: int *Foo.* : @MyAnnotation  [declare @field] TEST_SANDBOX\MyBar.aj:16:
     MyAnnotation.java  [java source file] TEST_SANDBOX\MyAnnotation.java:1:
-      import declarations  [import reference] 
+      bar  [package declaration] TEST_SANDBOX\MyAnnotation.java:1:
+        [import reference] 
       MyAnnotation  [annotation] TEST_SANDBOX\MyAnnotation.java:3:
     NewClass.java  [java source file] TEST_SANDBOX\NewClass.java:1:
-      import declarations  [import reference] 
+      bar  [package declaration] TEST_SANDBOX\NewClass.java:1:
+        [import reference] 
       NewClass  [class] TEST_SANDBOX\NewClass.java:3:
 === END OF MODEL REPORT =========
 === RELATIONSHIPS REPORT ========= After a batch build
+(targets=1) <bar*MyBar.aj}MyBar`declare \@type!3 (annotates) {MyFoo.java
 (targets=1) <bar*MyBar.aj}MyBar`declare parents!2 (declared on) {MyFoo.java
 (targets=1) {MyFoo.java (annotated by) <bar*MyBar.aj}MyBar`declare \@type!3
 (targets=1) {MyFoo.java (aspect declarations) <bar*MyBar.aj}MyBar`declare parents!2
-(targets=1) <bar*MyBar.aj}MyBar`declare \@type!3 (annotates) {MyFoo.java
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
 import reference=4
@@ -37,6 +40,7 @@ advice=1
 annotation=1
 class=1
 RelationshipMapSize=3
+package declaration=3
 FileMapSize=3
 package=1
 declare @field=1
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr143924.aj  [java source file] TEST_SANDBOX\pr143924.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
       DeclareAnnotation  [aspect] TEST_SANDBOX\pr143924.aj:1:
         declare @method: * debit(..) : @Secured(role = "supervisor")  [declare @method] TEST_SANDBOX\pr143924.aj:2:
       BankAccount  [class] TEST_SANDBOX\pr143924.aj:5:
@@ -10,8 +10,8 @@
       Secured  [annotation] TEST_SANDBOX\pr143924.aj:11:
 === END OF MODEL REPORT =========
 === RELATIONSHIPS REPORT ========= After a batch build
-(targets=1) <*pr143924.aj}DeclareAnnotation`declare \@method (annotates) <*pr143924.aj[BankAccount~debit~QString;~J
 (targets=1) <*pr143924.aj[BankAccount~debit~QString;~J (annotated by) <*pr143924.aj}DeclareAnnotation`declare \@method
+(targets=1) <*pr143924.aj}DeclareAnnotation`declare \@method (annotates) <*pr143924.aj[BankAccount~debit~QString;~J
 === END OF RELATIONSHIPS REPORT ==
 === Properties of the model and relationships map =====
 method=1
@@ -2,14 +2,16 @@
 <root>  [java source file] 
   pkg  [package] 
     SourceAspect.aj  [java source file] TEST_SANDBOX\SourceAspect.aj:1:
-      import declarations  [import reference] 
+      pkg  [package declaration] TEST_SANDBOX\SourceAspect.aj:1:
+        [import reference] 
       SourceAspect  [aspect] TEST_SANDBOX\SourceAspect.aj:3:
         declare warning: "There should be n.."  [declare warning] TEST_SANDBOX\SourceAspect.aj:5:
         p()  [pointcut] TEST_SANDBOX\SourceAspect.aj:7:
         before(): p..  [advice] TEST_SANDBOX\SourceAspect.aj:9:
   pack  [package] 
     C.java  [java source file] TEST_SANDBOX\C.java:1:
-      import declarations  [import reference] 
+      pack  [package declaration] TEST_SANDBOX\C.java:1:
+        [import reference] 
       C  [class] TEST_SANDBOX\C.java:3:
         method1()  [method] TEST_SANDBOX\C.java:5:
           field-get(java.io.PrintStream java.lang.System.out)  [code] TEST_SANDBOX\C.java:6:
@@ -43,6 +45,7 @@ class=1
 advice=2
 pointcut=2
 RelationshipMapSize=6
+package declaration=2
 source folder=1
 FileMapSize=2
 package=3
@@ -2,14 +2,16 @@
 <root>  [java source file] 
   pkg  [package] 
     SourceAspect.aj  [java source file] TEST_SANDBOX\SourceAspect.aj:1:
-      import declarations  [import reference] 
+      pkg  [package declaration] TEST_SANDBOX\SourceAspect.aj:1:
+        [import reference] 
       SourceAspect  [aspect] TEST_SANDBOX\SourceAspect.aj:3:
         declare warning: "There should be n.."  [declare warning] TEST_SANDBOX\SourceAspect.aj:5:
         p()  [pointcut] TEST_SANDBOX\SourceAspect.aj:7:
         before(): p..  [advice] TEST_SANDBOX\SourceAspect.aj:9:
   pack  [package] 
     C.java  [java source file] TEST_SANDBOX\C.java:1:
-      import declarations  [import reference] 
+      pack  [package declaration] TEST_SANDBOX\C.java:1:
+        [import reference] 
       C  [class] TEST_SANDBOX\C.java:3:
         method1()  [method] TEST_SANDBOX\C.java:5:
           field-get(java.io.PrintStream java.lang.System.out)  [code] TEST_SANDBOX\C.java:6:
@@ -43,6 +45,7 @@ class=1
 advice=2
 pointcut=2
 RelationshipMapSize=6
+package declaration=2
 source folder=1
 FileMapSize=2
 package=3
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     C.java  [java source file] TEST_SANDBOX\C.java:1:
-      import declarations  [import reference] 
+        [import reference] 
       C  [class] TEST_SANDBOX\C.java:3:
         method1()  [method] TEST_SANDBOX\C.java:5:
           field-get(java.io.PrintStream java.lang.System.out)  [code] TEST_SANDBOX\C.java:6:
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   pack  [package] 
     C.java  [java source file] TEST_SANDBOX\C.java:1:
-      import declarations  [import reference] 
+      pack  [package declaration] TEST_SANDBOX\C.java:1:
+        [import reference] 
       C  [class] TEST_SANDBOX\C.java:3:
         method1()  [method] TEST_SANDBOX\C.java:5:
           field-get(java.io.PrintStream java.lang.System.out)  [code] TEST_SANDBOX\C.java:6:
@@ -26,6 +27,7 @@ declare warning=1
 file=1
 class=1
 RelationshipMapSize=2
+package declaration=1
 source folder=1
 FileMapSize=1
 package=2
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   test  [package] 
     Simple.java  [java source file] TEST_SANDBOX\Simple.java:1:
-      import declarations  [import reference] 
+      test  [package declaration] TEST_SANDBOX\Simple.java:1:
+        [import reference] 
       Simple  [class] TEST_SANDBOX\Simple.java:3:
         Simple()  [constructor] TEST_SANDBOX\Simple.java:5:
   binaries  [source folder] 
@@ -29,6 +30,7 @@ class=1
 advice=2
 pointcut=1
 RelationshipMapSize=3
+package declaration=1
 source folder=1
 FileMapSize=1
 package=2
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   test  [package] 
     Simple.java  [java source file] TEST_SANDBOX\Simple.java:1:
-      import declarations  [import reference] 
+      test  [package declaration] TEST_SANDBOX\Simple.java:1:
+        [import reference] 
       Simple  [class] TEST_SANDBOX\Simple.java:3:
         Simple()  [constructor] TEST_SANDBOX\Simple.java:5:
   binaries  [source folder] 
@@ -26,6 +27,7 @@ file=1
 class=1
 pointcut=1
 RelationshipMapSize=2
+package declaration=1
 source folder=1
 FileMapSize=1
 package=2
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   pack  [package] 
     pr77269.aj  [java source file] TEST_SANDBOX\pack\pr77269.aj:1:
-      import declarations  [import reference] 
+      pack  [package declaration] TEST_SANDBOX\pack\pr77269.aj:1:
+        [import reference] 
       Test  [class] TEST_SANDBOX\pack\pr77269.aj:2:
         testMethod()  [method] TEST_SANDBOX\pack\pr77269.aj:4:
           new Runnable() {..}  [class] TEST_SANDBOX\pack\pr77269.aj:5:
@@ -25,6 +26,7 @@ class=3
 advice=1
 pointcut=1
 RelationshipMapSize=2
+package declaration=1
 FileMapSize=1
 package=1
 java source file=2
@@ -2,7 +2,7 @@
 <root>  [java source file] 
     [package] 
     pr77269b.aj  [java source file] TEST_SANDBOX\pr77269b.aj:1:
-      import declarations  [import reference] 
+        [import reference] 
       Test  [class] TEST_SANDBOX\pr77269b.aj:1:
         testMethod()  [method] TEST_SANDBOX\pr77269b.aj:3:
           new Runnable() {..}  [class] TEST_SANDBOX\pr77269b.aj:4:
@@ -2,7 +2,8 @@
 <root>  [java source file] 
   pack  [package] 
     pr77269c.aj  [java source file] TEST_SANDBOX\pack\pr77269c.aj:1:
-      import declarations  [import reference] 
+      pack  [package declaration] TEST_SANDBOX\pack\pr77269c.aj:1:
+        [import reference] 
       Test  [class] TEST_SANDBOX\pack\pr77269c.aj:3:
         testMethod()  [method] TEST_SANDBOX\pack\pr77269c.aj:5:
           new Runnable() {..}  [class] TEST_SANDBOX\pack\pr77269c.aj:6:
@@ -24,6 +25,7 @@ code=1
 declare warning=1
 class=2
 RelationshipMapSize=2
+package declaration=1
 FileMapSize=1
 package=1
 java source file=2
@@ -0,0 +1,6 @@
+package p.q;
+
+import java.lang.String;
+import java.lang.Integer;
+
+public class Example {}
@@ -0,0 +1,19 @@
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+package p.q;
+
+public class Example2 {}
@@ -247,6 +247,35 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		// incomplete
 	}
 
+	/**
+	 * Test what is in the model for package declarations and import statements.  Package Declaration nodes are new
+	 * in AspectJ 1.6.4.  Import statements are contained with an 'import references' node.
+	 */
+	public void testImportHandles() {
+		String p = "Imports";
+		initialiseProject(p);
+		build(p);
+
+		IProgramElement root = getModelFor(p).getHierarchy().getRoot();
+		
+		// Looking for 'package p.q'
+		IProgramElement ipe = findElementAtLine(root, 1);
+		ipe = (IProgramElement)ipe.getChildren().get(0); // package decl is first entry in the type
+		System.out.println(ipe.getHandleIdentifier()+"  "+ipe.getKind());
+		assertEquals(IProgramElement.Kind.PACKAGE_DECLARATION, ipe.getKind());
+		assertEquals("=Imports<p.q*Example.aj%p.q", ipe.getHandleIdentifier());
+		assertEquals("package p.q;", ipe.getSourceSignature());
+		assertEquals(ipe.getSourceLocation().getOffset(),8); // "package p.q" - location of p.q
+
+		
+		// Looking for import containing containing string and integer
+		ipe = findElementAtLine(root, 3); // first import
+		ipe = ipe.getParent(); // imports container
+		System.out.println(ipe.getHandleIdentifier()+"  "+ipe.getKind());
+		dumptree(getModelFor(p).getHierarchy().getRoot(), 0);
+		assertEquals("=Imports<p.q*Example.aj#", ipe.getHandleIdentifier());
+	}
+
 	public void testAdvisingCallJoinpointsInITDS_pr253067() {
 		String p = "pr253067";
 		initialiseProject(p);
@@ -342,6 +371,18 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasntFullBuild();
 	}
 
+
+	public void testIncrementalBuildsWithItds_pr259528() {
+		String p = "pr259528";
+		AjdeInteractionTestbed.VERBOSE = true;
+		initialiseProject(p);
+		build(p);
+		checkWasFullBuild();
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+	}
+
 	public void testAdviceHandlesAreJDTCompatible() {
 		String p = "AdviceHandles";
 		initialiseProject(p);
@@ -1137,7 +1178,8 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasFullBuild();
 		alter("PR117882", "inc1");
 		build("PR117882");
-		checkWasFullBuild(); // back to the source for an aspect
+		// This should be an incremental build now - because of the changes under 259649
+		checkWasntFullBuild(); // back to the source for an aspect
 		// AjdeInteractionTestbed.VERBOSE=false;
 		// AjdeInteractionTestbed.configureBuildStructureModel(false);
 	}
@@ -101,6 +101,8 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 	 */
 	protected Stack stack;
 
+	protected ImportReference packageDecl = null;
+
 	/**
 	 * Reset for every compilation unit.
 	 */
@@ -121,6 +123,7 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 		lineseps = currCompilationResult.lineSeparatorPositions;
 		LangUtil.throwIaxIfNull(currCompilationResult, "result");
 		stack = new Stack();
+		packageDecl = null;
 		this.buildConfig = buildConfig;
 		internalBuild(cuDeclaration, structureModel);
 		this.buildConfig = null; // clear reference since this structure is
@@ -157,7 +160,9 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 						sourceLocation, 0, null, null);
 			}
 
-			cuNode.addChild(new ProgramElement(structureModel, "import declarations", IProgramElement.Kind.IMPORT_REFERENCE, null,
+			// container for import declarations - this may move to position 1 in the child list, if there
+			// is a package declaration
+			cuNode.addChild(new ProgramElement(structureModel, "", IProgramElement.Kind.IMPORT_REFERENCE, null,
 					0, null, null));
 
 			final IProgramElement addToNode = genAddToNode(file, unit, structureModel);
@@ -180,6 +185,7 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 			stack.push(cuNode);
 			unit.traverse(this, unit.scope);
 
+			
 			// -- update file map (XXX do this before traversal?)
 			try {
 				structureModel.getHierarchy().addToFileMap(file.getCanonicalPath(), cuNode);
@@ -316,7 +322,7 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 								IProgramElement.Kind.IMPORT_REFERENCE, makeLocation(importRef), 0, null, null);
 						ceNode.setSourceSignature(genSourceSignature(importRef));
 						// Add Element to Imports of Current Class
-						ProgramElement imports = (ProgramElement) ((IProgramElement) stack.peek()).getChildren().get(0);
+						ProgramElement imports = getImportReferencesRoot();//(ProgramElement) ((IProgramElement) stack.peek()).getChildren().get(0);
 						imports.addChild(0, ceNode);
 					}
 				}
@@ -337,9 +343,30 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 		stack.push(peNode);
 		return true;
 	}
-
+	
+	
 	public void endVisit(TypeDeclaration typeDeclaration, CompilationUnitScope scope) {
-		stack.pop();
+		// Is there a package declaration to insert into the model?
+		if (packageDecl!=null) {
+			int dotIndex = packageDecl.toString().lastIndexOf('.');
+			String packageString = packageDecl.toString();
+			if (dotIndex != -1) {
+				packageString = packageDecl.toString().substring(0, dotIndex);
+			}
+			ProgramElement packageDeclaration = new ProgramElement(activeStructureModel, packageString,
+					IProgramElement.Kind.PACKAGE_DECLARATION, makeLocation(packageDecl),0,null,null);
+			StringBuffer packageSourceDeclaration = new StringBuffer();
+			packageSourceDeclaration.append("package ");
+			packageSourceDeclaration.append(packageString);
+			packageSourceDeclaration.append(";");
+			packageDeclaration.setSourceSignature(packageSourceDeclaration.toString());
+			stack.pop();
+			ProgramElement containingTypeElement = (ProgramElement)stack.peek();
+			containingTypeElement.addChild(0,packageDeclaration);
+			packageDecl = null;
+		} else {
+			stack.pop();
+		}
 	}
 
 	// ??? share impl with visit(TypeDeclaration, ..) ?
@@ -705,8 +732,10 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 		if (dotIndex != -1) {
 			currPackageImport = importRef.toString().substring(0, dotIndex);
 		}
-		if (!((IProgramElement) stack.peek()).getPackageName().equals(currPackageImport)) {
-
+		if (((IProgramElement) stack.peek()).getPackageName().equals(currPackageImport)) {
+			packageDecl = importRef;
+		} else {
+		
 			ProgramElement peNode = new ProgramElement(activeStructureModel, new String(importRef.toString()),
 					IProgramElement.Kind.IMPORT_REFERENCE, makeLocation(importRef), 0,// could set static here, but for
 					// some reason the info is
@@ -719,12 +748,19 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 			// create Source signature for import
 			peNode.setSourceSignature(genSourceSignature(importRef));
 
-			ProgramElement imports = (ProgramElement) ((IProgramElement) stack.peek()).getChildren().get(0);
+			IProgramElement containingTypeElement = (IProgramElement)stack.peek();
+			ProgramElement imports = getImportReferencesRoot();
 			imports.addChild(0, peNode);
 			stack.push(peNode);
 		}
 		return true;
 	}
+	
+	private ProgramElement getImportReferencesRoot() {
+		IProgramElement element = (IProgramElement)stack.peek();
+		boolean hasPackageDeclaration = ((IProgramElement)element.getChildren().get(0)).getKind().isPackageDeclaration();
+		return (ProgramElement)element.getChildren().get(hasPackageDeclaration?1:0);
+	}
 
 	public void endVisit(ImportReference importRef, CompilationUnitScope scope) {
 		int dotIndex = importRef.toString().lastIndexOf('.');
@@ -737,6 +773,9 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 		}
 	}
 
+
+
+	
 	private String genSourceSignature(ImportReference importreference) {
 		StringBuffer output = new StringBuffer();
 		output.append("import ");
@@ -56,7 +56,7 @@ public class StructureModelTests extends AjdeCoreTestCase {
 		File testFile = openFile("figures" + File.separator + "Figure.java");
 		IProgramElement node = manager.getHierarchy().findElementForSourceFile(testFile.getAbsolutePath());
 		assertTrue("find result", node != null);
-		String child = ((IProgramElement) node.getChildren().get(1)).getName();
+		String child = ((IProgramElement) node.getChildren().get(2)).getName();
 		assertTrue("expected Figure got child " + child, child.equals("Figure"));
 	}
 
@@ -64,7 +64,8 @@ public class StructureModelTests extends AjdeCoreTestCase {
 		File testFile = openFile("figures" + File.separator + "Main.java");
 		IProgramElement node = manager.getHierarchy().findElementForSourceFile(testFile.getAbsolutePath());
 		assertTrue("find result", node != null);
-		IProgramElement pNode = (IProgramElement) (node).getChildren().get(2);
+		IProgramElement pNode = (IProgramElement) (node).getChildren().get(3);
+		assertEquals(IProgramElement.Kind.ASPECT,pNode.getKind());
 		IProgramElement pointcut = (IProgramElement) pNode.getChildren().get(0);
 		assertTrue("kind", pointcut.getKind().equals(IProgramElement.Kind.POINTCUT));
 		assertTrue("found node: " + pointcut.getName(), pointcut.toLabelString().equals("testptct()"));
@@ -78,7 +79,7 @@ public class StructureModelTests extends AjdeCoreTestCase {
 
 		IProgramElement node = manager.getHierarchy().findElementForSourceLine(testFile.getAbsolutePath(), 1);
 		assertTrue("find result", node != null);
-		assertEquals("find result has children", 3, node.getChildren().size());
+		assertEquals("find result has children", 4, node.getChildren().size()); // package, import and 2 types
 		assertTrue("found node: " + node.getName(), node.getKind().equals(IProgramElement.Kind.FILE_JAVA));
 	}
 
@@ -61,7 +61,9 @@ class StubFileGenerator {
 			IProgramElement fileNode = model.getHierarchy().findElementForSourceFile(inputFile.getAbsolutePath());
 			for (Iterator it = fileNode.getChildren().iterator(); it.hasNext();) {
 				IProgramElement node = (IProgramElement) it.next();
-				if (node.getKind().equals(IProgramElement.Kind.IMPORT_REFERENCE)) {
+				if (node.getKind().isPackageDeclaration()) {
+					// skip
+				} else if (node.getKind().equals(IProgramElement.Kind.IMPORT_REFERENCE)) {
 					processImportDeclaration(node, writer);
 				} else {
 					try {
@@ -314,12 +314,13 @@ public interface IProgramElement extends Serializable {
 		public static final Kind DECLARE_ANNOTATION_AT_METHOD = new Kind("declare @method");
 		public static final Kind DECLARE_ANNOTATION_AT_TYPE = new Kind("declare @type");
 		public static final Kind SOURCE_FOLDER = new Kind("source folder");
+		public static final Kind PACKAGE_DECLARATION = new Kind("package declaration");
 
 		public static final Kind[] ALL = { PROJECT, PACKAGE, FILE, FILE_JAVA, FILE_ASPECTJ, FILE_LST, IMPORT_REFERENCE, CLASS,
 				INTERFACE, ASPECT, ENUM, ENUM_VALUE, ANNOTATION, INITIALIZER, INTER_TYPE_FIELD, INTER_TYPE_METHOD,
 				INTER_TYPE_CONSTRUCTOR, INTER_TYPE_PARENT, CONSTRUCTOR, METHOD, FIELD, POINTCUT, ADVICE, DECLARE_PARENTS,
 				DECLARE_WARNING, DECLARE_ERROR, DECLARE_SOFT, DECLARE_PRECEDENCE, CODE, ERROR, DECLARE_ANNOTATION_AT_CONSTRUCTOR,
-				DECLARE_ANNOTATION_AT_FIELD, DECLARE_ANNOTATION_AT_METHOD, DECLARE_ANNOTATION_AT_TYPE, SOURCE_FOLDER
+				DECLARE_ANNOTATION_AT_FIELD, DECLARE_ANNOTATION_AT_METHOD, DECLARE_ANNOTATION_AT_TYPE, SOURCE_FOLDER, PACKAGE_DECLARATION
 
 		};
 
@@ -385,5 +386,9 @@ public interface IProgramElement extends Serializable {
 		private Object readResolve() throws ObjectStreamException {
 			return ALL[ordinal];
 		}
+
+		public boolean isPackageDeclaration() {
+			return this == PACKAGE_DECLARATION;
+		}
 	}
 }
\ No newline at end of file
@@ -31,7 +31,7 @@ public class HandleProviderDelimiter {
 	public static final HandleProviderDelimiter ESCAPE = new HandleProviderDelimiter('\\');
 	// these below are not currently used because no iprogramelement.kind equivalent
 	public static final HandleProviderDelimiter PACKAGEFRAGMENTROOT = new HandleProviderDelimiter('/');
-	public static final HandleProviderDelimiter PACKAGEDECLARATION = new HandleProviderDelimiter('%');
+	public static final HandleProviderDelimiter PACKAGEDECLARATION = new HandleProviderDelimiter('%'); // now used
 	public static final HandleProviderDelimiter LOCALVARIABLE = new HandleProviderDelimiter('@');
 	public static final HandleProviderDelimiter TYPE_PARAMETER = new HandleProviderDelimiter(']');
 
@@ -78,6 +78,8 @@ public class HandleProviderDelimiter {
 			return ASPECT_CU.getDelimiter();
 		} else if (kind.equals(IProgramElement.Kind.IMPORT_REFERENCE)) {
 			return IMPORTDECLARATION.getDelimiter();
+		} else if (kind.equals(IProgramElement.Kind.PACKAGE_DECLARATION)) {
+			return PACKAGEDECLARATION.getDelimiter();
 		} else if (kind.equals(IProgramElement.Kind.CLASS) || kind.equals(IProgramElement.Kind.INTERFACE)
 				|| kind.equals(IProgramElement.Kind.ENUM) || kind.equals(IProgramElement.Kind.ANNOTATION)) {
 			return TYPE.getDelimiter();

@@ -0,0 +1,16 @@
+import org.aspectj.lang.annotation.*;
+
+import java.util.Date;
+
+@Aspect
+public class Main {
+  @Pointcut("execution(java.util.Date foo())") 
+  public void pc() {}
+
+  @Before("pc()")
+  public void log() {}
+
+  @Before("execution(List goo())")
+  public void log2() {} 
+}
+
@@ -11,13 +11,31 @@
 package org.aspectj.systemtest.ajc165;
 
 import java.io.File;
+import java.util.List;
 
 import junit.framework.Test;
 
 import org.aspectj.testing.XMLBasedAjcTestCase;
+import org.aspectj.weaver.LintMessage;
 
 public class Ajc165Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testAnnotationStyle_pr265356() {
+		runTest("annotation style message positions");
+		List ms = ajc.getLastCompilationResult().getWarningMessages();
+		boolean checked = true;
+		// Look for the message relating to 'List' and check the offsets
+		for (int i = 0; i < ms.size(); i++) {
+			LintMessage m = (LintMessage) ms.get(i);
+			if (m.toString().indexOf("List") != -1) {
+				assertEquals(237, m.getSourceStart());
+				assertEquals(240, m.getSourceEnd());
+				checked = true;
+			}
+		}
+		assertTrue("Failed to check the message", checked);
+	}
+
 	public void testAroundCall_pr271169() {
 		runTest("around call npe");
 	}
@@ -2,6 +2,14 @@
 
 <suite>
 
+   <ajc-test dir="bugs165/pr265356" title="annotation style message positions">
+     <compile files="Main.java" options="-1.5">
+       <message kind="warning" line="11"/>
+       <message kind="warning" line="13"/>
+       <message kind="warning" line="14"/>
+     </compile>
+   </ajc-test>
+
    <ajc-test dir="bugs165/pr271169" title="around call npe">
      <compile files="HypChecksums.java" options="-1.5"/>
    </ajc-test>
@@ -225,8 +225,7 @@ public class ValidateAtAspectJAnnotationsVisitor extends ASTVisitor {
 	}
 
 	/**
-	 * aspect must be public nested aspect must be static cannot extend a
-	 * concrete aspect pointcut in perclause must be good.
+	 * aspect must be public nested aspect must be static cannot extend a concrete aspect pointcut in perclause must be good.
 	 */
 	private void validateAspectDeclaration(TypeDeclaration typeDecl) {
 		if (typeStack.size() > 1) {
@@ -293,10 +292,9 @@ public class ValidateAtAspectJAnnotationsVisitor extends ASTVisitor {
 	}
 
 	/**
-	 * 1) Advice must be public 2) Advice must have a void return type if not
-	 * around advice 3) Advice must not have any other @AspectJ annotations 4)
-	 * After throwing advice must declare the thrown formal 5) After returning
-	 * advice must declare the returning formal 6) Advice must not be static
+	 * 1) Advice must be public 2) Advice must have a void return type if not around advice 3) Advice must not have any other @AspectJ
+	 * annotations 4) After throwing advice must declare the thrown formal 5) After returning advice must declare the returning
+	 * formal 6) Advice must not be static
 	 */
 	private void validateAdvice(MethodDeclaration methodDeclaration) {
 
@@ -385,7 +383,8 @@ public class ValidateAtAspectJAnnotationsVisitor extends ASTVisitor {
 		if (pointcutExpression == null)
 			pointcutExpression = getStringLiteralFor("value", adviceAnn, pcLocation);
 		try {
-			ISourceContext context = new EclipseSourceContext(unit.compilationResult, pcLocation[0]);
+			// +1 to give first char of pointcut string
+			ISourceContext context = new EclipseSourceContext(unit.compilationResult, pcLocation[0] + 1);
 			PatternParser pp = new PatternParser(pointcutExpression, context);
 			Pointcut pc = pp.parsePointcut();
 			pp.checkEof();

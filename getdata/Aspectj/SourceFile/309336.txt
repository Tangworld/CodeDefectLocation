@@ -418,27 +418,22 @@ public class ReferenceType extends ResolvedType {
 			return true;
 		}
 
-		if (this.getSignature().equals(ResolvedType.OBJECT.getSignature())) {
+		if (this.getSignature().equals("Ljava/lang/Object;")) {
 			return true;
 		}
 
-		boolean thisRaw = this.isRawType();
-		boolean thisGeneric = this.isGenericType();
-
-		if ((thisRaw || thisGeneric) && other.isParameterizedType()) {
-			if (isAssignableFrom(other.getRawType())) {
-				return true;
-			}
+		if (!isTypeVariableReference() && other.getSignature().equals("Ljava/lang/Object;")) {
+			return false;
 		}
-		if (thisRaw && other.isGenericType()) {
-			if (isAssignableFrom(other.getRawType())) {
-				return true;
-			}
+
+		boolean thisRaw = this.isRawType();
+		if (thisRaw && other.isParameterizedOrGenericType()) {
+			return isAssignableFrom(other.getRawType());
 		}
-		if (thisGeneric && other.isRawType()) {
-			if (isAssignableFrom(other.getGenericType())) {
-				return true;
-			}
+
+		boolean thisGeneric = this.isGenericType();
+		if (thisGeneric && other.isParameterizedOrRawType()) {
+			return isAssignableFrom(other.getGenericType());
 		}
 
 		if (this.isParameterizedType()) {
@@ -527,19 +522,8 @@ public class ReferenceType extends ResolvedType {
 			}
 		}
 
-		if (isTypeVariableReference() && !other.isTypeVariableReference()) { // eg
-			// .
-			// this
-			// =
-			// T
-			// other
-			// =
-			// Ljava
-			// /
-			// lang
-			// /
-			// Object
-			// ;
+		// eg this=T other=Ljava/lang/Object;
+		if (isTypeVariableReference() && !other.isTypeVariableReference()) {
 			TypeVariable aVar = ((TypeVariableReference) this).getTypeVariable();
 			return aVar.resolve(world).canBeBoundTo(other);
 		}
@@ -564,13 +548,25 @@ public class ReferenceType extends ResolvedType {
 
 		ResolvedType[] interfaces = other.getDeclaredInterfaces();
 		for (ResolvedType intface : interfaces) {
-			if (this.isAssignableFrom(intface, allowMissing)) {
+			boolean b;
+			if (thisRaw && intface.isParameterizedOrGenericType()) {
+				b = this.isAssignableFrom(intface.getRawType(), allowMissing);
+			} else {
+				b = this.isAssignableFrom(intface, allowMissing);
+			}
+			if (b) {
 				return true;
 			}
 		}
 		ResolvedType superclass = other.getSuperclass();
 		if (superclass != null) {
-			if (this.isAssignableFrom(superclass, allowMissing)) {
+			boolean b;
+			if (thisRaw && superclass.isParameterizedOrGenericType()) {
+				b = this.isAssignableFrom(superclass.getRawType(), allowMissing);
+			} else {
+				b = this.isAssignableFrom(superclass, allowMissing);
+			}
+			if (b) {
 				return true;
 			}
 		}
@@ -177,6 +177,10 @@ public class UnresolvedType implements Traceable, TypeVariableDeclaringElement {
 		return typeKind == TypeKind.GENERIC || typeKind == TypeKind.PARAMETERIZED;
 	}
 
+	public boolean isParameterizedOrRawType() {
+		return typeKind == TypeKind.PARAMETERIZED || typeKind == TypeKind.RAW;
+	}
+
 	public boolean isTypeVariableReference() {
 		return typeKind == TypeKind.TYPE_VARIABLE;
 	}
@@ -11,11 +11,14 @@
  * ******************************************************************/
 package org.aspectj.weaver;
 
+import java.rmi.RemoteException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Random;
 
 import junit.framework.TestCase;
 
+import org.aspectj.util.PartialOrder;
 import org.aspectj.weaver.bcel.BcelWorld;
 
 // test cases for Adrian's additions to ReferenceType
@@ -60,6 +63,7 @@ public class ReferenceTypeTestCase extends TestCase {
 
 	BcelWorld world;
 
+	@Override
 	public void setUp() throws Exception {
 		super.setUp();
 		world = new BcelWorld();
@@ -555,7 +559,121 @@ public class ReferenceTypeTestCase extends TestCase {
 		arrayListOfString = (ArrayList<String>) listOfSomething;
 		assertFalse(ajArrayListOfString.isAssignableFrom(ajListOfSomething));
 		assertTrue(ajArrayListOfString.isCoerceableFrom(ajListOfSomething));
+	}
+
+	// copy of the real one in BcelClassWeaver
+	public static class IfaceInitList implements PartialOrder.PartialComparable {
+		final ResolvedType onType;
+		List<ConcreteTypeMunger> list = new ArrayList<ConcreteTypeMunger>();
+
+		IfaceInitList(ResolvedType onType) {
+			this.onType = onType;
+		}
+
+		public int compareTo(Object other) {
+			IfaceInitList o = (IfaceInitList) other;
+			if (onType.isAssignableFrom(o.onType)) {
+				return +1;
+			} else if (o.onType.isAssignableFrom(onType)) {
+				return -1;
+			} else {
+				return 0;
+			}
+		}
+
+		public int fallbackCompareTo(Object other) {
+			return 0;
+		}
+	}
+
+	public void testExpensiveAssignableChecks_309336() {
+		List objects = new ArrayList();
+		ReferenceType rcb = resolve("Lorg/aspectj/weaver/ReferenceTypeTestCase$Foo;");
+		ReferenceType i = (ReferenceType) rcb.getDeclaredInterfaces()[0];
+		while (i != null && i.isInterface()) {
+			objects.add(Math.abs(new Random(12).nextInt(objects.size() + 1)), new IfaceInitList(i));
+			ResolvedType[] rt = i.getDeclaredInterfaces();
+			i = rt == null || rt.length == 0 ? null : (ReferenceType) rt[0];
+		}
+		for (int loop = 0; loop < 10; loop++) {
+			// ReferenceType.r = 0;
+			long stime = System.nanoTime();
+			for (int j = 0; j < 10; j++) {
+				List objects2 = new ArrayList();
+				objects2.addAll(objects);
+				PartialOrder.sort(objects2);
+			}
+			long etime = System.nanoTime();
+			System.err.println("Took " + ((etime - stime) / 1000000) + "ms: calls ");// + ReferenceType.r);
+		}
+		// could do with asserting something... basically we are just checking we didn't run out of memory doing the sorts above!
+	}
+
+	public interface Operator14<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable, E13 extends Throwable, E14 extends Throwable> {
+		T execute(String aArg) throws E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, RemoteException;
+	}
+
+	public interface Operator13<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable, E13 extends Throwable>
+			extends Operator14<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E13> {
+	}
+
+	public interface Operator12<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable>
+			extends Operator13<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E12> {
+	}
+
+	public interface Operator11<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable>
+			extends Operator12<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E11> {
+	}
+
+	public interface Operator10<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable>
+			extends Operator11<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E10> {
+
+	}
 
+	public interface Operator9<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable>
+			extends Operator10<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E9> {
+	}
+
+	public interface Operator8<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable>
+			extends Operator9<T, E1, E2, E3, E4, E5, E6, E7, E8, E8> {
+	}
+
+	public interface Operator7<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable>
+			extends Operator8<T, E1, E2, E3, E4, E5, E6, E7, E7> {
+	}
+
+	public interface Operator6<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable>
+			extends Operator7<T, E1, E2, E3, E4, E5, E6, E6> {
+
+	}
+
+	public interface Operator5<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable>
+			extends Operator6<T, E1, E2, E3, E4, E5, E5> {
+	}
+
+	public interface Operator4<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable> extends
+			Operator5<T, E1, E2, E3, E4, E4> {
+	}
+
+	public interface Operator3<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable> extends
+			Operator4<T, E1, E2, E3, E3> {
+	}
+
+	public interface Operator2<T, E1 extends Throwable, E2 extends Throwable> extends Operator3<T, E1, E2, E2> {
+
+	}
+
+	public interface Operator1<T, E1 extends Throwable> extends Operator2<T, E1, E1> {
+	}
+
+	public interface Operator<T> extends Operator1<T, RuntimeException> {
+	}
+
+	class Foo implements Operator<String> {
+		public String execute(String aArg) throws NullPointerException, RemoteException {
+			System.out.println("Doh!");
+			return aArg;
+		}
 	}
 
 	// public void testAssignable_method_m5() {
@@ -30,15 +30,14 @@ public class Ajc169Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// runTest("advising privileged access method");
 	// }
 
-	/*
 	public void testPipeliningAndGenerics_309336() {
 		runTest("pipelining and generics");
 	}
-	public void testCrashParamAnnos_309440() {
-		runTest("crash param annos");
-	}
-	*/
-	
+
+	/*
+	 * public void testCrashParamAnnos_309440() { runTest("crash param annos"); }
+	 */
+
 	// 1.6.9 M1 below here
 	public void testSubtleGenericsIssue_308773() {
 		runTest("subtle generics problem");
@@ -3,7 +3,9 @@
 <suite>
 
    <ajc-test dir="bugs169/pr309336" title="pipelining and generics">
-     <compile files="NoSystemStreams.aj UseOperators.java Operators.java" options="-1.5"/>
+     <compile files="NoSystemStreams.aj UseOperators.java Operators.java" options="-1.5">
+       <message kind="warning" text="No system.out"/>
+     </compile>
   </ajc-test>
 
    <ajc-test dir="bugs169/pr308773" title="subtle generics problem">
@@ -0,0 +1,4 @@
+
+aspect NoSystemStreams {
+	declare warning :  get (java.io.PrintStream System.out) : "No system.out";
+}
\ No newline at end of file
@@ -0,0 +1,82 @@
+//package com.msr;
+
+import java.rmi.RemoteException;
+
+public abstract class Operators {
+/*
+	public interface Operator14<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable, E13 extends Throwable, E14 extends Throwable> {
+		T execute(String aArg) throws E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,
+				E11, E12, E13, E14, RemoteException;
+	}
+
+	public interface Operator13<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable, E13 extends Throwable>
+			extends
+			Operator14<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E13> {
+		 T execute(String aArg) throws E1, E2, E3, E4, E5, E6, E7, E8, E9,
+		 E10, E11, E12, RemoteException;
+	}
+
+	public interface Operator12<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable, E12 extends Throwable>
+			extends
+			Operator13<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E12> {
+		// T execute(String aMindServer, String aSessionId, String
+		// aMindServerIdentifier ) throws E1, E2, E3, E4, E5, E6, E7, E8, E9,
+		// E10, E11, E12, RemoteException;
+	}
+
+*/
+	public interface Operator11<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable, E11 extends Throwable>
+{/*
+			extends
+			Operator12<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E11> {
+*/
+          T execute(String aArg) throws E1,E2,E3,E4,E5,E7,E8,E10,E11, RemoteException;
+	}
+
+	public interface Operator10<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable, E10 extends Throwable>
+			extends Operator11<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E10> {
+
+	}
+
+	public interface Operator9<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable, E9 extends Throwable>
+			extends Operator10<T, E1, E2, E3, E4, E5, E6, E7, E8, E9, E9> {
+	}
+
+	public interface Operator8<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable, E8 extends Throwable>
+			extends Operator9<T, E1, E2, E3, E4, E5, E6, E7, E8, E8> {
+	}
+
+	public interface Operator7<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable, E7 extends Throwable>
+			extends Operator8<T, E1, E2, E3, E4, E5, E6, E7, E7> {
+	}
+
+	//
+	public interface Operator6<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable, E6 extends Throwable>
+			extends Operator7<T, E1, E2, E3, E4, E5, E6, E6> {
+
+	}
+
+	public interface Operator5<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable, E5 extends Throwable>
+			extends Operator6<T, E1, E2, E3, E4, E5, E5> {
+	}
+
+	public interface Operator4<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable, E4 extends Throwable>
+			extends Operator5<T, E1, E2, E3, E4, E4> {
+	}
+
+	public interface Operator3<T, E1 extends Throwable, E2 extends Throwable, E3 extends Throwable>
+			extends Operator4<T, E1, E2, E3, E3> {
+	}
+
+	public interface Operator2<T, E1 extends Throwable, E2 extends Throwable>
+			extends Operator3<T, E1, E2, E2> {
+
+	}
+
+	public interface Operator1<T, E1 extends Throwable> extends
+			Operator2<T, E1, E1> {
+	}
+
+	public interface Operator<T> extends Operator1<T, RuntimeException> {
+	}
+}
@@ -0,0 +1,18 @@
+import java.rmi.RemoteException;
+
+
+class UseOperators {
+	public void f3() throws NullPointerException, RemoteException
+	{
+		Operators.Operator<String> f = new Operators.Operator<String>() {
+
+			public String execute(String aArg) throws NullPointerException,
+					RemoteException {
+				System.out.println("Doh!");
+				return aArg;
+			}
+			
+		}; 
+		f.execute("");
+	}
+}
\ No newline at end of file
@@ -29,7 +29,11 @@ public class Ajc169Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// public void testAdvisingPrivilegedAccessMethod_307147() {
 	// runTest("advising privileged access method");
 	// }
+
 	/*
+	public void testPipeliningAndGenerics_309336() {
+		runTest("pipelining and generics");
+	}
 	public void testCrashParamAnnos_309440() {
 		runTest("crash param annos");
 	}
@@ -2,6 +2,10 @@
 
 <suite>
 
+   <ajc-test dir="bugs169/pr309336" title="pipelining and generics">
+     <compile files="NoSystemStreams.aj UseOperators.java Operators.java" options="-1.5"/>
+  </ajc-test>
+  
    <ajc-test dir="bugs169/pr308773" title="subtle generics problem">
      <compile files="Aspy.aj Zzz.java Top.java Middle.java" options="-1.5"/>
   </ajc-test>
@@ -178,7 +182,7 @@
   </ajc-test>
 
   <ajc-test dir="bugs169/pr291206" title="declare type warning - 2">
-     <compile files="Two.java" options="-1.5 -XhasMember">
+     <compile files="Two.java" options="-1.5">
        <message kind="warning" line="7" text="Missing foo()"/>
        <message kind="warning" line="13" text="Missing foo()"/>
      </compile>
@@ -186,14 +190,14 @@
 
   <!-- testing build of model with one of these in -->
   <ajc-test dir="bugs169/pr291206" title="declare type warning - 3">
-     <compile files="Two.java" options="-1.5 -XhasMember -emacssym">
+     <compile files="Two.java" options="-1.5 -emacssym">
        <message kind="warning" line="7" text="Missing foo()"/>
        <message kind="warning" line="13" text="Missing foo()"/>
      </compile>
   </ajc-test>
 
   <ajc-test dir="bugs169/pr291206" title="declare type error - 1">
-     <compile files="Three.java" options="-1.5 -XhasMember">
+     <compile files="Three.java" options="-1.5">
        <message kind="error" line="7" text="Missing foo()"/>
        <message kind="error" line="13" text="Missing foo()"/>
      </compile>

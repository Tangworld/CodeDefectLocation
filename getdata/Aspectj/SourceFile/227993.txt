@@ -119,7 +119,15 @@ final class BcelField extends ResolvedMemberImpl {
 		ensureAnnotationTypesRetrieved();
 		return annotations;
 	}
-    
+	
+	public AnnotationX getAnnotationOfType(UnresolvedType ofType) {
+        ensureAnnotationTypesRetrieved();
+        for (int i=0; i<annotations.length; i++) {
+            if (annotations[i].getTypeName().equals(ofType.getName())) return annotations[i];
+        }
+        return null;
+    }    
+	
 	private void ensureAnnotationTypesRetrieved() {
 		if (annotationTypes == null) {
     		Annotation annos[] = field.getAnnotations();
@@ -379,14 +379,15 @@ public class ExactAnnotationTypePattern extends AnnotationTypePattern {
 	public boolean equals(Object obj) {
 		if (!(obj instanceof ExactAnnotationTypePattern)) return false;
 		ExactAnnotationTypePattern other = (ExactAnnotationTypePattern) obj;
-		return (other.annotationType.equals(annotationType)) && isForParameterAnnotationMatch()==other.isForParameterAnnotationMatch();
+		return (other.annotationType.equals(annotationType)) && isForParameterAnnotationMatch()==other.isForParameterAnnotationMatch() &&
+        (annotationValues==null?other.annotationValues==null:annotationValues.equals(other.annotationValues));
 	}
 
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
 	 */
 	public int hashCode() {
-		return annotationType.hashCode()*37+(isForParameterAnnotationMatch()?0:1);
+        return (((annotationType.hashCode())*37+(isForParameterAnnotationMatch()?0:1))*37)+(annotationValues==null?0:annotationValues.hashCode());
 	}
 
 	public String toString() {
@@ -344,14 +344,16 @@ public class WildAnnotationTypePattern extends AnnotationTypePattern {
 	public boolean equals(Object obj) {
 		if (!(obj instanceof WildAnnotationTypePattern)) return false;
 		WildAnnotationTypePattern other = (WildAnnotationTypePattern) obj;
-		return other.typePattern.equals(typePattern) && this.isForParameterAnnotationMatch()==other.isForParameterAnnotationMatch();
+		return other.typePattern.equals(typePattern) && 
+		    this.isForParameterAnnotationMatch()==other.isForParameterAnnotationMatch() &&
+		    (annotationValues==null?other.annotationValues==null:annotationValues.equals(other.annotationValues));
 	}
 
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
 	 */
 	public int hashCode() {
-		return (17 + 37*typePattern.hashCode())*37+(isForParameterAnnotationMatch()?0:1);
+		return (((17 + 37*typePattern.hashCode())*37+(isForParameterAnnotationMatch()?0:1))*37)+(annotationValues==null?0:annotationValues.hashCode());
 	}
 
 	/* (non-Javadoc)
@@ -0,0 +1,41 @@
+
+import java.lang.annotation.*;
+
+enum Store {YES,NO;}
+
+@Retention(RetentionPolicy.RUNTIME)
+@interface SearchableProperty { Store store(); }
+
+public class FieldJP {
+    @SearchableProperty(store=Store.YES)
+    public static int fieldOne;
+    
+    @SearchableProperty(store=Store.NO)
+    public static int fieldTwo;
+    
+    public static int fieldThree;
+    
+    public static void main(String[] args) {
+        System.err.println("fone="+fieldOne);
+        System.err.println("ftwo="+fieldTwo);
+        System.err.println("fthr="+fieldThree);
+        fieldOne = 5;
+        fieldTwo = 6;
+        fieldThree = 7;
+    }
+}
+
+aspect X {
+    before(): get(@SearchableProperty(store=Store.YES) * *) {
+        System.err.println("get of YES field");
+    }
+    before(): get(@SearchableProperty(store=Store.NO) * *) {
+        System.err.println("get of NO field");
+    }
+    before(): set(@SearchableProperty(store=Store.YES) * *) {
+        System.err.println("set of YES field");
+    }
+    before(): set(@SearchableProperty(store=Store.NO) * *) {
+        System.err.println("set of NO field");
+    }
+}
\ No newline at end of file
@@ -19,6 +19,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1
+    public void testFieldJoinpointsAndAnnotationValues_pr227993() { runTest("field jp anno value"); }
     public void testGenericsBoundsDecp_pr231187() { runTest("generics bounds decp"); }
     public void testGenericsBoundsDecp_pr231187_2() { runTest("generics bounds decp - 2"); }
 	public void testLtwInheritedCflow_pr230134() { runTest("ltw inherited cflow"); }
@@ -3,6 +3,22 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
+
+    <ajc-test dir="bugs161/pr227993" title="field jp anno value">
+        <compile files="FieldJP.java" options="-1.5"/>
+        <run class="FieldJP">
+          <stderr>
+            <line text="get of YES field"/>
+            <line text="fone=0"/>
+            <line text="get of NO field"/>
+            <line text="ftwo=0"/>
+            <line text="fthr=0"/>
+            <line text="set of YES field"/>
+            <line text="set of NO field"/>
+          </stderr>
+        </run>
+    </ajc-test> 
+
     <ajc-test dir="bugs161/pr231187x" title="generics bounds decp">
         <compile files="Cement.java ConcreteClass.java SuperClass.java SuperClassAspect.aj WetCement.java Main.java" options="-1.5"/>
         <run class="concrete.Main">

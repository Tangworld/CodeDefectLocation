@@ -1262,9 +1262,10 @@ public class AjState implements CompilerConfigurationChangeFlags {
 					if (typeName.indexOf(BcelWeaver.SYNTHETIC_CLASS_POSTFIX) == -1) {
 						ResolvedType rt = world.resolve(typeName);
 						if (rt.isMissing()) {
-							throw new IllegalStateException("Type '" + rt.getSignature() + "' not found in world!");
-						}
-						if (rt.isAspect()) {
+							// This can happen in a case where another problem has occurred that prevented it being
+							// correctly added to the world. Eg. pr148285. Duplicate types
+							// throw new IllegalStateException("Type '" + rt.getSignature() + "' not found in world!");
+						} else if (rt.isAspect()) {
 							this.sourceFilesDefiningAspects.add(sourceFile);
 							break;
 						}
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.aspectj.weaver.patterns;
 
+import org.aspectj.weaver.BCException;
 import org.aspectj.weaver.ResolvedPointcutDefinition;
 import org.aspectj.weaver.ResolvedType;
 import org.aspectj.weaver.Shadow;
@@ -36,7 +37,13 @@ public class PerThisOrTargetPointcutVisitor extends AbstractPatternNodeVisitor {
 	}
 
 	public TypePattern getPerTypePointcut(Pointcut perClausePointcut) {
-		return (TypePattern) perClausePointcut.accept(this, perClausePointcut);
+		Object o = perClausePointcut.accept(this, perClausePointcut);
+		if (o instanceof TypePattern) {
+			return (TypePattern) o;
+		} else {
+			throw new BCException("perClausePointcut visitor did not return a typepattern, it returned " + o
+					+ (o == null ? "" : " of type " + o.getClass()));
+		}
 	}
 
 	// -- visitor methods, all is like Identity visitor except when it comes to transform pointcuts
@@ -159,6 +159,24 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		}
 	}
 
+	public void testPr148285() {
+		String p = "PR148285_2";
+		initialiseProject(p); // Single source file A.aj defines A and C
+		build(p);
+		checkWasFullBuild();
+		alter(p, "inc1"); // Second source introduced C.java, defines C
+		build(p);
+		checkWasntFullBuild();
+		List msgs = getErrorMessages(p);
+		assertEquals("error message should be 'The type C is already defined' ", "The type C is already defined", ((IMessage) msgs
+				.get(0)).getMessage());
+		alter("PR148285_2", "inc2"); // type C in A.aj is commented out
+		build("PR148285_2");
+		checkWasntFullBuild();
+		msgs = getErrorMessages(p);
+		assertTrue("There should be no errors reported:\n" + getErrorMessages(p), msgs.isEmpty());
+	}
+
 	public void testIncrementalAndAnnotations() {
 		initialiseProject("Annos");
 		build("Annos");
@@ -258,9 +276,9 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		assertEquals("Unexpected compiler error", 0, l.size());
 	}
 
-	public void testItdProb() {
+	/*public void testNPEGenericCtor_pr260944() {
 		AjdeInteractionTestbed.VERBOSE = true;
-		String p = "itdprob";
+		String p = "pr260944";
 		initialiseProject(p);
 		build(p);
 		checkWasFullBuild();
@@ -269,20 +287,28 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasntFullBuild();
 		List l = getCompilerErrorMessages(p);
 		assertEquals("Unexpected compiler error", 0, l.size());
-	}
-/*
-	public void testGenericITD_pr262257() throws IOException {
-		String p = "pr262257";
+	}*/
+
+	public void testItdProb() {
+		AjdeInteractionTestbed.VERBOSE = true;
+		String p = "itdprob";
 		initialiseProject(p);
 		build(p);
 		checkWasFullBuild();
-
-		dumptree(getModelFor(p).getHierarchy().getRoot(), 0);
-		PrintWriter pw = new PrintWriter(System.out);
-		getModelFor(p).dumprels(pw);
-		pw.flush();
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+		List l = getCompilerErrorMessages(p);
+		assertEquals("Unexpected compiler error", 0, l.size());
 	}
-*/
+
+	/*
+	 * public void testGenericITD_pr262257() throws IOException { String p = "pr262257"; initialiseProject(p); build(p);
+	 * checkWasFullBuild();
+	 * 
+	 * dumptree(getModelFor(p).getHierarchy().getRoot(), 0); PrintWriter pw = new PrintWriter(System.out);
+	 * getModelFor(p).dumprels(pw); pw.flush(); }
+	 */
 	public void testAnnotations_pr262154() {
 		String p = "pr262154";
 		initialiseProject(p);
@@ -0,0 +1,11 @@
+public aspect A {
+
+	before() : execution(* *.*(..)) {}
+	
+}
+
+class C {
+	
+	public void m() {}
+
+}
@@ -0,0 +1,5 @@
+public class C {
+	
+	public void m() {}
+
+}
@@ -0,0 +1,11 @@
+public aspect A {
+
+	before() : execution(* *.*(..)) {}
+	
+}
+
+//class C {
+//	
+//	public void m() {}
+//
+//}

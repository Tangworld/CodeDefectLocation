@@ -10,7 +10,6 @@
  *     PARC     initial implementation 
  * ******************************************************************/
 
-
 package org.aspectj.ajdt.internal.compiler.lookup;
 
 import java.util.HashMap;
@@ -31,7 +30,8 @@ import org.aspectj.weaver.BCException;
 public class InterTypeScope extends ClassScope {
 	ReferenceBinding onType;
 	List aliases;
-	Map /* real type variable > alias letter */ usedAliases; // Used later when reconstructing the resolved member
+	Map<TypeVariableBinding, String> /* real type variable > alias letter */usedAliases; // Used later when reconstructing the
+																						// resolved member
 
 	public InterTypeScope(Scope parent, ReferenceBinding onType) {
 		super(parent, null);
@@ -41,47 +41,53 @@ public class InterTypeScope extends ClassScope {
 	}
 
 	public InterTypeScope(Scope parent, ReferenceBinding rb, List list) {
-		this(parent,rb);
+		this(parent, rb);
 		this.aliases = list;
 	}
-	
+
 	public String getAnyAliasForTypeVariableBinding(TypeVariableBinding tvb) {
-		if (usedAliases==null) return null;
-		return (String)usedAliases.get(tvb);
+		if (usedAliases == null)
+			return null;
+		return (String) usedAliases.get(tvb);
 	}
 
 	// this method depends on the fact that BinaryTypeBinding extends SourceTypeBinding
 	private SourceTypeBinding makeSourceTypeBinding(ReferenceBinding onType) {
-		if (onType instanceof SourceTypeBinding) return (SourceTypeBinding)onType;
+		if (onType instanceof SourceTypeBinding)
+			return (SourceTypeBinding) onType;
 		else if (onType instanceof ParameterizedTypeBinding) {
-			ReferenceBinding rb = ((ParameterizedTypeBinding)onType).type;
-			if (rb instanceof SourceTypeBinding) return (SourceTypeBinding)rb;
-			else throw new BCException("In parameterized type "+onType+", can't handle reference binding "+rb);
-		} else if (onType instanceof ProblemReferenceBinding) { 
+			ReferenceBinding rb = ((ParameterizedTypeBinding) onType).type;
+			if (rb instanceof SourceTypeBinding)
+				return (SourceTypeBinding) rb;
+			else
+				throw new BCException("In parameterized type " + onType + ", can't handle reference binding " + rb);
+		} else if (onType instanceof ProblemReferenceBinding) {
 			return null;
 		} else if (onType instanceof TypeVariableBinding) {
 			// Problem will have already been reported, cant ITD on a type variable.
 			return null;
 		}
-		
+
 		throw new BCException("can't handle: " + onType);
 	}
 
 	public SourceTypeBinding invocationType() {
 		return parent.enclosingSourceType();
 	}
-	
+
 	public int addDepth() {
 		return 0;
 	}
-	
 
 	public TypeVariableBinding findTypeVariable(char[] name, SourceTypeBinding sourceType) {
+		if (sourceType == null) {
+			return null;
+		}
 		String variableName = new String(name);
-		int aliased = (aliases==null?-1:aliases.indexOf(variableName));
-		if (aliased!=-1) {
-			if (aliased>sourceType.typeVariables.length || sourceType.typeVariables.length==0) {
-				TypeVariableBinding tvb = new TypeVariableBinding("fake".toCharArray(),null,0);
+		int aliased = (aliases == null ? -1 : aliases.indexOf(variableName));
+		if (aliased != -1) {
+			if (aliased > sourceType.typeVariables.length || sourceType.typeVariables.length == 0) {
+				TypeVariableBinding tvb = new TypeVariableBinding("fake".toCharArray(), null, 0);
 				tvb.superclass = getJavaLangObject();
 				tvb.fPackage = new PackageBinding(environment());
 				return tvb;
@@ -89,22 +95,22 @@ public class InterTypeScope extends ClassScope {
 			}
 			TypeVariableBinding tvb = sourceType.typeVariables()[aliased];
 			tvb.fPackage = sourceType.fPackage;
-			if (usedAliases==null) usedAliases = new HashMap();
-			usedAliases.put(tvb,variableName);
+			if (usedAliases == null)
+				usedAliases = new HashMap<TypeVariableBinding, String>();
+			usedAliases.put(tvb, variableName);
 			return tvb;
 		} else {
-		    TypeVariableBinding variableBinding = sourceType.getTypeVariable(name);
-		    if (variableBinding == null) { // GENERICITDFIX
-		    	// Inside generic aspect, might want the type var attached to us
-		    	variableBinding = parent.findTypeVariable(name,((ClassScope) parent).referenceContext.binding);
-		    }
-		    return variableBinding;
+			TypeVariableBinding variableBinding = sourceType.getTypeVariable(name);
+			if (variableBinding == null) { // GENERICITDFIX
+				// Inside generic aspect, might want the type var attached to us
+				variableBinding = parent.findTypeVariable(name, ((ClassScope) parent).referenceContext.binding);
+			}
+			return variableBinding;
 		}
 	}
 
 	public Map getRecoveryAliases() {
 		return usedAliases;
 	}
-	
 
 }
Binary files differ
Binary files differ
@@ -0,0 +1,13 @@
+import com.foo.op4j.Country;
+import java.lang.Object;
+import org.javaruntype.type.Types;
+import org.op4j.functions.Function;
+import org.op4j.functions.Get;
+
+privileged aspect Country_Roo_Op4j {
+
+   public static class Country.Keys {
+
+       public static final Function COUNTRY = null;
+   }
+}
@@ -0,0 +1,13 @@
+import com.foo.op4j.Country;
+import java.lang.Object;
+import org.javaruntype.type.Types;
+import org.op4j.functions.Function;
+import org.op4j.functions.Get;
+
+privileged aspect Country_Roo_Op4j2 {
+
+   public static class Country.Keys {
+
+       public static final Function<Object, Country> COUNTRY = Get.attrOf(Types.forClass(Country.class),"country");
+   }
+}
@@ -21,6 +21,14 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
  */
 public class Ajc1611Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testITIT_336136() {
+		runTest("itit");
+	}
+
+	public void testITIT_336136_2() {
+		runTest("itit - 2");
+	}
+
 	public void testDeserialization_335682() {
 		runTest("pr335682");
 	}
@@ -2,6 +2,35 @@
 
 <suite>
 
+  <ajc-test dir="bugs1611/pr336136" title="itit">
+    <compile files="Country_Roo_Op4j.java">
+    <message kind="error" text="The import com.foo cannot be resolved" line="1"/>
+    <message kind="error" text="The import org.javaruntype cannot be resolved" line="3"/>
+    <message kind="error" text="The import org.op4j cannot be resolved" line="4"/>
+    <message kind="error" text="The import org.op4j cannot be resolved" line="5"/>
+    <message kind="error" text="Country cannot be resolved to a type" line="9"/>
+    <message kind="error" text="Function cannot be resolved to a type" line="11"/>
+    <message kind="error" text="can't determine modifiers of missing type Country_Roo_Op4j$Keys"/>
+    </compile>"
+  </ajc-test>
+  
+  
+  <ajc-test dir="bugs1611/pr336136" title="itit - 2">
+    <compile files="Country_Roo_Op4j2.java" options="-1.5">
+    <message kind="error" text="The import com.foo cannot be resolved" line="1"/>
+    <message kind="error" text="The import org.javaruntype cannot be resolved" line="3"/>
+    <message kind="error" text="The import org.op4j cannot be resolved" line="4"/>
+    <message kind="error" text="The import org.op4j cannot be resolved" line="5"/>
+    <message kind="error" text="Country cannot be resolved to a type" line="9"/>
+    <message kind="error" text="Country cannot be resolved to a type" line="11"/>
+    <message kind="error" text="Function cannot be resolved to a type" line="11"/>
+    <message kind="error" text="Get cannot be resolved" line="11"/>
+    <message kind="error" text="Types cannot be resolved" line="11"/>
+    <message kind="error" text="can't determine modifiers of missing type Country_Roo_Op4j2$Keys"/>
+    </compile>"
+  </ajc-test>
+  
+
   <ajc-test dir="bugs1611/pr335682" title="pr335682">
     <compile inpath="foo.jar" outjar="bar.jar"/>
   </ajc-test>

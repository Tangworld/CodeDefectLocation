@@ -16,7 +16,6 @@
 package org.aspectj.ajdt.internal.core.builder;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -850,6 +849,20 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 	private String genSourceSignature(ConstructorDeclaration constructorDeclaration) {
 		StringBuffer output = new StringBuffer();
 		ASTNode.printModifiers(constructorDeclaration.modifiers, output);
+		
+		//Append Type Parameters if any
+		TypeParameter types[] = constructorDeclaration.typeParameters();
+		if(types != null && types.length != 0) {
+			output.append("<");
+			for(int i = 0; i < types.length;i++){
+				if(i > 0){
+					output.append(", ");
+				}
+				types[i].printStatement(0, output);
+			}
+			output.append("> ");
+		}
+		
 		output.append(constructorDeclaration.selector).append('(');  
 		if (constructorDeclaration.arguments != null) {
 			for (int i = 0; i < constructorDeclaration.arguments.length; i++) {
@@ -1001,6 +1014,4 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 	private int getEndLine( TypeDeclaration td){
 		return Util.getLineNumber(td.declarationSourceEnd,lineseps,0,lineseps.length-1);
 	}
-
-
 }
@@ -1,6 +1,9 @@
 import java.util.List;
 
 public class C {
+	public <T> C(T b){
+  }
+  
   public <T> T returnT(T a){
 	  return a;
   }
@@ -11,8 +11,6 @@
 package org.aspectj.systemtest.ajc153;
 
 import java.io.File;
-import java.util.Iterator;
-import java.util.List;
 
 import junit.framework.Test;
 
@@ -108,8 +106,8 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	  // (2,3)=checkingIfShouldWeave,AcceptingResult for class
 	  // (4,5)=checkingIfShouldWeave,AcceptingResult for aspect
   }
-  public void testMatchVolatileField_pr150671() {runTest("match volatile field");};
-  public void testDuplicateJVMTIAgents_pr151938() {runTest("Duplicate JVMTI agents");};
+  public void testMatchVolatileField_pr150671() {runTest("match volatile field");}
+  public void testDuplicateJVMTIAgents_pr151938() {runTest("Duplicate JVMTI agents");}
   public void testLTWWorldWithAnnotationMatching_pr153572() { runTest("LTWWorld with annotation matching");}
 
   public void testReweavableAspectNotRegistered_pr129525 () {
@@ -122,7 +120,7 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
   public void testNPEinFieldSignatureImpl_pr155972 () {
 	  runTest("NPE in FieldSignatureImpl");
-  }
+  } 
 
   public void testNPEinInitializerSignatureImpl_pr155972 () {
 	  runTest("NPE in InitializerSignatureImpl");
@@ -262,6 +260,14 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		assertEquals("expected source signature to be " + expected + 
 				" but found " + ipe.getSourceSignature(), 
 				expected, ipe.getSourceSignature());
+		
+		// Generic Method Constructor
+	  	ipe = top.findElementForLabel(top.getRoot(),
+	  		  IProgramElement.Kind.CONSTRUCTOR,"C(T)");
+	  		  expected = "public <T> C(T b)";
+	  			assertEquals("expected source signature to be " + expected + 
+	  					" but found " + ipe.getSourceSignature(), 
+	  					expected, ipe.getSourceSignature());
   }
 
 

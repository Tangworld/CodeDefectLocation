@@ -1016,7 +1016,8 @@ public class AjBuildManager implements IOutputClassFileNameProvider, IBinarySour
 			public void acceptResult(CompilationResult unitResult) {
 				// end of compile, must now write the results to the output destination
 				// this is either a jar file or a file in a directory
-				if (!unitResult.hasErrors() || proceedOnError()) {
+				boolean hasErrors = unitResult.hasErrors();
+				if (!hasErrors || proceedOnError()) {
 					Collection classFiles = unitResult.compiledTypes.values();
 					boolean shouldAddAspectName = (buildConfig.getOutxmlName() != null);
 					for (Iterator iter = classFiles.iterator(); iter.hasNext();) {
@@ -1024,19 +1025,22 @@ public class AjBuildManager implements IOutputClassFileNameProvider, IBinarySour
 						String filename = new String(classFile.fileName());
 						String classname = filename.replace('/', '.');
 						filename = filename.replace('/', File.separatorChar) + ".class";
+
 						try {
 							if (buildConfig.getOutputJar() == null) {
 								String outfile = writeDirectoryEntry(unitResult, classFile, filename);
 								if (environmentSupportsIncrementalCompilation) {
-									ResolvedType type = getBcelWorld().resolve(classname);
-									if (type.isAspect()) {
-										state.recordAspectClassFile(outfile);
+									if (!classname.endsWith("$ajcMightHaveAspect")) {
+										ResolvedType type = getBcelWorld().resolve(classname);
+										if (type.isAspect()) {
+											state.recordAspectClassFile(outfile);
+										}
 									}
 								}
 							} else {
 								writeZipEntry(classFile, filename);
 							}
-							if (shouldAddAspectName)
+							if (shouldAddAspectName && !classname.endsWith("$ajcMightHaveAspect"))
 								addAspectName(classname, unitResult.getFileName());
 						} catch (IOException ex) {
 							IMessage message = EclipseAdapterUtils.makeErrorMessage(new String(unitResult.fileName),
@@ -1,3 +1,5 @@
 public aspect F implements Comparable pertarget(within(F)) {
 
 }
+
+
@@ -18,10 +18,6 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc163Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
-	// public void testImplementsPertarget_pr251940() {
-	// runTest("implements pertarget");
-	// }
-
 	public void testBreakingRecovery_pr226163() {
 		runTest("breaking recovery");
 	}
@@ -2,10 +2,6 @@
 
 <suite>
 
-    <ajc-test dir="bugs163/pr251940" title="implements pertarget">
-      <compile files="F.aj" options="-1.5"/>
-    </ajc-test>
-
     <ajc-test dir="bugs163/pr226163" title="breaking recovery">
       <compile files="Code.java" options="-1.5">
         <message kind="error" line="4" text="Syntax error"/>
@@ -171,6 +171,13 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		// incomplete
 	}
 
+	public void testNullDelegateBrokenCode_pr251940() {
+		String p = "pr251940";
+		initialiseProject(p);
+		build(p);
+		checkForError(p, "The type F must implement the inherited");
+	}
+
 	public void testBeanExample() throws Exception {
 		String p = "BeanExample";
 		initialiseProject(p);

@@ -650,6 +650,7 @@ public class BcelWeaver {
 					}
 				}
 			}
+			newP.m_ignoreUnboundBindingForNames = p.m_ignoreUnboundBindingForNames;
 			munger.setPointcut(newP);
 		}
 		// now that we have optimized individual pointcuts, optimize
@@ -660,7 +661,9 @@ public class BcelWeaver {
 		for (Iterator iter = shadowMungers.iterator(); iter.hasNext();) {
 			ShadowMunger munger = (ShadowMunger) iter.next();
 			Pointcut p = munger.getPointcut();
-			munger.setPointcut(shareEntriesFromMap(p, pcMap));
+			Pointcut newP = shareEntriesFromMap(p, pcMap);
+			newP.m_ignoreUnboundBindingForNames = p.m_ignoreUnboundBindingForNames;
+			munger.setPointcut(newP);
 		}
 	}
 
@@ -0,0 +1,7 @@
+
+
+class Two {
+	public static void main(String[] args) {
+		new Behavior().m(); 
+	}  
+}
@@ -0,0 +1,7 @@
+
+
+class Two {
+	public static void main(String[] args) {
+		new Behavior().m(); 
+	}  
+}
@@ -0,0 +1,15 @@
+public class Behavior {
+
+	public static void main(String[] args) {
+		new Behavior().m();
+	}
+
+	public void m() {
+		int i;
+	}
+
+	public void m2() {
+		int i;
+	}
+}
+
@@ -0,0 +1,21 @@
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+class Wibble {
+
+	@Pointcut("if() && call(public * m*(..)) && target(b)")
+	public static boolean adviseIfMonitoring(Behavior b) {
+	    return true;
+	}
+
+	
+	@Around("adviseIfMonitoring(b)")
+	public Object monitorBehaviorPerformance(ProceedingJoinPoint pjp, Behavior b)
+	throws Throwable {
+	    return pjp.proceed();
+	}
+}
+
@@ -53,6 +53,30 @@ import org.aspectj.util.FileUtil;
  */
 public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementalAjdeInteractionTestbed {
 
+	/*
+public void testIncrementalAspectWhitespace() throws Exception {
+		AjdeInteractionTestbed.VERBOSE = true;
+		String p = "xxx";
+		initialiseProject(p);
+		configureNonStandardCompileOptions(p, "-showWeaveInfo");
+		configureShowWeaveInfoMessages(p, true);
+		build(p);
+
+		List weaveMessages = getWeavingMessages(p);
+		if (weaveMessages.size() != 0) {
+			for (Iterator iterator = weaveMessages.iterator(); iterator.hasNext();) {
+				Object object = iterator.next();
+				System.out.println(object);
+			}
+		}
+		checkWasFullBuild();
+		assertNoErrors(p);
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+		assertNoErrors(p);
+	}*/
+
 	public void testIncrementalGenericItds_pr280676() throws Exception {
 		String p = "pr280676";
 		initialiseProject(p);
@@ -762,8 +786,26 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		assertEquals("Unexpected compiler error", 0, l.size());
 	}
 
-	public void testImports_pr263487() {
+	public void testIncrementalAnnoStyle_pr286341() {
 		AjdeInteractionTestbed.VERBOSE = true;
+		String base = "pr286341_base";
+		initialiseProject(base);
+		build(base);
+		checkWasFullBuild();
+		String p = "pr286341";
+		initialiseProject(p);
+		configureAspectPath(p, getProjectRelativePath(base, "bin"));
+		addClasspathEntry(p, getProjectRelativePath(base, "bin"));
+		build(p);
+		checkWasFullBuild();
+		assertNoErrors(p);
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+		assertNoErrors(p);
+	}
+
+	public void testImports_pr263487() {
 		String p2 = "importProb2";
 		initialiseProject(p2);
 		build(p2);
@@ -650,6 +650,7 @@ public class BcelWeaver {
 					}
 				}
 			}
+			newP.m_ignoreUnboundBindingForNames = p.m_ignoreUnboundBindingForNames;
 			munger.setPointcut(newP);
 		}
 		// now that we have optimized individual pointcuts, optimize
@@ -660,7 +661,9 @@ public class BcelWeaver {
 		for (Iterator iter = shadowMungers.iterator(); iter.hasNext();) {
 			ShadowMunger munger = (ShadowMunger) iter.next();
 			Pointcut p = munger.getPointcut();
-			munger.setPointcut(shareEntriesFromMap(p, pcMap));
+			Pointcut newP = shareEntriesFromMap(p, pcMap);
+			newP.m_ignoreUnboundBindingForNames = p.m_ignoreUnboundBindingForNames;
+			munger.setPointcut(newP);
 		}
 	}
 
@@ -0,0 +1,7 @@
+
+
+class Two {
+	public static void main(String[] args) {
+		new Behavior().m(); 
+	}  
+}
@@ -0,0 +1,7 @@
+
+
+class Two {
+	public static void main(String[] args) {
+		new Behavior().m(); 
+	}  
+}
@@ -0,0 +1,15 @@
+public class Behavior {
+
+	public static void main(String[] args) {
+		new Behavior().m();
+	}
+
+	public void m() {
+		int i;
+	}
+
+	public void m2() {
+		int i;
+	}
+}
+
@@ -0,0 +1,21 @@
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+class Wibble {
+
+	@Pointcut("if() && call(public * m*(..)) && target(b)")
+	public static boolean adviseIfMonitoring(Behavior b) {
+	    return true;
+	}
+
+	
+	@Around("adviseIfMonitoring(b)")
+	public Object monitorBehaviorPerformance(ProceedingJoinPoint pjp, Behavior b)
+	throws Throwable {
+	    return pjp.proceed();
+	}
+}
+
@@ -53,6 +53,30 @@ import org.aspectj.util.FileUtil;
  */
 public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementalAjdeInteractionTestbed {
 
+	/*
+public void testIncrementalAspectWhitespace() throws Exception {
+		AjdeInteractionTestbed.VERBOSE = true;
+		String p = "xxx";
+		initialiseProject(p);
+		configureNonStandardCompileOptions(p, "-showWeaveInfo");
+		configureShowWeaveInfoMessages(p, true);
+		build(p);
+
+		List weaveMessages = getWeavingMessages(p);
+		if (weaveMessages.size() != 0) {
+			for (Iterator iterator = weaveMessages.iterator(); iterator.hasNext();) {
+				Object object = iterator.next();
+				System.out.println(object);
+			}
+		}
+		checkWasFullBuild();
+		assertNoErrors(p);
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+		assertNoErrors(p);
+	}*/
+
 	public void testIncrementalGenericItds_pr280676() throws Exception {
 		String p = "pr280676";
 		initialiseProject(p);
@@ -762,8 +786,26 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		assertEquals("Unexpected compiler error", 0, l.size());
 	}
 
-	public void testImports_pr263487() {
+	public void testIncrementalAnnoStyle_pr286341() {
 		AjdeInteractionTestbed.VERBOSE = true;
+		String base = "pr286341_base";
+		initialiseProject(base);
+		build(base);
+		checkWasFullBuild();
+		String p = "pr286341";
+		initialiseProject(p);
+		configureAspectPath(p, getProjectRelativePath(base, "bin"));
+		addClasspathEntry(p, getProjectRelativePath(base, "bin"));
+		build(p);
+		checkWasFullBuild();
+		assertNoErrors(p);
+		alter(p, "inc1");
+		build(p);
+		checkWasntFullBuild();
+		assertNoErrors(p);
+	}
+
+	public void testImports_pr263487() {
 		String p2 = "importProb2";
 		initialiseProject(p2);
 		build(p2);

@@ -104,7 +104,7 @@ public class NameMangler {
 	}
 
     public static String itdAtDeclareParentsField(UnresolvedType aspectType, UnresolvedType itdType) {
-        return makeName(aspectType.getNameAsIdentifier(), itdType.getNameAsIdentifier());
+        return makeName("instance",aspectType.getNameAsIdentifier(), itdType.getNameAsIdentifier());
     }
 
 	public static String privilegedAccessMethodForMethod(String name, UnresolvedType objectType, UnresolvedType aspectType) {
@@ -1238,7 +1238,8 @@ public final class LazyClassGen {
 
 	private void makeSyntheticAndTransientIfNeeded(Field field) {
 		if (field.getName().startsWith(NameMangler.PREFIX) &&
-			!field.getName().startsWith("ajc$interField$")) {
+			!field.getName().startsWith("ajc$interField$") &&
+			!field.getName().startsWith("ajc$instance$")) {
 			// it's an aj added field
 			// first do transient
 			if (!field.isStatic()) {
@@ -27,6 +27,7 @@ public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	public void testDecFieldProblem_pr218167() { runTest("dec field problem");}
 	public void testGenericsSuperITD_pr206911() { runTest("generics super itd"); }
 	public void testGenericsSuperITD_pr206911_2() { runTest("generics super itd - 2"); }
+	public void testSerializationAnnotationStyle_pr216311() { runTest("serialization and annotation style");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -41,4 +41,9 @@
      <run class="bugs.VerifyError2"/>
    </ajc-test>
 
+   <ajc-test dir="bugs160/pr216311" title="serialization and annotation style">
+     <compile options="-1.5" files="PersistabilityTest.java,IPersistable.java,Persistability.java"/>
+     <run class="PersistabilityTest"/>
+   </ajc-test>
+   
 </suite>
\ No newline at end of file
@@ -0,0 +1,9 @@
+import java.io.Serializable;
+
+public interface IPersistable extends Serializable {
+
+    int getId();
+
+    void setId(int id);
+
+}
@@ -0,0 +1,44 @@
+
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.DeclareParents;
+import org.aspectj.lang.annotation.Pointcut;
+
+
+@Aspect
+public class Persistability {
+
+    static class Persistable implements IPersistable {
+
+        private static final long serialVersionUID = 7120491865883787353L;
+
+        private int id;
+
+        public Persistable() {
+            super();
+        }
+
+        public int getId() {
+            return id;
+        }
+
+        public void setId(int id) {
+            this.id = id;
+        }
+
+    }
+
+    @DeclareParents(value = "PersistabilityTest", defaultImpl = Persistable.class)
+    private IPersistable observable;
+
+    @Pointcut("initialization(IPersistable.new(..)) && this(bean) && !this(Persistable)")
+    void init(IPersistable bean) {
+    }
+
+    @Before("init(bean)")
+    public void beforeInit(IPersistable bean) {
+        bean.setId(System.identityHashCode(bean));
+    }
+
+}
@@ -0,0 +1,29 @@
+
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+public class PersistabilityTest {
+
+  public static void main(String []argv) throws Exception {
+
+        PersistabilityTest persistabilityTest1 = new PersistabilityTest();
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(bos);
+
+        oos.writeObject(persistabilityTest1);
+
+        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
+        ObjectInputStream ois = new ObjectInputStream(bis);
+
+        PersistabilityTest persistabilityTest2 = (PersistabilityTest) ois.readObject();
+
+        if (!(persistabilityTest1 instanceof IPersistable)) throw new RuntimeException("pTest1 not IPersistable");
+        if (!(persistabilityTest2 instanceof IPersistable)) throw new RuntimeException("pTest2 not IPersistable");
+        int o = ((IPersistable)persistabilityTest1).getId();
+        int o2 = ((IPersistable)persistabilityTest2).getId();
+        if (o!=o2) throw new RuntimeException(o+" != "+o2);
+    }
+}

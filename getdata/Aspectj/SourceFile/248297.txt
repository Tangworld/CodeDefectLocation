@@ -0,0 +1 @@
+public class DomainLogic<E, D extends DomainObject<E>> { }
@@ -0,0 +1 @@
+public class DomainObject<E> { }
@@ -0,0 +1,6 @@
+//@Configurable
+public class FancyDomainLogic<E, D extends DomainObject<E>> extends DomainLogic<E, D> { }
+
+aspect X {
+declare parents: FancyDomainLogic implements java.io.Serializable;
+}
@@ -0,0 +1 @@
+public class FancyDomainLogicImpl <E, D extends DomainObject<E>> extends FancyDomainLogic<E, D> { }
@@ -23,6 +23,10 @@ public class Ajc166Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// runTest("generics bridge");
 	// }
 
+	public void testGenericSigProblem_pr284297() {
+		runTest("generic signature problem");
+	}
+
 	public void testInterfacesSerializable_pr283229() {
 		runTest("interfaces and serializable");
 	}
@@ -2,6 +2,11 @@
 
 <suite>
 
+  <ajc-test dir="bugs166/pr284297" title="generic signature problem">
+     <compile files="DomainLogic.java DomainObject.java FancyDomainLogic.java" options="-1.5" outjar="code.jar"/>
+     <compile files="FancyDomainLogicImpl.java" options="-1.5" classpath="code.jar"/>
+   </ajc-test>
+
    <ajc-test dir="bugs166/pr283229" title="interfaces and serializable">
      <compile files="Foo.java" options="-1.5 -XaddSerialVersionUID"/>
      <run class="Foo">
@@ -604,7 +604,7 @@ public final class LazyClassGen {
 					signature.append("<");
 					for (int i = 0; i < tVars.length; i++) {
 						TypeVariable variable = tVars[i];
-						signature.append(variable.getSignature());
+						signature.append(variable.getSignatureForAttribute());
 					}
 					signature.append(">");
 				}

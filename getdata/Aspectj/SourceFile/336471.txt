@@ -1041,8 +1041,7 @@ public final class LazyClassGen {
 	 * Create a field in the type containing the shadow where the annotation retrieved during binding can be stored - for later fast
 	 * access.
 	 * 
-	 * @param shadow
-	 *            the shadow at which the @annotation result is being cached
+	 * @param shadow the shadow at which the @annotation result is being cached
 	 * @return a field
 	 */
 	public Field getAnnotationCachingField(BcelShadow shadow, ResolvedType toType) {
@@ -1202,7 +1201,9 @@ public final class LazyClassGen {
 
 	private void initializeTjp(InstructionFactory fact, InstructionList list, Field field, BcelShadow shadow) {
 		boolean fastSJP = false;
-		boolean isFastSJPAvailable = shadow.getWorld().isTargettingRuntime1_6_10();
+		// avoid fast SJP if it is for an enclosing joinpoint
+		boolean isFastSJPAvailable = shadow.getWorld().isTargettingRuntime1_6_10()
+				&& !enclosingStaticTjpType.equals(field.getType());
 
 		Member sig = shadow.getSignature();
 
@@ -1326,9 +1327,8 @@ public final class LazyClassGen {
 
 		final String factoryMethod;
 
-		if (world.isTargettingAspectJRuntime12()) { // TAG:SUPPORTING12: We
-			// didn't have makeESJP() in
-			// 1.2
+		// TAG:SUPPORTING12: We didn't have makeESJP() in 1.2
+		if (world.isTargettingAspectJRuntime12()) {
 			list.append(fact.createInvoke(factoryType.getClassName(), "makeSJP", staticTjpType, new Type[] { Type.STRING, sigType,
 					Type.INT }, Constants.INVOKEVIRTUAL));
 
@@ -0,0 +1,25 @@
+
+aspect Tester {
+	before(): call(* Foo.*(..)) {
+		System.out.println(thisEnclosingJoinPointStaticPart);
+	}
+	public static void main(String[] args) {
+		new Foo().run();
+	}
+}
+
+class Foo {
+	int i = 5;
+	public void run() {
+		bar("abc");
+	}
+	
+	public void bar(String s) {
+		System.out.println("hello");
+		i = 4;
+	}
+}
+
+class MyException extends Exception {
+	
+}
@@ -21,6 +21,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
  */
 public class Ajc1611Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testESJP_336471() {
+		runTest("esjp");
+	}
+
 	public void testITIT_336136() {
 		runTest("itit");
 	}
@@ -2,6 +2,17 @@
 
 <suite>
 
+  <ajc-test dir="bugs1611/pr336471" title="esjp">
+  	<compile files="Tester.aj" options="-1.5 -Xset:targetRuntime1_6_10=true"/>
+  	<run class="Tester">
+	  	<stdout>
+		  	<line text="execution(void Tester.main(String[]))"/>
+		  	<line text="execution(void Foo.run())"/>
+		  	<line text="hello"/>
+	  	</stdout>
+  	</run>
+  </ajc-test>
+  
   <ajc-test dir="bugs1611/pr336136" title="itit">
     <compile files="Country_Roo_Op4j.java">
     <message kind="error" text="The import com.foo cannot be resolved" line="1"/>

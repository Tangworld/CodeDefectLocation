@@ -24,13 +24,13 @@ import org.aspectj.weaver.bcel.Utility;
 public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
   //public void testGenericsProblem_pr151978() { runTest("generics problem");}
-//  public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
-//  public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   // public void testAmbiguousBinding_pr121805() { runTest("ambiguous binding");}
 //  public void testNoIllegalStateExceptionWithGenericInnerAspect_pr156058() { runTest("no IllegalStateException with generic inner aspect"); }
 //  public void testNegatedAnnotationMatchingProblem_pr153464() { runTest("negated annotation matching problem");}
+  public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
+  public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}
   public void testGenericArrays_pr158624() { runTest("generics and arrays"); }
   public void testMissingLineNumbersInStacktraceBefore_pr145442() { runTest("missing line numbers in stacktrace before");}
   public void testMissingLineNumbersInStacktraceBefore_pr145442_Binary() { runTest("missing line numbers in stacktrace before - binary");}
@@ -248,7 +248,7 @@
      <compile files="hello/HelloWorld.java hello/ThrowExceptionAfter.aj"/>
      <run class="hello.HelloWorld">
 		<stderr>
-	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:15)"/>
 	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
 	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
 		</stderr>
@@ -259,7 +259,7 @@
      <compile files="hello/HelloWorld.java hello/ThrowExceptionAround.aj" options="-XnoInline"/>
      <run class="hello.HelloWorld">
 		<stderr>
-	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:13)"/>
 	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
 	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
 		</stderr>
@@ -3058,7 +3058,7 @@ public class BcelShadow extends Shadow {
         // invoke the advice
         advice.append(munger.getNonTestAdviceInstructions(this));
         advice.append(returnConversionCode);
-		if (getKind()==Shadow.MethodExecution) {
+		if (getKind()==Shadow.MethodExecution && linenumber>0) {
 			advice.getStart().addTargeter(new LineNumberTag(linenumber));
 		}
 
@@ -1,6 +1,6 @@
 public abstract class FancyHelloWorld extends java.lang.Object:
   public void <init>():
-                    ALOAD_0     // FancyHelloWorld this   (line 7)
+                    ALOAD_0     // LFancyHelloWorld; this   (line 7)
                     INVOKESPECIAL java.lang.Object.<init> ()V
     constructor-execution(void FancyHelloWorld.<init>())
     |               BIPUSH 1
@@ -24,7 +24,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
                     ALOAD_0
                     ASTORE 15
     method-execution(void FancyHelloWorld.main(java.lang.String[]))
-    |               BIPUSH 1
+    |               BIPUSH 1   (line 9)
     |               ANEWARRAY java.lang.Object
     |               ASTORE 16
     |               ALOAD 16
@@ -43,7 +43,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
 
   public static String getName():
     method-execution(java.lang.String FancyHelloWorld.getName())
-    |               BIPUSH 0
+    |               BIPUSH 0   (line 20)
     |               ANEWARRAY java.lang.Object
     |               ASTORE 10
     |               NEW FancyHelloWorld$AjcClosure21
@@ -101,7 +101,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
                     ASTORE_3   (line 9)
     finally -> E1
     | catch java.lang.Exception -> E0
-    | |             ALOAD_3     // java.io.PrintStream out   (line 11)
+    | |             ALOAD_3     // Ljava/io/PrintStream; out   (line 11)
     | |             LDC "bye"
     | |             ASTORE 5
     | |             ASTORE 7
@@ -127,8 +127,8 @@ public abstract class FancyHelloWorld extends java.lang.Object:
     | |             GOTO L0
     | catch java.lang.Exception -> E0
     |           E0: ASTORE 11   (line 12)
-    |               ALOAD_3     // java.io.PrintStream out   (line 13)
-    |               ALOAD 11     // java.lang.Exception e
+    |               ALOAD_3     // Ljava/io/PrintStream; out   (line 13)
+    |               ALOAD 11     // Ljava/lang/Exception; e
     |               ASTORE 13
     |               ASTORE 15
     | method-call(void java.io.PrintStream.println(java.lang.Object))
@@ -159,7 +159,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
                 L0: JSR L1
                     GOTO L2
                 L1: ASTORE 21
-                    ALOAD_3     // java.io.PrintStream out   (line 15)
+                    ALOAD_3     // Ljava/io/PrintStream; out   (line 15)
                     LDC "finally"
                     ASTORE 23
                     ASTORE 25
@@ -216,7 +216,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
   static final String getName_aroundBody20():
                     ICONST_0   (line 20)
                     ISTORE_0
-                    ILOAD_0     // int x   (line 21)
+                    ILOAD_0     // I x   (line 21)
                     LDC "name"
                     ASTORE_2
     method-call(int java.lang.String.hashCode())
@@ -235,7 +235,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
     |               INVOKESTATIC org.aspectj.runtime.internal.Conversions.intValue (Ljava/lang/Object;)I
     method-call(int java.lang.String.hashCode())
                     IADD
-                    ISTORE_0     // int x
+                    ISTORE_0     // I x
                     LDC "name"   (line 22)
                     ASTORE 6
     constructor-call(void java.lang.StringBuffer.<init>(java.lang.String))
@@ -253,7 +253,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
     |               INVOKESTATIC Aspect.ajc_around (Lorg/aspectj/runtime/internal/AroundClosure;)Ljava/lang/Object;
     |               CHECKCAST java.lang.StringBuffer
     constructor-call(void java.lang.StringBuffer.<init>(java.lang.String))
-                    ILOAD_0     // int x
+                    ILOAD_0     // I x
                     ISTORE 10
                     ASTORE 12
     method-call(java.lang.StringBuffer java.lang.StringBuffer.append(int))
@@ -1,6 +1,6 @@
 public class HelloWorld extends java.lang.Object:
   public void <init>():
-                    ALOAD_0     // HelloWorld this   (line 5)
+                    ALOAD_0     // LHelloWorld; this   (line 5)
                     INVOKESPECIAL java.lang.Object.<init> ()V
     constructor-execution(void HelloWorld.<init>())
     |               BIPUSH 1
@@ -24,7 +24,7 @@ public class HelloWorld extends java.lang.Object:
                     ALOAD_0
                     ASTORE 5
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               BIPUSH 1
+    |               BIPUSH 1   (line 8)
     |               ANEWARRAY java.lang.Object
     |               ASTORE 6
     |               ALOAD 6
@@ -44,7 +44,7 @@ public class HelloWorld extends java.lang.Object:
                     INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                     ASTORE 10
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               BIPUSH 2
+    |               BIPUSH 2   (line 8)
     |               ANEWARRAY java.lang.Object
     |               ASTORE 12
     |               ALOAD 12
@@ -271,7 +271,7 @@ public class HelloWorld extends java.lang.Object:
   end static final void main_aroundBody12(String[], org.aspectj.lang.JoinPoint)
 
   static final void main_aroundBody14(String[], org.aspectj.lang.JoinPoint):
-                    BIPUSH 2
+                    BIPUSH 2   (line 8)
                     ANEWARRAY java.lang.Object
                     ASTORE_2
                     ALOAD_2
@@ -44,7 +44,7 @@ public class HelloWorld extends java.lang.Object:
                     INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                     ASTORE 8
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               BIPUSH 2
+    |               BIPUSH 2   (line 8)
     |               ANEWARRAY java.lang.Object
     |               ASTORE 9
     |               ALOAD 9
@@ -91,7 +91,7 @@ public class DynamicHelloWorld extends java.lang.Object implements java.io.Seria
   end static final String doit_aroundBody0(DynamicHelloWorld, String, java.util.List)
 
   static final String doit_aroundBody2(DynamicHelloWorld, String, java.util.List):
-                    INVOKESTATIC MyTrace.aspectOf ()LMyTrace;
+                    INVOKESTATIC MyTrace.aspectOf ()LMyTrace;   (line 21)
                     ALOAD_0
                     BIPUSH 3
                     ANEWARRAY java.lang.Object
@@ -43,6 +43,7 @@ import org.aspectj.apache.bcel.generic.InstructionHandle;
 import org.aspectj.apache.bcel.generic.InstructionList;
 import org.aspectj.apache.bcel.generic.InstructionTargeter;
 import org.aspectj.apache.bcel.generic.InvokeInstruction;
+import org.aspectj.apache.bcel.generic.LineNumberTag;
 import org.aspectj.apache.bcel.generic.LoadInstruction;
 import org.aspectj.apache.bcel.generic.LocalVariableTag;
 import org.aspectj.apache.bcel.generic.MULTIANEWARRAY;
@@ -412,10 +413,13 @@ public class BcelShadow extends Shadow {
 		this.range = range;
 	}
 
+	private int sourceline = -1;
+	
     public int getSourceLine() {
     	// if the kind of join point for which we are a shadow represents
     	// a method or constructor execution, then the best source line is
     	// the one from the enclosingMethod declarationLineNumber if available.
+    	if (sourceline!=-1) return sourceline;
     	Kind kind = getKind();
     	if ( (kind == MethodExecution)  ||
     		 (kind == ConstructorExecution) ||
@@ -424,20 +428,23 @@ public class BcelShadow extends Shadow {
 			 (kind == PreInitialization) ||
 			 (kind == Initialization)) {
     		if (getEnclosingMethod().hasDeclaredLineNumberInfo()) {
-    			return getEnclosingMethod().getDeclarationLineNumber();
+    			sourceline= getEnclosingMethod().getDeclarationLineNumber();
+    			return sourceline;
     		}
     	}
 
     	if (range == null) {
     		if (getEnclosingMethod().hasBody()) {
-    			return Utility.getSourceLine(getEnclosingMethod().getBody().getStart());
+    			sourceline= Utility.getSourceLine(getEnclosingMethod().getBody().getStart());
+    			return sourceline;
     		} else {
-    			return 0;
+    			sourceline= 0;
+    			return sourceline;
     		}
     	}
-    	int ret = Utility.getSourceLine(range.getStart());
-    	if (ret < 0) return 0;
-    	return ret;
+    	sourceline = Utility.getSourceLine(range.getStart());
+    	if (sourceline < 0) sourceline = 0;
+    	return sourceline;
     }
 
     // overrides
@@ -2930,6 +2937,7 @@ public class BcelShadow extends Shadow {
 
 		enclosingMethod.setCanInline(false);
 
+		int linenumber = getSourceLine();
         // MOVE OUT ALL THE INSTRUCTIONS IN MY SHADOW INTO ANOTHER METHOD!
         LazyMethodGen callbackMethod = 
         	extractMethod(
@@ -3050,6 +3058,9 @@ public class BcelShadow extends Shadow {
         // invoke the advice
         advice.append(munger.getNonTestAdviceInstructions(this));
         advice.append(returnConversionCode);
+		if (getKind()==Shadow.MethodExecution) {
+			advice.getStart().addTargeter(new LineNumberTag(linenumber));
+		}
 
 		if (!hasDynamicTest) {
 			range.append(advice);
Binary files differ
@@ -1,13 +1,13 @@
   public void ma()    org.aspectj.weaver.MethodDeclarationLineNumber: 14:307
 :
-                    INVOKESTATIC Two.aspectOf ()LTwo;
+                    INVOKESTATIC Two.aspectOf ()LTwo;   (line 15)
                     INVOKEVIRTUAL Two.ajc$before$Two$1$8d8821ee ()V
                     ALOAD_0
                     DUP
                     ASTORE_1
                     MONITORENTER
     finally -> E1
-    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 15)
+    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;
     |               LDC "hello"
     |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V
     |               ALOAD_1
@@ -24,14 +24,15 @@ import org.aspectj.weaver.bcel.Utility;
 public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
   //public void testGenericsProblem_pr151978() { runTest("generics problem");}
-  //public void testMissingLineNumbersInStacktraceBefore_pr145442() { runTest("missing line numbers in stacktrace before");}
-  //public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
-  //public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}
+//  public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
+//  public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   // public void testAmbiguousBinding_pr121805() { runTest("ambiguous binding");}
 //  public void testNoIllegalStateExceptionWithGenericInnerAspect_pr156058() { runTest("no IllegalStateException with generic inner aspect"); }
 //  public void testNegatedAnnotationMatchingProblem_pr153464() { runTest("negated annotation matching problem");}
+  public void testMissingLineNumbersInStacktraceBefore_pr145442() { runTest("missing line numbers in stacktrace before");}
+  public void testMissingLineNumbersInStacktraceBefore_pr145442_Binary() { runTest("missing line numbers in stacktrace before - binary");}
   public void testAnnotationStylePointcutNPE_pr158412() { runTest("annotation style pointcut npe"); }
   public void testAnnotationStylePointcutNPE_pr158412_2() { runTest("annotation style pointcut npe - 2"); }
   public void testAnnotationsCallConstructors_pr158126() { runTest("annotations, call and constructors problem");}
@@ -222,8 +222,18 @@
      <compile files="hello/HelloWorld.java hello/ThrowExceptionBefore.aj"/>
      <run class="hello.HelloWorld">
 		<stderr>
-	    	<line text="hello.HelloWorld.println(HelloWorld.java:13)"/>
-	    	<!--line text="hello.HelloWorld.println(HelloWorld.java)"/-->
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
+	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
+	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
+		</stderr>
+     </run>
+    </ajc-test> 
+    
+	<ajc-test dir="bugs153/pr145442" title="missing line numbers in stacktrace before - binary">
+     <compile inpath="helloworld.jar" files="hello/ThrowExceptionBefore.aj"/>
+     <run class="hello.HelloWorld">
+		<stderr>
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
 	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
 	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
 		</stderr>
@@ -234,7 +244,7 @@
      <compile files="hello/HelloWorld.java hello/ThrowExceptionAfter.aj"/>
      <run class="hello.HelloWorld">
 		<stderr>
-	    	<line text="hello.HelloWorld.println(HelloWorld.java:15)"/>
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
 	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
 	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
 		</stderr>
@@ -245,8 +255,7 @@
      <compile files="hello/HelloWorld.java hello/ThrowExceptionAround.aj" options="-XnoInline"/>
      <run class="hello.HelloWorld">
 		<stderr>
-	    	<line text="hello.HelloWorld.println(HelloWorld.java:13)"/>
-	    	<!--line text="hello.HelloWorld.println(HelloWorld.java:1)"/-->
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:14)"/>
 	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
 	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
 		</stderr>
@@ -24,6 +24,7 @@ import org.aspectj.apache.bcel.generic.InstructionConstants;
 import org.aspectj.apache.bcel.generic.InstructionFactory;
 import org.aspectj.apache.bcel.generic.InstructionHandle;
 import org.aspectj.apache.bcel.generic.InstructionList;
+import org.aspectj.apache.bcel.generic.LineNumberTag;
 import org.aspectj.bridge.ISourceLocation;
 import org.aspectj.bridge.Message;
 import org.aspectj.weaver.Advice;
@@ -424,7 +425,24 @@ public class BcelAdvice extends Advice {
 	    il.append(getNonTestAdviceInstructions(shadow));
 
         InstructionHandle ifYesAdvice = il.getStart();
-        il.insert(getTestInstructions(shadow, ifYesAdvice, ifNoAdvice, ifYesAdvice));	
+        il.insert(getTestInstructions(shadow, ifYesAdvice, ifNoAdvice, ifYesAdvice));
+        
+        // If inserting instructions at the start of a method, we need a nice line number for this entry
+        // in the stack trace
+        if (shadow.getKind()==Shadow.MethodExecution && getKind()==AdviceKind.Before) {
+        	int lineNumber=0;
+        	// Uncomment this code if you think we should use the method decl line number when it exists...
+//        	// If the advised join point is in a class built by AspectJ, we can use the declaration line number
+//        	boolean b = shadow.getEnclosingMethod().getMemberView().hasDeclarationLineNumberInfo();
+//        	if (b) {
+//        		lineNumber = shadow.getEnclosingMethod().getMemberView().getDeclarationLineNumber();
+//        	} else { // If it wasn't, the best we can do is the line number of the first instruction in the method
+        		lineNumber = shadow.getEnclosingMethod().getMemberView().getLineNumberOfFirstInstruction();
+//        	}
+        	if (lineNumber>0) il.getStart().addTargeter(new LineNumberTag(lineNumber));
+        }
+        
+        
         return il;
 	}
 
@@ -23,6 +23,8 @@ import org.aspectj.apache.bcel.classfile.Attribute;
 import org.aspectj.apache.bcel.classfile.ExceptionTable;
 import org.aspectj.apache.bcel.classfile.GenericSignatureParser;
 import org.aspectj.apache.bcel.classfile.JavaClass;
+import org.aspectj.apache.bcel.classfile.LineNumber;
+import org.aspectj.apache.bcel.classfile.LineNumberTable;
 import org.aspectj.apache.bcel.classfile.LocalVariable;
 import org.aspectj.apache.bcel.classfile.LocalVariableTable;
 import org.aspectj.apache.bcel.classfile.Method;
@@ -102,6 +104,13 @@ public final class BcelMethod extends ResolvedMemberImpl {
 		return super.getParameterNames();
 	}
 
+    public int getLineNumberOfFirstInstruction() {
+    	LineNumberTable lnt = method.getLineNumberTable();
+    	if (lnt==null) return -1;
+    	LineNumber[] lns = lnt.getLineNumberTable();
+    	if (lns==null || lns.length==0) return -1;
+    	return lns[0].getLineNumber();
+    }
 
 	public void determineParameterNames() {
 		if (parameterNamesInitialized) return;
@@ -25,7 +25,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
                     ALOAD_0
                     ASTORE 19
     method-execution(void FancyHelloWorld.main(java.lang.String[]))
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 9)
     |               BIPUSH 1
     |               ANEWARRAY java.lang.Object
     |               ASTORE 21
@@ -45,7 +45,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
 
   public static String getName():
     method-execution(java.lang.String FancyHelloWorld.getName())
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 20)
     |               BIPUSH 0
     |               ANEWARRAY java.lang.Object
     |               ASTORE 15
@@ -292,7 +292,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
   end static final void main_aroundBody20(String[])
 
   static final void main_aroundBody22(String[]):
-                    INVOKESTATIC Aspect.ajc_before_method_execution ()V
+                    INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 9)
                     BIPUSH 1
                     ANEWARRAY java.lang.Object
                     ASTORE_1
@@ -500,7 +500,7 @@ public abstract class FancyHelloWorld extends java.lang.Object:
   end static final String getName_aroundBody40()
 
   static final String getName_aroundBody42():
-                    INVOKESTATIC Aspect.ajc_before_method_execution ()V
+                    INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 20)
                     BIPUSH 0
                     ANEWARRAY java.lang.Object
                     ASTORE_0
@@ -25,7 +25,7 @@ public class HelloWorld extends java.lang.Object:
                     ALOAD_0
                     ASTORE 7
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 8)
     |               BIPUSH 1
     |               ANEWARRAY java.lang.Object
     |               ASTORE 9
@@ -153,7 +153,7 @@ public class HelloWorld extends java.lang.Object:
   end static final void main_aroundBody12(String[])
 
   static final void main_aroundBody14(String[]):
-                    INVOKESTATIC Aspect.ajc_before_method_execution ()V
+                    INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 8)
                     BIPUSH 1
                     ANEWARRAY java.lang.Object
                     ASTORE_1
@@ -10,10 +10,10 @@ public abstract class FancyHelloWorld extends java.lang.Object:
 
   public static void main(String[]):
     method-execution(void FancyHelloWorld.main(java.lang.String[]))
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 9)
     | field-get(java.io.PrintStream java.lang.System.out)
     | |             INVOKESTATIC Aspect.ajc_before_field_get ()V
-    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 9)
+    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;
     | field-get(java.io.PrintStream java.lang.System.out)
     |               ASTORE_1
     | finally -> E1
@@ -55,8 +55,8 @@ public abstract class FancyHelloWorld extends java.lang.Object:
 
   public static String getName():
     method-execution(java.lang.String FancyHelloWorld.getName())
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
-    |               ICONST_0   (line 20)
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 20)
+    |               ICONST_0
     |               ISTORE_0
     |               ILOAD_0     // int x   (line 21)
     |               LDC "name"
@@ -10,10 +10,10 @@ public class HelloWorld extends java.lang.Object:
 
   public static void main(String[]):
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 8)
     | field-get(java.io.PrintStream java.lang.System.out)
     | |             INVOKESTATIC Aspect.ajc_before_field_get ()V
-    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 8)
+    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;
     | field-get(java.io.PrintStream java.lang.System.out)
     |               LDC "hello world"   (line 9)
     | method-call(void java.io.PrintStream.println(java.lang.String))
@@ -9,7 +9,7 @@ public class DynamicHelloWorld extends java.lang.Object implements java.io.Seria
 
   public static void main(String[]):
     method-execution(void DynamicHelloWorld.main(java.lang.String[]))
-    |               GETSTATIC Aspect.ajc$cflowStack$0 Lorg/aspectj/runtime/internal/CFlowStack;
+    |               GETSTATIC Aspect.ajc$cflowStack$0 Lorg/aspectj/runtime/internal/CFlowStack;   (line 12)
     |               INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.isValid ()Z
     |               IFEQ L0
     |               GETSTATIC Aspect.ajc$cflowStack$0 Lorg/aspectj/runtime/internal/CFlowStack;
@@ -18,7 +18,7 @@ public class DynamicHelloWorld extends java.lang.Object implements java.io.Seria
     |               CHECKCAST java.util.ArrayList
     |               INVOKESTATIC Aspect.ajc_before_0 (Ljava/util/ArrayList;)V
     | catch java.lang.UnsupportedOperationException -> E0
-    | |         L0: NEW DynamicHelloWorld   (line 12)
+    | |         L0: NEW DynamicHelloWorld
     | |             DUP
     | |             INVOKESPECIAL DynamicHelloWorld.<init> ()V
     | |             LDC "hello"
@@ -19,10 +19,10 @@ public class FieldyHelloWorld extends java.lang.Object:
 
   public static void main(String[]):
     method-execution(void FieldyHelloWorld.main(java.lang.String[]))
-    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V
+    |               INVOKESTATIC Aspect.ajc_before_method_execution ()V   (line 6)
     | field-get(java.lang.String FieldyHelloWorld.str)
     | |             INVOKESTATIC Aspect.ajc_before_field_get ()V
-    | |             GETSTATIC FieldyHelloWorld.str Ljava/lang/String;   (line 6)
+    | |             GETSTATIC FieldyHelloWorld.str Ljava/lang/String;
     | field-get(java.lang.String FieldyHelloWorld.str)
     | method-call(java.lang.String java.lang.String.valueOf(java.lang.Object))
     | |             INVOKESTATIC Aspect.ajc_before_method_call ()V
@@ -13,12 +13,12 @@ public class HelloWorld extends java.lang.Object:
 
   public static void main(String[]):
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               GETSTATIC HelloWorld.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$EnclosingStaticPart;
+    |               GETSTATIC HelloWorld.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$EnclosingStaticPart;   (line 8)
     |               INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint$StaticPart;)V
     | field-get(java.io.PrintStream java.lang.System.out)
     | |             GETSTATIC HelloWorld.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$EnclosingStaticPart;
     | |             INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint$StaticPart;)V
-    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 8)
+    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;
     | field-get(java.io.PrintStream java.lang.System.out)
     |               LDC "hello world"   (line 9)
     | method-call(void java.io.PrintStream.println(java.lang.String))
@@ -15,12 +15,12 @@ public class HelloWorld extends java.lang.Object:
 
   public static void main(String[]):
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               GETSTATIC HelloWorld.ajc$tjp_3 Lorg/aspectj/lang/JoinPoint$StaticPart;
+    |               GETSTATIC HelloWorld.ajc$tjp_3 Lorg/aspectj/lang/JoinPoint$StaticPart;   (line 8)
     |               INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint$StaticPart;)V
     | field-get(java.io.PrintStream java.lang.System.out)
     | |             GETSTATIC HelloWorld.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$StaticPart;
     | |             INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint$StaticPart;)V
-    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 8)
+    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;
     | field-get(java.io.PrintStream java.lang.System.out)
     |               LDC "hello world"   (line 9)
     | method-call(void java.io.PrintStream.println(java.lang.String))
@@ -28,7 +28,7 @@ public class HelloWorld extends java.lang.Object:
                     INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                     ASTORE 5
     method-execution(void HelloWorld.main(java.lang.String[]))
-    |               ALOAD 5
+    |               ALOAD 5   (line 8)
     |               INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint;)V
     |               GETSTATIC HelloWorld.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$StaticPart;
     |               ACONST_NULL
@@ -38,7 +38,7 @@ public class HelloWorld extends java.lang.Object:
     | field-get(java.io.PrintStream java.lang.System.out)
     | |             ALOAD_1
     | |             INVOKESTATIC Aspect.ajc_before (Lorg/aspectj/lang/JoinPoint;)V
-    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 8)
+    | |             GETSTATIC java.lang.System.out Ljava/io/PrintStream;
     | field-get(java.io.PrintStream java.lang.System.out)
     |               LDC "hello world"   (line 9)
     |               ASTORE_3
@@ -42,7 +42,7 @@ public class DynamicHelloWorld extends java.lang.Object implements java.io.Seria
                     ALOAD_2
                     ASTORE 4
     method-execution(java.lang.String DynamicHelloWorld.doit(java.lang.String, java.util.List))
-    |               INVOKESTATIC MyTrace.aspectOf ()LMyTrace;
+    |               INVOKESTATIC MyTrace.aspectOf ()LMyTrace;   (line 21)
     |               ALOAD_0
     |               INVOKEVIRTUAL Trace.ajc$before$Trace$1$26352be2 (Ljava/lang/Object;)V
     |               INVOKESTATIC MyTrace.aspectOf ()LMyTrace;
@@ -0,0 +1,44 @@
+package hello;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintStream;
+
+public class HelloWorld {
+
+	public void println () {
+		System.out.println("Hello World!");
+	}
+
+	private void testStackTrace () throws IOException {
+		try {
+			println();
+		}
+		catch (Exception ex) {
+			printRelevantStackEntries(ex,getClass().getName());
+		}
+	}
+	
+	private static void printRelevantStackEntries (Exception ex, String className) throws IOException {
+		ByteArrayOutputStream baos = new ByteArrayOutputStream();
+		PrintStream ps = new PrintStream(baos);
+		ex.printStackTrace(ps);
+		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+		BufferedReader br = new BufferedReader(new InputStreamReader(bais));
+		String entry;
+		while ((entry = br.readLine()) != null) {
+			if (entry.indexOf(className) != -1) {
+				System.err.println(entry);
+			}
+		}
+	}
+	
+	public static void main(String[] args) throws Exception {
+		new HelloWorld().testStackTrace();
+	}
+
+}
@@ -0,0 +1,8 @@
+package hello;
+
+public aspect ThrowExceptionAfter {
+
+	after () : execution(public void println()) {
+		throw new UnsupportedOperationException();
+	}
+}
@@ -0,0 +1,8 @@
+package hello;
+
+public aspect ThrowExceptionAround {
+
+	void around () : execution(public void println()) {
+		throw new UnsupportedOperationException();
+	}
+}
@@ -0,0 +1,8 @@
+package hello;
+
+public aspect ThrowExceptionBefore {
+
+	before () : execution(public void println()) {
+		throw new UnsupportedOperationException();
+	}
+}
@@ -19,7 +19,9 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
-  // public void testMissingLineNumbersInStacktrace_pr145442() { runTest("missing line numbers in stacktrace");}
+   public void testMissingLineNumbersInStacktraceBefore_pr145442() { runTest("missing line numbers in stacktrace before");}
+   public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
+   public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   // public void testAmbiguousBinding_pr121805() { runTest("ambiguous binding");}
@@ -115,9 +115,43 @@
      <compile files="Complex.java"/>
     </ajc-test> 
 
-	<ajc-test dir="bugs153/pr145442" title="missing line numbers in stacktrace">
-     <compile files="MissingLineNumbers.java"/>
-     <run class="MissingLineNumbers"/>
+	<ajc-test dir="bugs153/pr145442" title="missing line numbers in stacktrace before">
+     <compile files="hello/HelloWorld.java hello/ThrowExceptionBefore.aj"/>
+     <run class="hello.HelloWorld">
+		<stderr>
+<!--		
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:13)"/>
+-->	    	
+	    	<line text="hello.HelloWorld.println(HelloWorld.java)"/>
+	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
+	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
+		</stderr>
+     </run>
+    </ajc-test> 
+    
+	<ajc-test dir="bugs153/pr145442" title="missing line numbers in stacktrace after">
+     <compile files="hello/HelloWorld.java hello/ThrowExceptionAfter.aj"/>
+     <run class="hello.HelloWorld">
+		<stderr>
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:15)"/>
+	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
+	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
+		</stderr>
+     </run>
+    </ajc-test> 
+    
+	<ajc-test dir="bugs153/pr145442" title="missing line numbers in stacktrace around">
+     <compile files="hello/HelloWorld.java hello/ThrowExceptionAround.aj" options="-XnoInline"/>
+     <run class="hello.HelloWorld">
+		<stderr>
+<!--		
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:13)"/>
+-->	    	
+	    	<line text="hello.HelloWorld.println(HelloWorld.java:1)"/>
+	    	<line text="hello.HelloWorld.testStackTrace(HelloWorld.java:19)"/>
+	    	<line text="hello.HelloWorld.main(HelloWorld.java:41)"/>
+		</stderr>
+     </run>
     </ajc-test> 
 
 	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 1">

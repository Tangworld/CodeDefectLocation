@@ -26,6 +26,7 @@ import org.aspectj.weaver.World;
 
 public class DeclarePrecedence extends Declare {
 	private TypePatternList patterns;
+	private IScope scope = null; // non-null means it has not yet been resolved (used by annotation style lazy resolution)
 
 	public DeclarePrecedence(List patterns) {
 		this(new TypePatternList(patterns));
@@ -76,13 +77,21 @@ public class DeclarePrecedence extends Declare {
 		return ret;
 	}
 
-	boolean underResolution = false;
+	public void setScopeForResolution(IScope scope) {
+		this.scope = scope;
+	}
+
+	public void ensureResolved() { // Lazy resolution - due to pr256779
+		if (scope != null) {
+			try {
+				resolve(scope);
+			} finally {
+				scope = null;
+			}
+		}
+	}
 
 	public void resolve(IScope scope) {
-		// if (underResolution) {
-		// return;
-		// }
-		// underResolution = true;
 		patterns = patterns.resolveBindings(scope, Bindings.NONE, false, false);
 		boolean seenStar = false;
 
@@ -101,7 +110,8 @@ public class DeclarePrecedence extends Declare {
 				continue;
 
 			// Cannot do a dec prec specifying a non-aspect types unless suffixed with a '+'
-			if (!exactType.isAspect() && !pi.isIncludeSubtypes() && !exactType.isTypeVariableReference()) {
+			if (!exactType.isAspect() && !exactType.isAnnotationStyleAspect() && !pi.isIncludeSubtypes()
+					&& !exactType.isTypeVariableReference()) {
 				scope.getWorld().showMessage(IMessage.ERROR,
 						WeaverMessages.format(WeaverMessages.CLASSES_IN_PRECEDENCE, exactType.getName()), pi.getSourceLocation(),
 						null);
@@ -119,15 +129,16 @@ public class DeclarePrecedence extends Declare {
 							pi.getSourceLocation(), pj.getSourceLocation());
 				}
 			}
-			// underResolution = false;
 		}
 	}
 
 	public TypePatternList getPatterns() {
+		ensureResolved();
 		return patterns;
 	}
 
 	private int matchingIndex(ResolvedType a) {
+		ensureResolved();
 		int knownMatch = -1;
 		int starMatch = -1;
 		for (int i = 0, len = patterns.size(); i < len; i++) {
@@ -152,6 +163,7 @@ public class DeclarePrecedence extends Declare {
 	}
 
 	public int compare(ResolvedType aspect1, ResolvedType aspect2) {
+		ensureResolved();
 		int index1 = matchingIndex(aspect1);
 		int index2 = matchingIndex(aspect2);
 
@@ -0,0 +1,12 @@
+package com;
+
+import org.aspectj.lang.annotation.*;
+
+
+@Aspect
+public class OtherAspect {
+	@Before("execution(* *(..))")
+			public void b() {}
+  //...
+}
+
@@ -0,0 +1,12 @@
+package com;
+
+import org.aspectj.lang.annotation.*;
+
+@DeclarePrecedence("com.ThisAspect, com.OtherAspect")
+@Aspect public class ThisAspect {
+@Before("execution(* *(..))")
+public void b() {}
+  //...
+  public static void main(String[] argv) {}
+}
+
@@ -0,0 +1,7 @@
+<aspectj>
+<aspects>
+<aspect name="com.OtherAspect"/>
+<aspect name="com.ThisAspect"/>
+</aspects>
+</aspectj>
+
@@ -24,6 +24,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testAnnoDecprecedence_pr256779() {
+		runTest("anno decprecedence");
+	}	
+	
 	// 
 	public void testBrokenLVT_pr194314_1() throws Exception {
 		runTest("broken lvt - 1");
@@ -2,6 +2,12 @@
 
 <suite>
 
+    <ajc-test dir="bugs164/pr256779" title="anno decprecedence">
+      <compile files="ThisAspect.java OtherAspect.java" options="-1.5"/>
+      <run class="com.ThisAspect" ltw="aop.xml"/>
+      
+    </ajc-test>
+    
 
     <ajc-test dir="bugs164/pr194314" title="broken lvt - 1">
       <compile files="Service.java IService.java Main.java ServiceInterceptor.java" options="-1.5"/>
@@ -436,8 +436,10 @@ public class BcelObjectType extends AbstractReferenceTypeDelegate {
 			AjAttribute a = (AjAttribute) iter.next();
 			if (a instanceof AjAttribute.DeclareAttribute) {
 				Declare decl = (((AjAttribute.DeclareAttribute) a).getDeclare());
-				if (decl instanceof DeclareErrorOrWarning || decl instanceof DeclarePrecedence) {
+				if (decl instanceof DeclareErrorOrWarning) {
 					decl.resolve(bindingScope);
+				} else if (decl instanceof DeclarePrecedence) {
+					((DeclarePrecedence) decl).setScopeForResolution(bindingScope);
 				}
 			}
 		}
@@ -538,7 +540,6 @@ public class BcelObjectType extends AbstractReferenceTypeDelegate {
 		return wvInfo;
 	}
 
-
 	// -- annotation related
 
 	public ResolvedType[] getAnnotationTypes() {
@@ -561,7 +562,6 @@ public class BcelObjectType extends AbstractReferenceTypeDelegate {
 		return false;
 	}
 
-
 	public boolean isAnnotationWithRuntimeRetention() {
 		return (getRetentionPolicy() == null ? false : getRetentionPolicy().equals("RUNTIME"));
 	}

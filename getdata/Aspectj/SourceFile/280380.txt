@@ -168,7 +168,11 @@ public class AsmElementFormatter {
 
 		} else if (methodDeclaration instanceof InterTypeDeclaration) {
 			InterTypeDeclaration itd = (InterTypeDeclaration) methodDeclaration;
-			String name = itd.getOnType().toString() + "." + new String(itd.getDeclaredSelector());
+			String fqname = itd.getOnType().toString();
+			if (fqname.indexOf(".") != -1) {
+				fqname = fqname.substring(fqname.lastIndexOf(".") + 1);
+			}
+			String name = fqname + "." + new String(itd.getDeclaredSelector());
 			if (methodDeclaration instanceof InterTypeFieldDeclaration) {
 				node.setKind(IProgramElement.Kind.INTER_TYPE_FIELD);
 				node.setName(name);
@@ -143,7 +143,7 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		initialiseProject(p);
 		build(p);
 		// printModel(p);
-		assertEquals(6, getModelFor(p).getRelationshipMap().getEntries().size());
+		assertEquals(4, getModelFor(p).getRelationshipMap().getEntries().size());
 		// Hid:1:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx
 		// Hid:2:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.y
 		// Hid:3:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new
@@ -156,7 +156,36 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		// should not be an error about f.AClass not being found
 		assertNoErrors(p);
 		// printModel(p);
-		assertEquals(6, getModelFor(p).getRelationshipMap().getEntries().size());
+		assertEquals(4, getModelFor(p).getRelationshipMap().getEntries().size());
+		// Hid:1:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx
+		// Hid:2:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.y
+		// Hid:3:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new
+		// Hid:4:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.y (declared on) =pr280380<f{AClass.java[AClass
+		// Hid:5:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new (declared on) =pr280380<f{AClass.java[AClass
+		// Hid:6:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx (declared on) =pr280380<f{AClass.java[AClass
+	}
+
+	public void testIncrementalFqItds_280380_3() throws Exception {
+		String p = "pr280380";
+		initialiseProject(p);
+		build(p);
+		// printModel(p);
+		assertEquals(4, getModelFor(p).getRelationshipMap().getEntries().size());
+		// Hid:1:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx
+		// Hid:2:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.y
+		// Hid:3:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new
+		// Hid:4:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.y (declared on) =pr280380<f{AClass.java[AClass
+		// Hid:5:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new (declared on) =pr280380<f{AClass.java[AClass
+		// Hid:6:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx (declared on) =pr280380<f{AClass.java[AClass
+		printModel(p);
+		assertNotNull(getModelFor(p).getRelationshipMap().get("=pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx"));
+		alter(p, "inc2");
+		build(p);
+		assertNoErrors(p);
+		printModel(p);
+		// On this build the relationship should have changed to include the fully qualified target
+		assertEquals(4, getModelFor(p).getRelationshipMap().getEntries().size());
+		assertNotNull(getModelFor(p).getRelationshipMap().get("=pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx"));
 		// Hid:1:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx
 		// Hid:2:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.y
 		// Hid:3:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new
@@ -0,0 +1,11 @@
+package f;
+
+public class AClass {
+
+	
+	void doNothing() {
+		this.y();
+		xxxx++; 
+	}
+}
+ 
\ No newline at end of file
@@ -0,0 +1,15 @@
+package g;
+
+import f.AClass;
+
+public aspect AnAspect {
+	public int AClass.xxxx;
+	
+	public int AClass.y() {
+		return 0;
+	}
+	
+	AClass.new() {
+		this();
+	}
+}  
@@ -0,0 +1,15 @@
+package g;
+
+import f.AClass;
+
+public aspect AnAspect {
+	public int f.AClass.xxxx;
+	
+	public int AClass.y() {
+		return 0;
+	}
+	
+	AClass.new() {
+		this();
+	}
+}  
@@ -53,6 +53,22 @@ import org.aspectj.util.FileUtil;
  */
 public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementalAjdeInteractionTestbed {
 
+	// public void testIncrementalFqItds_280380() throws Exception {
+	// String p = "pr280380";
+	// initialiseProject(p);
+	// // build(p);
+	// // printModel(p);
+	// alter(p, "inc1");
+	// build(p);
+	// printModel(p);
+	// // Hid:1:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx
+	// // Hid:2:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.y
+	// // Hid:3:(targets=3) =pr280380<f{AClass.java[AClass (aspect declarations) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new
+	// // Hid:4:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.y (declared on) =pr280380<f{AClass.java[AClass
+	// // Hid:5:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.AClass_new (declared on) =pr280380<f{AClass.java[AClass
+	// // Hid:6:(targets=1) =pr280380<g*AnAspect.aj}AnAspect)AClass.xxxx (declared on) =pr280380<f{AClass.java[AClass
+	// }
+
 	public void testIncrementalAnnotationMatched_276399() throws Exception {
 		String p = "pr276399";
 		initialiseProject(p);
@@ -69,6 +85,18 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		assertNull(rels);
 	}
 
+	public void testHandleCountDecA_pr278255() throws Exception {
+		String p = "pr278255";
+		initialiseProject(p);
+		build(p);
+		printModelAndRelationships(p);
+		IRelationshipMap irm = getModelFor(p).getRelationshipMap();
+		List l = irm.get("=pr278255<{A.java}X`declare \\@type");
+		assertNotNull(l);
+		IRelationship ir = (IRelationship) l.get(0);
+		assertNotNull(ir);
+	}
+
 	public void testIncrementalItdDefaultCtor() {
 		String p = "pr275032";
 		initialiseProject(p);

@@ -0,0 +1,19 @@
+package mypackage;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+public abstract class MyAbstractClass implements MyInterface {
+
+	@Retention(RetentionPolicy.RUNTIME)
+	private @interface MyAspectPresent {
+	}
+
+	public MyAbstractClass() {
+		if (!getClass().isAnnotationPresent(MyAspectPresent.class)) {
+			throw new RuntimeException("MyAspect has not been woven into "
+					+ getClass());
+		}
+	}
+
+}
@@ -0,0 +1,7 @@
+package mypackage;
+
+privileged public aspect MyAspect {
+
+	declare @type : MyInterface+ : @MyBaseClass.MyAspectPresent;
+
+}
@@ -0,0 +1,5 @@
+package mypackage;
+
+public abstract class MyBaseClass extends MyAbstractClass {
+
+}
@@ -0,0 +1,5 @@
+package mypackage;
+
+public interface MyInterface {
+
+}
@@ -0,0 +1,7 @@
+package mypackage;
+
+import mypackage.MyBaseClass;
+
+public class MySubclass extends MyBaseClass {
+
+}
@@ -249,6 +249,17 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasntFullBuild();
 	}
 
+//	public void testDeclareAtType_pr149293() {
+//		configureBuildStructureModel(true);
+//		initialiseProject("PR149293_1");
+//		build("PR149293_1");
+//		checkCompileWeaveCount(4,5);
+//		assertNoErrors();
+//		alter("PR149293_1","inc1");
+//		build("PR149293_1");
+//		assertNoErrors();
+//	}
+	
 /*
 	public void testRefactoring_pr148285() {
 		configureBuildStructureModel(true);
@@ -1766,5 +1777,9 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		File projDir = new File(getWorkingDir(),p);
 		return new File(projDir,"bin"+File.separator+filename);
 	}
+
+	private void assertNoErrors() {
+		assertTrue("Should be no errors, but got "+MyTaskListManager.getErrorMessages(),MyTaskListManager.getErrorMessages().size()==0);				
+	}
 
 }
\ No newline at end of file

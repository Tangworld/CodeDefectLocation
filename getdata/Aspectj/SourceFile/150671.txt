@@ -0,0 +1,16 @@
+class C {
+
+	   private volatile int state;
+	   private int test;
+	   
+	   public void foo() {
+	      state = 0;
+	      test = 0;
+	   }
+	
+}
+
+aspect FSM {
+	   declare error: set(* C.state): "Changing state";
+	   declare error: set(* C.test): "test";
+}
@@ -46,6 +46,8 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testCantFindType_pr149322_02() {runTest("can't find type on interface call 2");}
   public void testCantFindType_pr149322_03() {runTest("can't find type on interface call 3");}
 
+  public void testMatchVolatileField_pr150671() {runTest("match volatile field");};
+  
   /////////////////////////////////////////
   public static Test suite() {
     return XMLBasedAjcTestCase.loadSuite(Ajc153Tests.class);
@@ -237,5 +237,12 @@
     		</stdout>
     	</run>
     </ajc-test>    
+  
+    <ajc-test dir="bugs153" title="match volatile field">
+      <compile files="pr150671.aj" options="-Xset:activateLightweightDelegates=false">
+        <message kind="error" line="7" text="Changing state"/>
+        <message kind="error" line="8" text="test"/>
+      </compile>
+    </ajc-test>
 
 </suite>
\ No newline at end of file
@@ -321,7 +321,7 @@ public class ResolvedMemberImpl extends MemberImpl implements IHasPosition, Anno
 	}
 
     public boolean isBridgeMethod() {
-    	return (modifiers & Constants.ACC_BRIDGE)!=0;
+    	return (modifiers & Constants.ACC_BRIDGE)!=0 && getKind().equals(METHOD);
     }
 
     public boolean isVarargsMethod() {

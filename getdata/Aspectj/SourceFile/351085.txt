@@ -493,11 +493,42 @@ public class ProgramElement implements IProgramElement {
 		if (getFullyQualifiedType) {
 			return returnType;
 		}
-		int index = returnType.lastIndexOf(".");
-		if (index != -1) {
-			return returnType.substring(index + 1);
+		return trim(returnType);
+	}
+
+	/**
+	 * Trim down fully qualified types to their short form (e.g. a.b.c.D<e.f.G> becomes D<G>)
+	 */
+	public static String trim(String fqname) {
+		int i = fqname.indexOf("<");
+		if (i == -1) {
+			int lastdot = fqname.lastIndexOf('.');
+			if (lastdot == -1) {
+				return fqname;
+			} else {
+				return fqname.substring(lastdot + 1);
+			}
+		}
+		char[] charArray = fqname.toCharArray();
+		StringBuilder candidate = new StringBuilder(charArray.length);
+		StringBuilder complete = new StringBuilder(charArray.length);
+		for (char c : charArray) {
+			switch (c) {
+			case '.':
+				candidate.setLength(0);
+				break;
+			case '<':
+			case ',':
+			case '>':
+				complete.append(candidate).append(c);
+				candidate.setLength(0);
+				break;
+			default:
+				candidate.append(c);
+			}
 		}
-		return returnType;
+		complete.append(candidate);
+		return complete.toString();
 	}
 
 	public String getName() {
@@ -16,6 +16,7 @@ import junit.framework.Test;
 
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
+import org.aspectj.asm.internal.ProgramElement;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 /**
@@ -35,6 +36,37 @@ public class Ajc1612Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// runTest("itd split compilation");
 	// }
 
+	public void testCorrespondingType_357582() {
+		for (int i = 0; i < 100000; i++) {
+			assertEquals("AAA", convert("AAA"));
+			assertEquals("AAA", convert("a.b.c.AAA"));
+			assertEquals("A", convert("aa.ba.ca.A"));
+			assertEquals("AAA<>", convert("a.b.c.AAA<>"));
+			assertEquals("AAA<A>", convert("a.b.c.AAA<A>"));
+			assertEquals("AAA<A>", convert("a.b.c.AAA<aa.A>"));
+			assertEquals("AAA<A,B>", convert("a.b.c.AAA<aa.A,bb.B>"));
+			assertEquals("AAA<A<B>>", convert("a.b.c.AAA<aa.A<bb.B>>"));
+			assertEquals("AAA<A<B>,AA<GG<KK>>>", convert("a.b.c.AAA<aa.A<bb.B>,a.b.c.AA<GG<KK>>>"));
+		}
+		long time = System.currentTimeMillis();
+		for (int i = 0; i < 1000000; i++) {
+			assertEquals("AAA", convert("AAA"));
+			assertEquals("AAA", convert("a.b.c.AAA"));
+			assertEquals("A", convert("aa.ba.ca.A"));
+			assertEquals("AAA<>", convert("a.b.c.AAA<>"));
+			assertEquals("AAA<A>", convert("a.b.c.AAA<A>"));
+			assertEquals("AAA<A>", convert("a.b.c.AAA<aa.A>"));
+			assertEquals("AAA<A,B>", convert("a.b.c.AAA<aa.A,bb.B>"));
+			assertEquals("AAA<A<B>>", convert("a.b.c.AAA<aa.A<bb.B>>"));
+			assertEquals("AAA<A<B>,AA<GG<KK>>>", convert("a.b.c.AAA<aa.A<bb.B>,a.b.c.AA<GG<KK>>>"));
+		}
+		System.out.println(System.currentTimeMillis() - time);
+	}
+
+	private String convert(String totrim) {
+		return ProgramElement.trim(totrim);
+	}
+
 	public void testPervasivePerthis_354470() throws Exception {
 		runTest("perthis too pervasive");
 	}

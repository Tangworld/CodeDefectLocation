@@ -23,6 +23,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1
+	public void testProtectedMethodsAroundAdvice_pr230075() { runTest("protected methods and around advice");}
 	public void testFinalStringsAnnotationPointcut_pr174385() { runTest("static strings in annotation pointcuts");}
 	public void testComplexBoundsGenericAspect_pr199130_1() { runTest("complex bounds on generic aspect - 1");}
 	public void testComplexBoundsGenericAspect_pr199130_2() { runTest("complex bounds on generic aspect - 2");}
@@ -3,6 +3,11 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
+	<ajc-test dir="bugs161/pr230075" title="protected methods and around advice">
+    	<compile files="A.java B.java C.java X.java" options="-1.5"/>
+    	<run class="a.C"/>
+    </ajc-test>
+    
 	<ajc-test dir="bugs161/pr174385" title="static strings in annotation pointcuts">
     	<compile files="StaticFinalStringInPointcutAspect.java" options="-1.5"/>
     	<run class="bug.StaticFinalStringInPointcutAspect"/>
@@ -3447,9 +3447,10 @@ public class BcelShadow extends Shadow {
         		targetType =  UnresolvedType.forName(getActualTargetType()).resolve(world);
         	}
             ResolvedMember resolvedMember = getSignature().resolve(world);
-            
+
+            // pr230075
             if (resolvedMember != null && Modifier.isProtected(resolvedMember.getModifiers()) && 
-            	!samePackage(targetType.getPackageName(), getEnclosingType().getPackageName()) &&
+            	!samePackage(resolvedMember.getDeclaringType().getPackageName(), getEnclosingType().getPackageName()) &&
 				!resolvedMember.getName().equals("clone"))
             {
             	if (!targetType.resolve(world).isAssignableFrom(getThisType().resolve(world))) {
@@ -0,0 +1,3 @@
+package a.a;
+public class A extends a.B {
+}
@@ -0,0 +1,4 @@
+package a;
+public abstract class B {
+  protected boolean test() { return true; }
+}
@@ -0,0 +1,13 @@
+package a;
+
+import a.a.A;
+public class C {
+  protected A a = new A();
+ public void run() {
+   a.test();
+  }
+
+  public static void main(String []argv) {
+    new C().run();
+  }
+}
@@ -0,0 +1,3 @@
+aspect X {
+  Object around(): call(* test(..)) { return proceed();}
+}

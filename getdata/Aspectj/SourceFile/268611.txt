@@ -1251,6 +1251,9 @@ class BcelClassWeaver implements IClassWeaver {
 					// go through all the declare @field statements
 					for (Iterator iter = decaFs.iterator(); iter.hasNext();) {
 						DeclareAnnotation decaF = (DeclareAnnotation) iter.next();
+						if (decaF.getAnnotationX() == null) {
+							return false;
+						}
 						if (decaF.matches(aBcelField, world)) {
 
 							if (!dontAddTwice(decaF, dontAddMeTwice)) {
@@ -2042,7 +2045,7 @@ class BcelClassWeaver implements IClassWeaver {
 	 * 
 	 * @param donor the method from which we will copy (and adjust frame and jumps) instructions.
 	 * @param recipient the method the instructions will go into. Used to get the frame size so we can allocate new frame locations
-	 *        for locals in donor.
+	 *            for locals in donor.
 	 * @param frameEnv an environment to map from donor frame to recipient frame, initially populated with argument locations.
 	 * @param fact an instruction factory for recipient
 	 */
@@ -0,0 +1,8 @@
+package b;
+
+public aspect Advises {
+
+    declare @type: IsAdvised : @Deprecated;
+    declare @method : IsAdvised.doNothing() : @Deprecated;
+    declare @field : int IsAdvised.x : @Deprecated;
+}
@@ -0,0 +1,8 @@
+package b;
+
+
+public class IsAdvised {
+
+    public void doNothing() {} 
+    int x;
+}
@@ -34,6 +34,7 @@ import org.aspectj.asm.IRelationshipMap;
 import org.aspectj.asm.internal.ProgramElement;
 import org.aspectj.asm.internal.Relationship;
 import org.aspectj.bridge.IMessage;
+import org.aspectj.bridge.Message;
 import org.aspectj.tools.ajc.Ajc;
 import org.aspectj.util.FileUtil;
 
@@ -50,6 +51,16 @@ import org.aspectj.util.FileUtil;
  */
 public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementalAjdeInteractionTestbed {
 
+	public void testBrokenCodeDeca_268611() {
+		String p = "pr268611";
+		initialiseProject(p);
+		build(p);
+		checkWasFullBuild();
+		assertEquals(1, getErrorMessages(p).size());
+		assertTrue(((Message) getErrorMessages(p).get(0)).getMessage().indexOf(
+				"Syntax error on token \")\", \"name pattern\" expected") != -1);
+	}
+
 	public void testIncrementalMixin() {
 		String p = "mixin";
 		initialiseProject(p);
@@ -355,7 +355,7 @@ public class DeclareAnnotation extends Declare {
 	 */
 	public UnresolvedType getAnnotationTypeX() {
 		ensureAnnotationDiscovered();
-		return this.annotation.getType();
+		return (this.annotation == null ? null : this.annotation.getType());
 	}
 
 	/**

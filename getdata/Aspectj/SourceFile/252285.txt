@@ -1743,6 +1743,7 @@ public class BcelTypeMunger extends ConcreteTypeMunger {
 			ResolvedMember bridgingSetter) {
 		InstructionFactory fact;
 		LazyMethodGen bridgeMethod = makeMethodGen(gen, bridgingSetter);
+		bridgeMethod.setAccessFlags(bridgeMethod.getAccessFlags() | 0x00000040); // BRIDGE = 0x00000040
 		Type[] paramTypes = BcelWorld.makeBcelTypes(bridgingSetter.getParameterTypes());
 		Type[] bridgingToParms = BcelWorld.makeBcelTypes(itdfieldSetter.getParameterTypes());
 		Type returnType = BcelWorld.makeBcelType(bridgingSetter.getReturnType());
@@ -1759,8 +1760,6 @@ public class BcelTypeMunger extends ConcreteTypeMunger {
 			body.append(InstructionFactory.createLoad(paramType, pos));
 			if (!bridgingSetter.getParameterTypes()[i].getErasureSignature().equals(
 					itdfieldSetter.getParameterTypes()[i].getErasureSignature())) {
-				// une cast est required
-				System.err.println("Putting in cast from " + paramType + " to " + bridgingToParms[i]);
 				body.append(fact.createCast(paramType, bridgingToParms[i]));
 			}
 			pos += paramType.getSize();
@@ -0,0 +1,31 @@
+import java.lang.reflect.Method;
+import java.util.*;
+
+interface Super<R extends Number> {
+}
+
+aspect X {
+ private T Super<T>.getterA;
+}
+
+
+public class Bridged implements Super<Integer> {
+
+        // Print BRIDGE status of all getter* methods
+        public static void main(String[] argv) {
+                Method[] ms = Bridged.class.getMethods();
+                List results = new ArrayList(); 
+                for (int i = 0; i < ms.length; i++) {
+                        if (ms[i].getName().indexOf("getter")!=-1) {
+                               
+results.add(ms[i].getName()+"()"+ms[i].getReturnType().getName()+ " isBridged?"+((ms[i].getModifiers() & 0x0040) != 0));
+                        }
+                }
+                Collections.sort(results);
+                for (Iterator iterator = results.iterator(); iterator.hasNext();) {
+                        String entry = (String) iterator.next();
+                        System.out.println(entry);
+                }
+        }
+}
+
@@ -30,6 +30,10 @@ public class Ajc163Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("bridge methods for generic itds");
 	}
 
+	public void testGenericFieldBridging_pr252285() {
+		runTest("bridge methods for generic itd fields");
+	}
+
 	public static Test suite() {
 		return XMLBasedAjcTestCase.loadSuite(Ajc163Tests.class);
 	}
@@ -23,5 +23,17 @@
         </stdout>
       </run>
     </ajc-test>
+    
+    <ajc-test dir="bugs163/pr252285" title="bridge methods for generic itd fields">
+      <compile files="Bridged.java" options="-1.5"/>
+      <run class="Bridged">
+        <stdout>
+          <line text="ajc$interFieldGet$X$Super$getterA()java.lang.Integer isBridged?false"/>
+          <line text="ajc$interFieldGet$X$Super$getterA()java.lang.Number isBridged?true"/>
+          <line text="ajc$interFieldSet$X$Super$getterA()void isBridged?false"/>
+          <line text="ajc$interFieldSet$X$Super$getterA()void isBridged?true"/>
+        </stdout>
+      </run>
+    </ajc-test>
 
 </suite>
\ No newline at end of file

@@ -36,16 +36,13 @@ import org.aspectj.weaver.World;
 import org.aspectj.weaver.patterns.PerClause;
 
 /**
- * @author colyer A delegate for a resolved type that uses runtime type
- *         information (java.lang.reflect) to answer questions. This class uses
- *         only Java 1.4 features to answer questions. In a Java 1.5 environment
- *         use the Java5ReflectionBasedReferenceTypeDelegate subtype.
+ * @author colyer A delegate for a resolved type that uses runtime type information (java.lang.reflect) to answer questions. This
+ *         class uses only Java 1.4 features to answer questions. In a Java 1.5 environment use the
+ *         Java5ReflectionBasedReferenceTypeDelegate subtype.
  */
-public class ReflectionBasedReferenceTypeDelegate implements
-		ReferenceTypeDelegate {
+public class ReflectionBasedReferenceTypeDelegate implements ReferenceTypeDelegate {
 
-	private static final ClassLoader BootClassLoader = new URLClassLoader(
-			new URL[0]);// ReflectionBasedReferenceTypeDelegate.class.
+	private static final ClassLoader bootClassLoader = new URLClassLoader(new URL[0]);// ReflectionBasedReferenceTypeDelegate.class.
 	// getClassLoader();
 
 	protected Class myClass = null;
@@ -56,8 +53,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	private ResolvedMember[] methods = null;
 	private ResolvedType[] interfaces = null;
 
-	public ReflectionBasedReferenceTypeDelegate(Class forClass,
-			ClassLoader aClassLoader, World inWorld, ReferenceType resolvedType) {
+	public ReflectionBasedReferenceTypeDelegate(Class forClass, ClassLoader aClassLoader, World inWorld, ReferenceType resolvedType) {
 		initialize(resolvedType, forClass, aClassLoader, inWorld);
 	}
 
@@ -65,13 +61,11 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	public ReflectionBasedReferenceTypeDelegate() {
 	}
 
-	public void initialize(ReferenceType aType, Class aClass,
-			ClassLoader aClassLoader, World aWorld) {
+	public void initialize(ReferenceType aType, Class aClass, ClassLoader aClassLoader, World aWorld) {
 		this.myClass = aClass;
 		this.resolvedType = aType;
 		this.world = aWorld;
-		this.classLoaderReference = new WeakClassLoaderReference(
-				(aClassLoader != null) ? aClassLoader : BootClassLoader);
+		this.classLoaderReference = new WeakClassLoaderReference((aClassLoader != null) ? aClassLoader : bootClassLoader);
 	}
 
 	protected Class getBaseClass() {
@@ -83,20 +77,16 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	}
 
 	public ReferenceType buildGenericType() {
-		throw new UnsupportedOperationException(
-				"Shouldn't be asking for generic type at 1.4 source level or lower");
+		throw new UnsupportedOperationException("Shouldn't be asking for generic type at 1.4 source level or lower");
 	}
 
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see
-	 * org.aspectj.weaver.ReferenceTypeDelegate#addAnnotation(org.aspectj.weaver
-	 * .AnnotationX)
+	 * @see org.aspectj.weaver.ReferenceTypeDelegate#addAnnotation(org.aspectj.weaver .AnnotationX)
 	 */
 	public void addAnnotation(AnnotationAJ annotationX) {
-		throw new UnsupportedOperationException(
-				"Cannot add an annotation to a reflection based delegate");
+		throw new UnsupportedOperationException("Cannot add an annotation to a reflection based delegate");
 	}
 
 	/*
@@ -153,9 +143,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see
-	 * org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationWithRuntimeRetention
-	 * ()
+	 * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationWithRuntimeRetention ()
 	 */
 	public boolean isAnnotationWithRuntimeRetention() {
 		// cant be an annotation in Java 1.4 or prior
@@ -181,8 +169,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	 * @see org.aspectj.weaver.ReferenceTypeDelegate#isClass()
 	 */
 	public boolean isClass() {
-		return !this.myClass.isInterface() && !this.myClass.isPrimitive()
-				&& !this.myClass.isArray();
+		return !this.myClass.isInterface() && !this.myClass.isPrimitive() && !this.myClass.isArray();
 	}
 
 	/*
@@ -228,9 +215,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see
-	 * org.aspectj.weaver.ReferenceTypeDelegate#hasAnnotation(org.aspectj.weaver
-	 * .UnresolvedType)
+	 * @see org.aspectj.weaver.ReferenceTypeDelegate#hasAnnotation(org.aspectj.weaver .UnresolvedType)
 	 */
 	public boolean hasAnnotation(UnresolvedType ofType) {
 		// in Java 1.4 we cant have an annotation
@@ -267,8 +252,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 			Field[] reflectFields = this.myClass.getDeclaredFields();
 			ResolvedMember[] rFields = new ResolvedMember[reflectFields.length];
 			for (int i = 0; i < reflectFields.length; i++) {
-				rFields[i] = ReflectionBasedReferenceTypeDelegateFactory
-						.createResolvedMember(reflectFields[i], world);
+				rFields[i] = ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(reflectFields[i], world);
 			}
 			this.fields = rFields;
 		}
@@ -285,8 +269,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 			Class[] reflectInterfaces = this.myClass.getInterfaces();
 			ResolvedType[] rInterfaces = new ResolvedType[reflectInterfaces.length];
 			for (int i = 0; i < reflectInterfaces.length; i++) {
-				rInterfaces[i] = ReflectionBasedReferenceTypeDelegateFactory
-						.resolveTypeInWorld(reflectInterfaces[i], world);
+				rInterfaces[i] = ReflectionBasedReferenceTypeDelegateFactory.resolveTypeInWorld(reflectInterfaces[i], world);
 			}
 			this.interfaces = rInterfaces;
 		}
@@ -302,15 +285,13 @@ public class ReflectionBasedReferenceTypeDelegate implements
 		if (methods == null) {
 			Method[] reflectMethods = this.myClass.getDeclaredMethods();
 			Constructor[] reflectCons = this.myClass.getDeclaredConstructors();
-			ResolvedMember[] rMethods = new ResolvedMember[reflectMethods.length
-					+ reflectCons.length];
+			ResolvedMember[] rMethods = new ResolvedMember[reflectMethods.length + reflectCons.length];
 			for (int i = 0; i < reflectMethods.length; i++) {
-				rMethods[i] = ReflectionBasedReferenceTypeDelegateFactory
-						.createResolvedMember(reflectMethods[i], world);
+				rMethods[i] = ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(reflectMethods[i], world);
 			}
 			for (int i = 0; i < reflectCons.length; i++) {
-				rMethods[i + reflectMethods.length] = ReflectionBasedReferenceTypeDelegateFactory
-						.createResolvedMember(reflectCons[i], world);
+				rMethods[i + reflectMethods.length] = ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(
+						reflectCons[i], world);
 			}
 			this.methods = rMethods;
 		}
@@ -397,8 +378,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 			}
 			return world.resolve(UnresolvedType.OBJECT);
 		}
-		return ReflectionBasedReferenceTypeDelegateFactory.resolveTypeInWorld(
-				this.myClass.getSuperclass(), world);
+		return ReflectionBasedReferenceTypeDelegateFactory.resolveTypeInWorld(this.myClass.getSuperclass(), world);
 	}
 
 	/*
@@ -422,8 +402,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see
-	 * org.aspectj.weaver.ReferenceTypeDelegate#doesNotExposeShadowMungers()
+	 * @see org.aspectj.weaver.ReferenceTypeDelegate#doesNotExposeShadowMungers()
 	 */
 	public boolean doesNotExposeShadowMungers() {
 		return false;
@@ -432,8 +411,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see
-	 * org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredGenericSignature()
+	 * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredGenericSignature()
 	 */
 	public String getDeclaredGenericSignature() {
 		// no generic sig in 1.4
@@ -445,8 +423,7 @@ public class ReflectionBasedReferenceTypeDelegate implements
 		// inconsistent...
 	}
 
-	public ReflectionBasedResolvedMemberImpl createResolvedMemberFor(
-			Member aMember) {
+	public ReflectionBasedResolvedMemberImpl createResolvedMemberFor(Member aMember) {
 		return null;
 	}
 
@@ -0,0 +1,4 @@
+@Configurable
+public class Annotated {
+	
+}
\ No newline at end of file
@@ -0,0 +1,8 @@
+public aspect AnnotationMatcher {
+	
+	after() returning : initialization(*.new(..)) && @this(Configurable) {
+		System.out.println("annotated type initialized");
+	}
+	
+	
+}
\ No newline at end of file
@@ -0,0 +1,6 @@
+import java.lang.annotation.*;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Configurable {
+	
+}
\ No newline at end of file
@@ -0,0 +1,7 @@
+public class Main {
+	
+	public static void main(String[] args) {
+		new Annotated();
+	}
+	
+}
\ No newline at end of file
@@ -62,7 +62,8 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   }
   public void testMatchVolatileField_pr150671() {runTest("match volatile field");};
   public void testDuplicateJVMTIAgents_pr151938() {runTest("Duplicate JVMTI agents");};
-
+  public void testLTWWorldWithAnnotationMatching_pr153572() { runTest("LTWWorld with annotation matching");}
+  
   /////////////////////////////////////////
   public static Test suite() {
     return XMLBasedAjcTestCase.loadSuite(Ajc153Tests.class);
@@ -291,4 +291,18 @@
       <compile files="EMA.java" options="-1.5"/>
     </ajc-test>
 
+    <ajc-test dir="bugs153/pr153572" title="LTWWorld with annotation matching">
+    	<compile 
+    		files="Configurable.java, AnnotationMatcher.aj" 
+    		options="-1.5"
+    		outjar="aspectlib.jar"
+    		outxmlfile="META-INF/aop.xml"/>
+    	<compile files="Configurable.java,Annotated.java,Main.java" options="-1.5" outjar="myapp.jar"/>
+    	<run class="Main" ltw="">
+    		<stdout>
+    			<line text="annotated type initialized"/>
+    		</stdout>
+    	</run>
+    </ajc-test>
+    
 </suite>
\ No newline at end of file
@@ -59,6 +59,7 @@ import java.io.InputStream;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
 import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -75,11 +76,12 @@ import org.aspectj.apache.bcel.classfile.JavaClass;
  *
  * @see org.aspectj.apache.bcel.Repository
  *
- * @version $Id: ClassLoaderRepository.java,v 1.6 2006/08/08 11:26:28 aclement Exp $
+ * @version $Id: ClassLoaderRepository.java,v 1.7 2006/08/18 14:51:00 acolyer Exp $
  * @author <A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>
  * @author David Dixon-Peugh
  */
 public class ClassLoaderRepository implements Repository {
+  private static java.lang.ClassLoader bootClassLoader = null;
   private java.lang.ClassLoader loader;
   private WeakHashMap /*<String classname,JavaClass>*/loadedClassesLocalCache = new WeakHashMap(); 
   private static Map /*<URL,JavaClass>*/loadedUrlsSharedCache = new HashMap(); 
@@ -99,7 +101,14 @@ public class ClassLoaderRepository implements Repository {
   }
 
   public ClassLoaderRepository( java.lang.ClassLoader loader ) {
-    this.loader = loader;
+    this.loader = (loader != null) ? loader : getBootClassLoader();
+  }
+  
+  private static synchronized java.lang.ClassLoader getBootClassLoader() {
+	  if (bootClassLoader == null) {
+		  bootClassLoader = new URLClassLoader(new URL[0]);
+	  }
+	  return bootClassLoader;
   }
 
   /**
Binary files differ
Binary files differ
@@ -15,6 +15,8 @@ import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.Collection;
 import java.util.Collections;
 
@@ -40,6 +42,8 @@ import org.aspectj.weaver.patterns.PerClause;
  */
 public class ReflectionBasedReferenceTypeDelegate implements ReferenceTypeDelegate {
 
+	private static final ClassLoader BootClassLoader = new URLClassLoader(new URL[0]);
+	
 	protected Class myClass = null;
 	protected ClassLoader classLoader = null;
 	private World world;
@@ -59,7 +63,7 @@ public class ReflectionBasedReferenceTypeDelegate implements ReferenceTypeDelega
 		this.myClass = aClass;
 		this.resolvedType = aType;
 		this.world = aWorld;
-		this.classLoader = aClassLoader;
+		this.classLoader = (aClassLoader != null) ? aClassLoader : BootClassLoader;
 	}
 
 	protected Class getBaseClass() { 
@@ -63,7 +63,7 @@ public class Java15ReflectionBasedReferenceTypeDelegate extends
 		myType = AjTypeSystem.getAjType(aClass);
 		annotationFinder = new Java15AnnotationFinder();
 		argNameFinder = annotationFinder;
-		annotationFinder.setClassLoader(classLoader);
+		annotationFinder.setClassLoader(this.classLoader);
 		this.typeConverter = new JavaLangTypeToResolvedTypeConverter(aWorld);
 	}
 

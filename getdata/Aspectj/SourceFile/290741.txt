@@ -167,4 +167,8 @@ public class TestCompilerConfiguration implements ICompilerConfiguration {
 		return null;
 	}
 
+	public String getProjectEncoding() {
+		return null;
+	}
+
 }
@@ -35,9 +35,9 @@ import org.aspectj.ajde.core.JavaOptions;
 import org.aspectj.bridge.AbortException;
 import org.aspectj.bridge.ICommand;
 import org.aspectj.bridge.IMessage;
+import org.aspectj.bridge.IMessage.Kind;
 import org.aspectj.bridge.IMessageHandler;
 import org.aspectj.bridge.MessageHandler;
-import org.aspectj.bridge.IMessage.Kind;
 import org.aspectj.testing.harness.bridge.Globals;
 import org.aspectj.util.FileUtil;
 
@@ -366,6 +366,10 @@ class MyCompilerConfig implements ICompilerConfiguration {
 		return null;
 	}
 
+	public String getProjectEncoding() {
+		return null;
+	}
+
 }
 
 class MyOutputLocationManager implements IOutputLocationManager {
@@ -389,12 +393,11 @@ class MyOutputLocationManager implements IOutputLocationManager {
 	public String getUniqueIdentifier() {
 		return null;
 	}
-	
+
 	public Map getInpathMap() {
 		return Collections.EMPTY_MAP;
 	}
 
-
 	public String getSourceFolderForFile(File sourceFile) {
 		return null;
 	}
@@ -410,4 +413,8 @@ class MyOutputLocationManager implements IOutputLocationManager {
 		return 0;
 	}
 
+	public String getProjectEncoding() {
+		return null;
+	}
+
 }
@@ -0,0 +1,34 @@
+package demo;
+
+import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.Charset;
+
+/**
+ * @author oliver
+ * @since 18.11.2005
+ */
+public class Converter {
+	
+	/**
+	 * You may get problems using String.getBytes("UTF-8") on a non UTF-8
+	 * environment. Here is an alternative for it from
+	 * http://mindprod.com/jgloss/encoding.html.
+	 * 
+	 * @param text
+	 * @return
+	 * @throws UnsupportedEncodingException
+	 */
+	public static byte[] utf8encode(String text) throws UnsupportedEncodingException {
+		//return text.getBytes("UTF-8");
+		Charset cs = Charset.forName("UTF8");
+		CharBuffer ss = CharBuffer.wrap(text);
+		ByteBuffer bb = cs.encode(ss);
+		int limit = bb.limit();  // how many chars in buffer
+		byte[] b = new byte[ limit ];
+		bb.get( b, 0 /* offset */, limit );
+		return b;
+	}
+	
+}
@@ -0,0 +1,44 @@
+package demo;
+
+import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+
+public class ConverterTest {
+	
+	/**
+	 * For signature we need an UTF-8 environment - don't ask my why.
+	 * 
+	 * @since 29-Jun-06
+	 * @see http://mindprod.com/jgloss/encoding.html
+	 */
+/*
+		String encoding = System.getProperty("file.encoding");
+		String outEncoding = new OutputStreamWriter(System.out).getEncoding();
+		System.out.println("file.encoding=" + encoding + " # system property");
+		System.out.println("System.out encoding = " + outEncoding);
+	}
+*/
+	
+	public static void run() throws Exception {
+	/**
+	 * Do we really get the right bytes here if the encoding is wrong?
+	 * @throws UnsupportedEncodingException 
+	 */
+		//String name = "B\u00f6hm";	// this works
+		String name = "BÃ¶hm";
+		System.out.println("Hello, my name is Mr. " + name);
+		byte[] bytes = Converter.utf8encode(name);
+		assertEquals(66, bytes[0]);
+		assertEquals(-61, bytes[1]);
+		assertEquals(-74, bytes[2]);
+		assertEquals(104, bytes[3]);
+		assertEquals(109, bytes[4]);
+	}
+
+	public static void assertEquals(int i, int b) throws Exception {
+          if (i!=b) {
+throw new RuntimeException("different");
+ }
+        }
+
+}
@@ -690,4 +690,8 @@ public class AjBuildConfig implements CompilerConfigurationChangeFlags {
 	public List<String> getClasspathElementsWithModifiedContents() {
 		return this.cpElementsWithModifiedContents;
 	}
+
+	public void setProjectEncoding(String projectEncoding) {
+		options.defaultEncoding = projectEncoding;
+	}
 }
@@ -66,6 +66,11 @@ public class AjdeInteractionTestbed extends TestCase {
 		((MultiProjTestCompilerConfiguration) compiler.getCompilerConfiguration()).changed = flags;
 	}
 
+	public void setProjectEncoding(String projName, String encoding) {
+		AjCompiler compiler = CompilerFactory.getCompilerForProjectWithDir(sandboxDir + File.separator + projName);
+		((MultiProjTestCompilerConfiguration) compiler.getCompilerConfiguration()).setProjectEncoding(encoding);
+	}
+
 	public void addProjectSourceFileChanged(String projectName, File changedFile) {
 		AjCompiler compiler = CompilerFactory.getCompilerForProjectWithDir(sandboxDir + File.separator + projectName);
 		((MultiProjTestCompilerConfiguration) compiler.getCompilerConfiguration()).addProjectSourceFileChanged(changedFile);
@@ -36,6 +36,7 @@ public class MultiProjTestCompilerConfiguration implements ICompilerConfiguratio
 	private List dependants;
 	private Map javaOptionsMap;
 	private Set inpath;
+	private String encoding = null;
 	private String outjar;
 	private String nonstandardoptions;
 	private List modifiedFiles;
@@ -231,4 +232,12 @@ public class MultiProjTestCompilerConfiguration implements ICompilerConfiguratio
 		return modifiedDirs;
 	}
 
+	public void setProjectEncoding(String encoding) {
+		this.encoding = encoding;
+	}
+
+	public String getProjectEncoding() {
+		return this.encoding;
+	}
+
 }
@@ -14,6 +14,8 @@ package org.aspectj.systemtest.incremental.tools;
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -65,6 +67,23 @@ import org.aspectj.weaver.World;
  */
 public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementalAjdeInteractionTestbed {
 
+	public void testEncoding_pr290741() throws Exception {
+		String p = "pr290741";
+		initialiseProject(p);
+		setProjectEncoding(p, "UTF-8");
+		build(p);
+		checkWasFullBuild();
+		assertNoErrors(p);
+		runMethod(p, "demo.ConverterTest", "run");
+	}
+
+	private void runMethod(String projectName, String classname, String methodname) throws Exception {
+		File f = getProjectOutputRelativePath(projectName, "");
+		ClassLoader cl = new URLClassLoader(new URL[] { f.toURI().toURL() });
+		Class<?> clazz = Class.forName(classname, false, cl);
+		clazz.getDeclaredMethod(methodname).invoke(null);
+	}
+
 	public void testIncrementalITDInners4() throws Exception {
 		String p = "prInner4";
 		initialiseProject(p);
@@ -1286,28 +1305,28 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		// incomplete
 	}
 
-//	private void checkIfContainsFile(Set s, String filename, boolean shouldBeFound) {
-//		StringBuffer sb = new StringBuffer("Set of files\n");
-//		for (Iterator iterator = s.iterator(); iterator.hasNext();) {
-//			Object object = iterator.next();
-//			sb.append(object).append("\n");
-//		}
-//		for (Iterator iterator = s.iterator(); iterator.hasNext();) {
-//			File fname = (File) iterator.next();
-//			if (fname.getName().endsWith(filename)) {
-//				if (!shouldBeFound) {
-//					System.out.println(sb.toString());
-//					fail("Unexpectedly found file " + filename);
-//				} else {
-//					return;
-//				}
-//			}
-//		}
-//		if (shouldBeFound) {
-//			System.out.println(sb.toString());
-//			fail("Did not find filename " + filename);
-//		}
-//	}
+	// private void checkIfContainsFile(Set s, String filename, boolean shouldBeFound) {
+	// StringBuffer sb = new StringBuffer("Set of files\n");
+	// for (Iterator iterator = s.iterator(); iterator.hasNext();) {
+	// Object object = iterator.next();
+	// sb.append(object).append("\n");
+	// }
+	// for (Iterator iterator = s.iterator(); iterator.hasNext();) {
+	// File fname = (File) iterator.next();
+	// if (fname.getName().endsWith(filename)) {
+	// if (!shouldBeFound) {
+	// System.out.println(sb.toString());
+	// fail("Unexpectedly found file " + filename);
+	// } else {
+	// return;
+	// }
+	// }
+	// }
+	// if (shouldBeFound) {
+	// System.out.println(sb.toString());
+	// fail("Did not find filename " + filename);
+	// }
+	// }
 
 	// /**
 	// * Checking return values of the AsmManager API calls that can be invoked
@@ -1472,7 +1491,7 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		if (whereToLook.getSourceLocation() != null && whereToLook.getSourceLocation().getLine() == line) {
 			return whereToLook;
 		}
-		for (IProgramElement object: whereToLook.getChildren()) {
+		for (IProgramElement object : whereToLook.getChildren()) {
 			if (object.getSourceLocation() != null && object.getSourceLocation().getLine() == line) {
 				return object;
 			}
@@ -1510,7 +1529,7 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		}
 		// dumptree(AsmManager.getDefault().getHierarchy().getRoot(), 0);
 	}
- 
+
 	// Now the source folders are more complex 'src/java/main' and
 	// 'src/java/tests'
 	public void testModelWithMultipleSourceFolders2() {
@@ -2006,35 +2025,35 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		// speedCheck(w);
 	}
 
-//	private void checkRtJar(World w) {
-//		System.out.println("Processing everything in rt.jar: ~16000 classes");
-//		try {
-//			ZipFile zf = new ZipFile("c:/jvms/jdk1.6.0_06/jre/lib/rt.jar");
-//			Enumeration e = zf.entries();
-//			int count = 1;
-//			while (e.hasMoreElements()) {
-//				ZipEntry ze = (ZipEntry) e.nextElement();
-//				String n = ze.getName();
-//				if (n.endsWith(".class")) {
-//					n = n.replace('/', '.');
-//					n = n.substring(0, n.length() - 6);
-//					if ((count % 100) == 0) {
-//						System.out.print(count + " ");
-//					}
-//					if ((count % 1000) == 0) {
-//						System.out.println();
-//					}
-//					checkType(w, n);
-//					count++;
-//				}
-//			}
-//			zf.close();
-//		} catch (IOException t) {
-//			t.printStackTrace();
-//			fail(t.toString());
-//		}
-//		System.out.println();
-//	}
+	// private void checkRtJar(World w) {
+	// System.out.println("Processing everything in rt.jar: ~16000 classes");
+	// try {
+	// ZipFile zf = new ZipFile("c:/jvms/jdk1.6.0_06/jre/lib/rt.jar");
+	// Enumeration e = zf.entries();
+	// int count = 1;
+	// while (e.hasMoreElements()) {
+	// ZipEntry ze = (ZipEntry) e.nextElement();
+	// String n = ze.getName();
+	// if (n.endsWith(".class")) {
+	// n = n.replace('/', '.');
+	// n = n.substring(0, n.length() - 6);
+	// if ((count % 100) == 0) {
+	// System.out.print(count + " ");
+	// }
+	// if ((count % 1000) == 0) {
+	// System.out.println();
+	// }
+	// checkType(w, n);
+	// count++;
+	// }
+	// }
+	// zf.close();
+	// } catch (IOException t) {
+	// t.printStackTrace();
+	// fail(t.toString());
+	// }
+	// System.out.println();
+	// }
 
 	/**
 	 * Compare time taken to grab them all and look at them and iterator through them all.
@@ -3826,7 +3845,7 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		List<String> relatedElements = getRelatedElements(model, programElement);
 		StringBuffer debugString = new StringBuffer();
 		if (relatedElements != null) {
-			for (String element: relatedElements) {
+			for (String element : relatedElements) {
 				debugString.append(model.getHierarchy().findElementForHandle(element).toLabelString()).append("\n");
 			}
 		}
@@ -3950,7 +3969,7 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		return new File(projDir, filename);
 	}
 
-	private File getProjectOutputRelativePath(String p, String filename) {
+	protected File getProjectOutputRelativePath(String p, String filename) {
 		File projDir = new File(getWorkingDir(), p);
 		return new File(projDir, "bin" + File.separator + filename);
 	}
@@ -122,10 +122,16 @@ public interface ICompilerConfiguration extends CompilerConfigurationChangeFlags
 	 *         classpath element will be checked)
 	 */
 	public List getClasspathElementsWithModifiedContents();
+
 	//
 	// /**
 	// * @return the location where the state can be persisted across eclipse restarts. eg. f:/foo/bar/goo
 	// */
 	// public String getLocationForPersistingProjectState();
 
+	/**
+	 * Return the encoding to use for this project. Return null if the platform default should be used. Example return value "UTF-8"
+	 */
+	public String getProjectEncoding();
+
 }
@@ -329,6 +329,8 @@ public class AjdeCoreBuildManager {
 		config.setIncrementalMode(true);
 		// always force proceedOnError in AJDE
 		config.setProceedOnError(true);
+
+		config.setProjectEncoding(compilerConfig.getProjectEncoding());
 		return config;
 	}
 
@@ -170,4 +170,8 @@ public class TestCompilerConfiguration implements ICompilerConfiguration {
 		return null;
 	}
 
+	public String getProjectEncoding() {
+		return null;
+	}
+
 }
@@ -111,4 +111,9 @@ public class BrowserCompilerConfiguration implements ICompilerConfiguration {
 	public List getProjectXmlConfigFiles() {
 		return Collections.EMPTY_LIST;
 	}
+
+	public String getProjectEncoding() {
+		return null;
+	}
+
 }

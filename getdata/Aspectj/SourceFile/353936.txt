@@ -12,9 +12,6 @@ package org.aspectj.systemtest.ajc164;
 
 import java.io.File;
 import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 
@@ -24,8 +21,6 @@ import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.LocalVariable;
 import org.aspectj.apache.bcel.classfile.LocalVariableTable;
 import org.aspectj.apache.bcel.classfile.Method;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.asm.AsmManager;
 import org.aspectj.asm.IHierarchy;
 import org.aspectj.asm.IProgramElement;
@@ -241,7 +236,7 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("anno decprecedence");
 	}
 
-	// 
+	//
 	public void testBrokenLVT_pr194314_1() throws Exception {
 		runTest("broken lvt - 1");
 		Method m = getMethodFromClass(getClassFrom(ajc.getSandboxDirectory(), "Service"), "method_aroundBody1$advice");
@@ -280,8 +275,8 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		assertEquals("J l(1) start=0 len=68", stringify(m.getLocalVariableTable(), 1));
 		assertEquals("Lorg/aspectj/lang/JoinPoint; thisJoinPoint(3) start=0 len=68", stringify(m.getLocalVariableTable(), 2));
 		assertEquals("LServiceInterceptorCodeStyle; ajc$aspectInstance(4) start=0 len=68", stringify(m.getLocalVariableTable(), 3));
-		assertEquals("Lorg/aspectj/runtime/internal/AroundClosure; ajc$aroundClosure(5) start=0 len=68", stringify(m
-				.getLocalVariableTable(), 4));
+		assertEquals("Lorg/aspectj/runtime/internal/AroundClosure; ajc$aroundClosure(5) start=0 len=68",
+				stringify(m.getLocalVariableTable(), 4));
 		assertEquals("Lorg/aspectj/lang/JoinPoint; thisJoinPoint(6) start=0 len=68", stringify(m.getLocalVariableTable(), 5));
 		assertEquals("[Ljava/lang/Object; args(7) start=9 len=59", stringify(m.getLocalVariableTable(), 6));
 		assertEquals("J id(8) start=21 len=47", stringify(m.getLocalVariableTable(), 7));
@@ -346,7 +341,7 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// Single piece of advice on before execution of a method with a this and a
 	// parameter
-	public void testDebuggingBeforeAdvice_pr262509() {
+	public void testDebuggingBeforeAdvice_pr262509() throws Exception {
 		runTest("debugging before advice");
 		Method method = getMethodFromClass(getClassFrom(ajc.getSandboxDirectory(), "Foo"), "foo");
 		assertEquals("LFoo; this(0) start=0 len=13", stringify(method.getLocalVariableTable(), 0));
@@ -355,7 +350,7 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// Single piece of advice on before execution of a method with a this and a
 	// parameter and other various locals within it
-	public void testDebuggingBeforeAdvice_pr262509_2() {
+	public void testDebuggingBeforeAdvice_pr262509_2() throws Exception {
 		// Compile with -preserveAllLocals
 		runTest("debugging before advice - 2");
 		Method method = getMethodFromClass(getClassFrom(ajc.getSandboxDirectory(), "Foo2"), "foo");
@@ -368,37 +363,9 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		assertEquals("Ljava/lang/String; s2(3) start=18 len=10", stringify(l, 3));
 	}
 
-	/**
-	 * Sort it by name then start position
-	 */
-	private List sortedLocalVariables(LocalVariableTable lvt) {
-		List l = new ArrayList();
-		StringBuffer sb = new StringBuffer();
-		LocalVariable lv[] = lvt.getLocalVariableTable();
-		for (int i = 0; i < lv.length; i++) {
-			LocalVariable lvEntry = lv[i];
-			l.add(lvEntry);
-		}
-		Collections.sort(l, new MyComparator());
-		return l;
-	}
-
-	private static class MyComparator implements Comparator {
-		public int compare(Object o1, Object o2) {
-			LocalVariable l1 = (LocalVariable) o1;
-			LocalVariable l2 = (LocalVariable) o2;
-			if (l1.getName().equals(l2.getName())) {
-				return l1.getStartPC() - l2.getStartPC();
-			} else {
-				return l1.getName().compareTo(l2.getName());
-			}
-		}
-
-	}
-
 	// Two pieces of advice on before execution of a method with a this and a
 	// parameter and another local within it
-	public void testDebuggingBeforeAdvice_pr262509_3() {
+	public void testDebuggingBeforeAdvice_pr262509_3() throws Exception {
 		// Compile with -preserveAllLocals
 		runTest("debugging before advice - 3");
 		Method method = getMethodFromClass(getClassFrom(ajc.getSandboxDirectory(), "Foo3"), "foo");
@@ -451,20 +418,6 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		return new File("../tests/src/org/aspectj/systemtest/ajc164/ajc164.xml");
 	}
 
-	private SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	private JavaClass getClassFrom(File where, String clazzname) {
-		try {
-			SyntheticRepository repos = createRepos(where);
-			return repos.loadClass(clazzname);
-		} catch (ClassNotFoundException cnfe) {
-			throw new RuntimeException("Failed to find class " + clazzname + " at " + where.toString());
-		}
-	}
-
 	private Method getMethodFromClass(JavaClass clazz, String methodName) {
 		Method[] meths = clazz.getMethods();
 		for (int i = 0; i < meths.length; i++) {
@@ -476,36 +429,6 @@ public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		return null;
 	}
 
-	private String stringify(LocalVariableTable lvt, int slotIndex) {
-		LocalVariable lv[] = lvt.getLocalVariableTable();
-		LocalVariable lvEntry = lv[slotIndex];
-		StringBuffer sb = new StringBuffer();
-		sb.append(lvEntry.getSignature()).append(" ").append(lvEntry.getName()).append("(").append(lvEntry.getIndex()).append(
-				") start=").append(lvEntry.getStartPC()).append(" len=").append(lvEntry.getLength());
-		return sb.toString();
-	}
-
-	private String stringify(List l, int slotIndex) {
-		LocalVariable lvEntry = (LocalVariable) l.get(slotIndex);
-		StringBuffer sb = new StringBuffer();
-		sb.append(lvEntry.getSignature()).append(" ").append(lvEntry.getName()).append("(").append(lvEntry.getIndex()).append(
-				") start=").append(lvEntry.getStartPC()).append(" len=").append(lvEntry.getLength());
-		return sb.toString();
-	}
-
-	private String stringify(LocalVariableTable lvt) {
-		StringBuffer sb = new StringBuffer();
-		sb.append("LocalVariableTable.  Entries=#" + lvt.getTableLength()).append("\n");
-		LocalVariable lv[] = lvt.getLocalVariableTable();
-		for (int i = 0; i < lv.length; i++) {
-			LocalVariable lvEntry = lv[i];
-			sb.append(lvEntry.getSignature()).append(" ").append(lvEntry.getName()).append("(").append(lvEntry.getIndex()).append(
-					") start=").append(lvEntry.getStartPC()).append(" len=").append(lvEntry.getLength()).append("\n");
-		}
-
-		return sb.toString();
-	}
-
 	private IProgramElement findElementAtLine(IProgramElement whereToLook, int line) {
 		if (whereToLook == null) {
 			return null;
@@ -13,9 +13,6 @@ import java.io.PrintWriter;
 
 import junit.framework.Test;
 
-import org.aspectj.apache.bcel.classfile.JavaClass;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.asm.AsmManager;
 import org.aspectj.asm.IRelationshipMap;
 import org.aspectj.testing.XMLBasedAjcTestCase;
@@ -205,16 +202,6 @@ public class IntertypeTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// }
 	// --
 
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
 	public static Test suite() {
 		return XMLBasedAjcTestCase.loadSuite(IntertypeTests.class);
 	}
@@ -19,8 +19,6 @@ import org.aspectj.apache.bcel.classfile.Field;
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
 import org.aspectj.apache.bcel.classfile.annotation.AnnotationGen;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 /**
@@ -234,16 +232,6 @@ public class TransparentWeavingTests extends org.aspectj.testing.XMLBasedAjcTest
 
 	// --
 
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
 	public static Test suite() {
 		return XMLBasedAjcTestCase.loadSuite(TransparentWeavingTests.class);
 	}
@@ -21,8 +21,6 @@ import org.aspectj.apache.bcel.classfile.LineNumber;
 import org.aspectj.apache.bcel.classfile.LineNumberTable;
 import org.aspectj.apache.bcel.classfile.Method;
 import org.aspectj.apache.bcel.generic.MethodGen;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 import org.aspectj.weaver.tools.ContextBasedMatcher;
 import org.aspectj.weaver.tools.FuzzyBoolean;
@@ -359,16 +357,6 @@ public class Ajc154Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		return new File("../tests/src/org/aspectj/systemtest/ajc154/ajc154.xml");
 	}
 
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
 	// ---
 	private class BeanDesignatorHandler implements PointcutDesignatorHandler {
 
@@ -18,8 +18,6 @@ import org.aspectj.apache.bcel.classfile.Attribute;
 import org.aspectj.apache.bcel.classfile.Code;
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 /*
@@ -153,17 +151,6 @@ public class SanityTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// }
 
 	// ///////////////////////////////////////
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
-	// ///////////////////////////////////////
 	public static Test suite() {
 		return XMLBasedAjcTestCase.loadSuite(SanityTests.class);
 	}
@@ -16,8 +16,6 @@ import junit.framework.Test;
 
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class NewFeatures extends org.aspectj.testing.XMLBasedAjcTestCase {
@@ -146,16 +144,6 @@ public class NewFeatures extends org.aspectj.testing.XMLBasedAjcTestCase {
 		return getClassFrom(ajc.getSandboxDirectory(), className);
 	}
 
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
 	protected File getSpecFile() {
 		return new File("../tests/src/org/aspectj/systemtest/ajc1610/newfeatures-tests.xml");
 	}
@@ -20,8 +20,6 @@ import junit.framework.Test;
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
 import org.aspectj.apache.bcel.classfile.Signature;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.asm.AsmManager;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 import org.aspectj.util.LangUtil;
@@ -366,8 +364,8 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 			if (f)
 				System.err.println("Line number table for " + method.getName() + method.getSignature() + " = "
 						+ method.getLineNumberTable());
-			assertTrue("Didn't find a line number table for method " + method.getName() + method.getSignature(), method
-					.getLineNumberTable() != null);
+			assertTrue("Didn't find a line number table for method " + method.getName() + method.getSignature(),
+					method.getLineNumberTable() != null);
 		}
 
 		// This test would determine the info isn't there if you pass -g:none ...
@@ -1029,16 +1027,4 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("override protected pointcut in aop.xml concrete aspect");
 	}
 
-	// helper methods.....
-
-	public SyntheticRepository createRepos(File cpentry) {
-		ClassPath cp = new ClassPath(cpentry + File.pathSeparator + System.getProperty("java.class.path"));
-		return SyntheticRepository.getInstance(cp);
-	}
-
-	protected JavaClass getClassFrom(File where, String clazzname) throws ClassNotFoundException {
-		SyntheticRepository repos = createRepos(where);
-		return repos.loadClass(clazzname);
-	}
-
 }
\ No newline at end of file
@@ -16,8 +16,6 @@ import junit.framework.Test;
 
 import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.Method;
-import org.aspectj.apache.bcel.util.ClassPath;
-import org.aspectj.apache.bcel.util.SyntheticRepository;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Annotations extends XMLBasedAjcTestCase {
@@ -169,14 +167,5 @@ public class Annotations extends XMLBasedAjcTestCase {
   }
 
   // helper methods.....
-  
-  public SyntheticRepository createRepos(File cpentry) {
-	ClassPath cp = new ClassPath(cpentry+File.pathSeparator+System.getProperty("java.class.path"));
-	return SyntheticRepository.getInstance(cp);
-  }
-  
-  protected JavaClass getClassFrom(File where,String clazzname) throws ClassNotFoundException {
-	SyntheticRepository repos = createRepos(where);
-	return repos.loadClass(clazzname);
-  }
+
 }
\ No newline at end of file
@@ -14,6 +14,8 @@ import java.io.File;
 
 import junit.framework.Test;
 
+import org.aspectj.apache.bcel.classfile.JavaClass;
+import org.aspectj.apache.bcel.classfile.Method;
 import org.aspectj.testing.XMLBasedAjcTestCase;
 
 /**
@@ -25,6 +27,27 @@ public class Ajc1612Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// runTest("anno copying");
 	// }
 
+	public void testRangeForLocalVariables_353936() throws ClassNotFoundException {
+		runTest("local variable tables");
+		JavaClass jc = getClassFrom(ajc.getSandboxDirectory(), "X");
+		Method[] meths = jc.getMethods();
+		boolean checked = false;
+		for (int i = 0; i < meths.length; i++) {
+			Method method = meths[i];
+			if (method.getName().equals("ajc$before$X$2$3444dde4")) {
+				System.out.println(method.getName());
+				System.out.println(stringify(method.getLocalVariableTable()));
+				System.out.println(method.getCode().getLength());
+				checked = true;
+				assertEquals("LX; this(0) start=0 len=48", stringify(method.getLocalVariableTable(), 0));
+				assertEquals("Lorg/aspectj/lang/JoinPoint; thisJoinPoint(1) start=0 len=48",
+						stringify(method.getLocalVariableTable(), 1));
+				assertEquals("I i(2) start=8 len=22", stringify(method.getLocalVariableTable(), 2));
+			}
+		}
+		assertTrue(checked);
+	}
+
 	public void testEmptyPattern_pr352363() {
 		runTest("empty pattern");
 	}
@@ -2,6 +2,10 @@
 
 <suite>
 
+<ajc-test dir="bugs1612/pr353936" title="local variable tables">
+<compile files="Code.java" options="-1.5"/>
+</ajc-test>
+
 <ajc-test dir="bugs1612/pr352363" title="empty pattern">
 <compile files="Code.java" options="-1.5">
   <message line="12" kind="warning" text="name is empty1"/>
@@ -1,4 +1,4 @@
-  public static void b()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:340
+  public static void b()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:324
 :
                     LDC C
                     DUP
@@ -1,4 +1,4 @@
-  public static void bbb()    org.aspectj.weaver.MethodDeclarationLineNumber: 15:316
+  public static void bbb()    org.aspectj.weaver.MethodDeclarationLineNumber: 15:302
 :
                     GETSTATIC C.class$1 Ljava/lang/Class;
                     DUP
@@ -1,6 +1,6 @@
-  public void m()    org.aspectj.weaver.MethodDeclarationLineNumber: 16:496
+  public void m()    org.aspectj.weaver.MethodDeclarationLineNumber: 16:481
 :
-                    ALOAD_0
+                    ALOAD_0     // LC; this
                     DUP
                     ASTORE_1
                     MONITORENTER
@@ -1,7 +1,7 @@
-  public void m2()    org.aspectj.weaver.MethodDeclarationLineNumber: 20:571
+  public void m2()    org.aspectj.weaver.MethodDeclarationLineNumber: 20:552
 :
     catch java.lang.Throwable -> E2
-    |               ALOAD_0
+    |               ALOAD_0     // LC; this
     |               DUP
     |               ASTORE_1
     |               MONITORENTER
@@ -1,6 +1,6 @@
-  public void m3()    org.aspectj.weaver.MethodDeclarationLineNumber: 20:747
+  public void m3()    org.aspectj.weaver.MethodDeclarationLineNumber: 20:728
 :
-                    ALOAD_0
+                    ALOAD_0     // LC; this
                     DUP
                     ASTORE_1
                     MONITORENTER
@@ -1,7 +1,7 @@
-  public void m32()    org.aspectj.weaver.MethodDeclarationLineNumber: 24:823
+  public void m32()    org.aspectj.weaver.MethodDeclarationLineNumber: 24:800
 :
     catch java.lang.Throwable -> E2
-    |               ALOAD_0
+    |               ALOAD_0     // LC; this
     |               DUP
     |               ASTORE_1
     |               MONITORENTER
@@ -1,4 +1,4 @@
-  public void m33()    org.aspectj.weaver.MethodDeclarationLineNumber: 29:917
+  public void m33()    org.aspectj.weaver.MethodDeclarationLineNumber: 29:889
 :
                     ALOAD_0     // LC; this   (line 30)
                     DUP
@@ -1,4 +1,4 @@
-  public void m34()    org.aspectj.weaver.MethodDeclarationLineNumber: 35:1018
+  public void m34()    org.aspectj.weaver.MethodDeclarationLineNumber: 35:984
 :
     catch java.lang.Throwable -> E1
     |               ALOAD_0     // LC; this   (line 36)
@@ -1,4 +1,4 @@
-  public void ma()    org.aspectj.weaver.MethodDeclarationLineNumber: 14:307
+  public void ma()    org.aspectj.weaver.MethodDeclarationLineNumber: 14:294
 :
                     INVOKESTATIC Two.aspectOf ()LTwo;   (line 15)
                     INVOKEVIRTUAL Two.ajc$before$Two$1$8d8821ee ()V
@@ -1,6 +1,6 @@
   public void b()    org.aspectj.weaver.MethodDeclarationLineNumber: 13:247
 :
-                    ALOAD_0
+                    ALOAD_0     // LOne; this
                     DUP
                     ASTORE_1
                     MONITORENTER
@@ -1,6 +1,6 @@
   public void c()    org.aspectj.weaver.MethodDeclarationLineNumber: 18:351
 :
-                    ALOAD_0
+                    ALOAD_0     // LOne; this
                     DUP
                     ASTORE_2
                     MONITORENTER
@@ -1,6 +1,6 @@
   public void e()    org.aspectj.weaver.MethodDeclarationLineNumber: 28:584
 :
-                    ALOAD_0
+                    ALOAD_0     // LOne; this
                     DUP
                     ASTORE_2
                     MONITORENTER
@@ -1251,6 +1251,24 @@ public final class LazyMethodGen implements Traceable {
 		// bcel before with duplicate local variables. Now that we're patching
 		// bcel we should be able to do without it if we're paranoid enough
 		// through the rest of the compiler.
+		InstructionHandle methodStart = gen.getInstructionList().getStart();
+		InstructionHandle methodEnd = gen.getInstructionList().getEnd();
+
+		// Determine how many 'slots' are used by parameters to the method.
+		// Then below we can determine if a local variable is a parameter variable, if it is
+		// we force its range to from the method start (as it may have been shuffled down
+		// due to insertion of advice like cflow entry)
+		int paramSlots = gen.isStatic() ? 0 : 1;
+		Type[] argTypes = gen.getArgumentTypes();
+		if (argTypes!=null) {
+			for (int i = 0; i < argTypes.length; i++) {
+				if (argTypes[i].getSize() == 2) {
+					paramSlots += 2;
+				} else {
+					paramSlots += 1;
+				}
+			}
+		}
 
 		Map<InstructionHandle, Set<Integer>> duplicatedLocalMap = new HashMap<InstructionHandle, Set<Integer>>();
 		for (LocalVariableTag tag : localVariables.keySet()) {
@@ -1258,7 +1276,8 @@ public final class LazyMethodGen implements Traceable {
 			// location?
 			// if so, just continue.
 			LVPosition lvpos = localVariables.get(tag);
-			InstructionHandle start = lvpos.start;
+			InstructionHandle start = (tag.getSlot() < paramSlots ? methodStart : lvpos.start);
+			InstructionHandle end = (tag.getSlot() < paramSlots ? methodEnd : lvpos.end);
 			Set<Integer> slots = duplicatedLocalMap.get(start);
 			if (slots == null) {
 				slots = new HashSet<Integer>();
@@ -1272,7 +1291,7 @@ public final class LazyMethodGen implements Traceable {
 			if (t == null) {
 				t = BcelWorld.makeBcelType(UnresolvedType.forSignature(tag.getType()));
 			}
-			gen.addLocalVariable(tag.getName(), t, tag.getSlot(), start, lvpos.end);
+			gen.addLocalVariable(tag.getName(), t, tag.getSlot(), start, end);
 		}
 	}
 
@@ -0,0 +1,18 @@
+public class Code {
+  public void m() {
+ 
+  }
+}
+
+aspect X {
+  before(): execution(* m(..)) && cflow(adviceexecution()) {}
+
+  before(): execution(* *(..)) {
+    int i = 4;
+    log("foo",thisJoinPoint);
+    log(Integer.valueOf(i),thisJoinPoint);
+  }
+  public void log(String s,Object o) {}
+  public void log(int s,Object o) {}
+}
+

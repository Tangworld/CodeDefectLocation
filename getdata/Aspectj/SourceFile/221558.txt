@@ -0,0 +1,14 @@
+
+class Foo<A> extends FooBase implements Marker<A> { }
+
+interface Marker<A> { }
+
+aspect AspectDoWhatEver {
+    void Marker<A>.doWhatEver()  { // do nothing
+    }
+}
+
+abstract class FooBase
+{
+    abstract void doWhatEver();
+}
\ No newline at end of file
@@ -22,6 +22,7 @@ public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectH1.6.0rc1
 	public void testBadMessage() { runTest("incorrect itd error with generics");}
+	public void testBadMessage2() { runTest("incorrect itd error with generics - 2");}
 	public void testHasMethodAnnoValueInt_various() { runTest("hasmethod anno value - I");}
 	public void testHasMethodAnnoValueBoolean_various() { runTest("hasmethod anno value - Z");}
 
@@ -5,9 +5,20 @@
 
 
    <ajc-test dir="bugs160/various" title="incorrect itd error with generics">
-     <compile options="-1.5 -showWeaveInfo" files="IncorrectMessage.java"/>
+     <compile options="-1.5 -showWeaveInfo" files="IncorrectMessage.java">
+       <message kind="weave" text="Type 'Foo' (IncorrectMessage.java) has intertyped method from 'AspectDoWhatEver' (IncorrectMessage.java:'void Marker.doWhatEver()')"/>
+       <message kind="weave" text="Type 'Marker' (IncorrectMessage.java) has intertyped method from 'AspectDoWhatEver' (IncorrectMessage.java:'void Marker.doWhatEver()')"/>
+     </compile>       
    </ajc-test>
 
+   <ajc-test dir="bugs160/various" title="incorrect itd error with generics - 2">
+     <compile options="-1.5 -showWeaveInfo" files="IncorrectMessage2.java">
+       <message kind="weave" text="Type 'Foo' (IncorrectMessage2.java) has intertyped method from 'AspectDoWhatEver' (IncorrectMessage2.java:'void Marker.doWhatEver()')"/>
+       <message kind="weave" text="Type 'Marker' (IncorrectMessage2.java) has intertyped method from 'AspectDoWhatEver' (IncorrectMessage2.java:'void Marker.doWhatEver()')"/>
+     </compile>       
+   </ajc-test>
+   
+   
    <ajc-test dir="bugs160/various" title="hasmethod anno value - I">
      <compile options="-1.5 -XhasMember -showWeaveInfo" files="A.java">
        <message kind="weave" text="Extending interface set for type 'B' (A.java) to include 'java.io.Serializable' (A.java)"/>
@@ -226,19 +226,36 @@ public class AjProblemReporter extends ProblemReporter {
 			// so we don't have to worry about interfaces, just the superclass.
 		    onTypeX = factory.fromEclipse(type.superclass()); //abstractMethod.declaringClass);
 		}
+		
+		if (onTypeX.isRawType()) onTypeX = onTypeX.getGenericType();
+
 		for (Iterator i = onTypeX.getInterTypeMungersIncludingSupers().iterator(); i.hasNext(); ) {
 			ConcreteTypeMunger m = (ConcreteTypeMunger)i.next();
 			ResolvedMember sig = m.getSignature();
             if (!Modifier.isAbstract(sig.getModifiers())) {
-				if (ResolvedType
-					.matches(
-						AjcMemberMaker.interMethod(
-							sig,
-							m.getAspectType(),
-							sig.getDeclaringType().resolve(factory.getWorld()).isInterface()),
-						factory.makeResolvedMember(abstractMethod))) {
-					return;
-				}
+    			ResolvedMember abstractMember = factory.makeResolvedMember(abstractMethod);
+    			if (abstractMember.getName().startsWith("ajc$interMethodDispatch")) {			
+	  				if (ResolvedType
+						.matches(
+							AjcMemberMaker.interMethod(
+								sig,
+								m.getAspectType(),
+								sig.getDeclaringType().resolve(factory.getWorld()).isInterface()),
+								abstractMember
+							)) {
+						return;
+					}
+    			} else {
+    				// In this case we have something like:
+    				//  interface I {}
+    				//  abstract class C implements I { abstract void foo();}
+    				//  class D extends C {}
+    				//  ITD: public void I.foo() {...}
+    				// The ITD is providing the implementation of foo in the class D but when checking for whether the abstract
+    				// method is overridden, we won't be looking at whether the ITD overrides ajc$interMethodDispath$...foo but
+    				// whether it overrides the foo method from class C
+                	if (ResolvedType.matches(sig,factory.makeResolvedMember(abstractMethod))) return;
+    			}
 			}
 		}
 

@@ -0,0 +1,7 @@
+package package1;
+
+public abstract class Abstract<T> {
+
+        protected Object field;
+
+}
@@ -0,0 +1,6 @@
+public aspect Aspect {
+
+        declare warning : set(* *) : "foo";
+
+
+}
@@ -0,0 +1,11 @@
+package bug.package2;
+
+import package1.Abstract;
+
+public class Concrete extends Abstract<Object> {
+
+        public void method() {
+                field = null;
+        }
+
+}
@@ -0,0 +1,21 @@
+/*
+ * Created on 19-01-2005
+ */
+package org.aspectj.systemtest;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.aspectj.systemtest.ajc160.AllTestsAspectJ160;
+
+public class AllTests16 {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("AspectJ System Test Suite - JDK 1.6");
+		//$JUnit-BEGIN$
+		suite.addTest(AllTests15.suite());
+		suite.addTest(AllTestsAspectJ160.suite());
+		//$JUnit-END$
+		return suite;
+	}
+}
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc160;
+
+import java.io.File;
+
+import org.aspectj.testing.XMLBasedAjcTestCase;
+
+import junit.framework.Test;
+
+/**
+ * These are tests for AspectJ1.6 - they do not require a 1.6 VM.
+ */
+public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
+	
+  public void testGenericFieldNPE_pr165885() { runTest("generic field npe");}
+
+ 
+  /////////////////////////////////////////
+  public static Test suite() {
+    return XMLBasedAjcTestCase.loadSuite(Ajc160Tests.class);
+  }
+
+  protected File getSpecFile() {
+    return new File("../tests/src/org/aspectj/systemtest/ajc160/ajc160.xml");
+  }
+
+  
+}
\ No newline at end of file
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc160;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTestsAspectJ160 {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("AspectJ 1.6.0 tests");
+		//$JUnit-BEGIN$
+		suite.addTest(Ajc160Tests.suite());
+        //$JUnit-END$
+		return suite;
+	}
+}
@@ -0,0 +1,16 @@
+<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>
+
+<!-- AspectJ v1.6.0 Tests -->
+<suite>
+
+ <!-- first section - dont need a 1.6 vm but fixed in the 1.6 branch of AspectJ -->
+    <ajc-test dir="bugs160/pr165885" title="generic field npe">
+      <compile files="Concrete.java,Abstract.java,Aspect.java" options="-1.5">
+        <message kind="warning" line="8" text="foo"/>
+	  </compile>
+    </ajc-test>
+    
+    
+ <!-- second section - need a 1.6 vm -->
+
+</suite>
\ No newline at end of file
@@ -17,7 +17,7 @@ import junit.framework.TestSuite;
 
 import org.aspectj.systemtest.AllTests;
 import org.aspectj.systemtest.AllTests14;
-import org.aspectj.systemtest.AllTests15;
+import org.aspectj.systemtest.AllTests16;
 import org.aspectj.util.LangUtil;
 
 public class TestsModuleTests extends TestCase {
@@ -27,7 +27,8 @@ public class TestsModuleTests extends TestCase {
         TestSuite suite = new TestSuite(name);
         // compiler tests, wrapped for JUnit
         if (LangUtil.is15VMOrGreater()) {
-            suite.addTest(AllTests15.suite());
+//            suite.addTest(AllTests15.suite());
+            suite.addTest(AllTests16.suite()); // there are currently (28/11/06) no tests specific to a 1.6 vm - so we can do this
         } else if (LangUtil.is14VMOrGreater()) {
             System.err.println("Skipping tests for 1.5");
             //suite.addTest(TestUtil.skipTest("for 1.5"));
@@ -94,15 +94,19 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 
 	public String[] getParameterNames() {
 		if (argumentNames!=null) return argumentNames;
-		TypeDeclaration typeDecl = getTypeDeclaration();
-		AbstractMethodDeclaration methodDecl = typeDecl.declarationOf((MethodBinding)realBinding);
-		Argument[] args = (methodDecl==null?null:methodDecl.arguments); // dont like this - why isnt the method found sometimes? is it because other errors are being reported?
-		if (args==null) {
+		if (realBinding instanceof FieldBinding) {
 			argumentNames=NO_ARGS;
 		} else {
-			argumentNames = new String[args.length];
-			for (int i = 0; i < argumentNames.length; i++) {
-				argumentNames[i] = new String(methodDecl.arguments[i].name);
+			TypeDeclaration typeDecl = getTypeDeclaration();
+			AbstractMethodDeclaration methodDecl = typeDecl.declarationOf((MethodBinding)realBinding);
+			Argument[] args = (methodDecl==null?null:methodDecl.arguments); // dont like this - why isnt the method found sometimes? is it because other errors are being reported?
+			if (args==null) {
+				argumentNames=NO_ARGS;
+			} else {
+				argumentNames = new String[args.length];
+				for (int i = 0; i < argumentNames.length; i++) {
+					argumentNames[i] = new String(methodDecl.arguments[i].name);
+				}
 			}
 		}
 		return argumentNames;

@@ -28,10 +28,26 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc163Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
-//	public void testAtAspectJDecp_pr164016() {
-//		runTest("ataspectj decp");
-//	}
+	// public void testAtAspectJDecp_pr164016() {
+	// runTest("ataspectj decp");
+	// }
+
+	public void testPoorAtAjIfMessage_pr256458() {
+		runTest("poor ataj if message - 1");
+	}
 
+	public void testPoorAtAjIfMessage_pr256458_2() {
+		runTest("poor ataj if message - 2");
+	}
+/*
+	public void testInheritedAnnotations_pr128664() {
+		runTest("inherited annotations");
+	}
+
+	public void testInheritedAnnotations_pr128664_2() {
+		runTest("inherited annotations - 2");
+	}
+*/
 	public void testGetMethodNull_pr154427() {
 		runTest("getMethod returning null");
 	}
@@ -19,6 +19,32 @@
    	  </run>
     </ajc-test>
 
+    <ajc-test dir="bugs163/pr128664" title="inherited annotations">
+   	  <compile files="Bug.java" options="-1.5 -showWeaveInfo">
+   	    <message kind="weave" text=""/>
+   	  </compile>
+   	  <run class="Bug"/>
+    </ajc-test>
+        
+    <ajc-test dir="bugs163/pr128664" title="inherited annotations - 2">
+   	  <compile files="Bug2.java" options="-1.5 -showWeaveInfo">
+   	    <message kind="weave" text=""/>
+   	  </compile>
+   	  <run class="Bug2"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs163/pr256458" title="poor ataj if message - 1">
+   	  <compile files="Code.java" options="-1.5">
+   	    <message kind="error" text="in annotation style, if(...) pointcuts cannot contain code"/>
+   	  </compile>
+    </ajc-test>
+
+    <ajc-test dir="bugs163/pr256458" title="poor ataj if message - 2">
+   	  <compile files="Code2.java" options="-1.5">
+   	    <message kind="error" text="in annotation style, if(...) pointcuts cannot contain code"/>
+   	  </compile>
+    </ajc-test>
+
     <ajc-test dir="bugs163/pr256937" title="fully qualified return type">
    	  <compile files="Ship.java ShipAccessor.java" options="-emacssym -1.5"/>
     </ajc-test>
@@ -366,7 +366,11 @@ public class PatternParser {
 			eat(")");
 			p = new KindedPointcut(Shadow.PreInitialization, sig);
 		} else if (kind.equals("if")) {
-			// @style support allows if(), if(true), if(false)
+			// - annotation style only allows if(), if(true) or if(false)
+			// - if() means the body of the annotated method represents the if expression
+			// - anything else is an error because code cannot be put into the if()
+			// - code style will already have been processed and the call to maybeGetParsedPointcut()
+			// at the top of this method will have succeeded.
 			eat("(");
 			if (maybeEatIdentifier("true")) {
 				eat(")");
@@ -375,7 +379,11 @@ public class PatternParser {
 				eat(")");
 				p = new IfPointcut.IfFalsePointcut();
 			} else {
-				eat(")");
+				if (!maybeEat(")")) {
+					throw new ParserException(
+							"in annotation style, if(...) pointcuts cannot contain code. Use if() and put the code in the annotated method",
+							t);
+				}
 				// TODO - Alex has some token stuff going on here to get a readable name in place of ""...
 				p = new IfPointcut("");
 			}
@@ -0,0 +1,7 @@
+import org.aspectj.lang.annotation.*;
+
+@Aspect
+public class Code {
+  @Before("if(37!=42)")
+  public void runme() {}
+}
@@ -0,0 +1,10 @@
+import org.aspectj.lang.annotation.*;
+
+@Aspect
+public class Code2 {
+
+   @Around("execution(* Code.*(..)) && if(java.lang.System.currentTimeMillis() > 1)")
+   public void foo() {
+   }
+
+}

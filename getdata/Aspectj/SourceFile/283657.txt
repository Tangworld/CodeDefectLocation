@@ -0,0 +1,14 @@
+public aspect Aspect {
+        int Target.foo = 9;
+
+        void Target.foo() {
+
+        }
+}
+
+
+class Target {
+
+}
+
+
@@ -0,0 +1,35 @@
+public aspect Failing {
+    pointcut failingPointcut() : execution(* foo*(..));
+
+    after() returning() : failingPointcut()
+    {
+        System.out.println("hit");
+    }
+}
+
+class X <T extends Object> {
+    // Pointcut match highlighted
+//    void foo() {}
+
+    // Pointcut match highlighted
+//    void foo1(T x) {}   
+
+    // Pointcut not highlighted
+    void foo2(T[] x) {}
+
+    // Pointcut not highlighted
+//    void foo3(T... x) {}
+
+    // Pointcut highlighted
+//    T foo3() { return null; }
+
+    // Pointcut highlighted
+//    T[] foo4() { return null; }
+
+    public static void main(String[] args) {
+        X<Object> x = new X<Object>();
+
+        x.foo2(null);       
+    }
+}
+
@@ -150,6 +150,32 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		assertNotNull(rels);
 	}
 
+	// public void testArraysGenerics() throws Exception {
+	// String p = "pr283864";
+	// initialiseProject(p);
+	// build(p);
+	// printModel(p);
+	// // IRelationshipMap irm = getModelFor(p).getRelationshipMap();
+	// // List rels = irm.get("=pr280383<f{AnAspect.java}AnAspect)f.AClass.f_AClass_new");
+	// // assertNotNull(rels);
+	// }
+
+	public void testSimilarITDS() throws Exception {
+		String p = "pr283657";
+		initialiseProject(p);
+		build(p);
+		// printModel(p);
+		// Hid:1:(targets=1) =pr283657<{Aspect.java}Aspect)Target.foo (declared on) =pr283657<{Aspect.java[Target
+		// Hid:2:(targets=1) =pr283657<{Aspect.java}Aspect)Target.foo!2 (declared on) =pr283657<{Aspect.java[Target
+		// Hid:3:(targets=2) =pr283657<{Aspect.java[Target (aspect declarations) =pr283657<{Aspect.java}Aspect)Target.foo
+		// Hid:4:(targets=2) =pr283657<{Aspect.java[Target (aspect declarations) =pr283657<{Aspect.java}Aspect)Target.foo!2
+		IRelationshipMap irm = getModelFor(p).getRelationshipMap();
+		List rels = irm.get("=pr283657<{Aspect.java}Aspect)Target.foo");
+		assertNotNull(rels);
+		rels = irm.get("=pr283657<{Aspect.java}Aspect)Target.foo!2");
+		assertNotNull(rels);
+	}
+
 	public void testIncrementalAnnotationMatched_276399() throws Exception {
 		String p = "pr276399";
 		initialiseProject(p);
@@ -158,7 +158,33 @@ public class JDTLikeHandleProvider implements IElementHandleProvider {
 		// TODO could optimize this code
 		char[] byteCodeName = ipe.getBytecodeName().toCharArray();
 
-		if (ipe.getKind().isDeclareAnnotation()) {
+		if (ipe.getKind().isInterTypeMember()) {
+			int count = 1;
+			List kids = ipe.getParent().getChildren();
+			int idx = 0;
+			for (Iterator iterator = kids.iterator(); iterator.hasNext();) {
+				IProgramElement object = (IProgramElement) iterator.next();
+				if (object.equals(ipe)) {
+					break;
+				}
+				if (object.getKind().isInterTypeMember()) {
+					if (object.getName().equals(ipe.getName()) && getParameters(object).equals(getParameters(ipe))) {
+						String existingHandle = object.getHandleIdentifier();
+						int suffixPosition = existingHandle.indexOf('!');
+						if (suffixPosition != -1) {
+							count = new Integer(existingHandle.substring(suffixPosition + 1)).intValue() + 1;
+						} else {
+							if (count == 1) {
+								count = 2;
+							}
+						}
+					}
+				}
+			}
+			if (count > 1) {
+				return CharOperation.concat(countDelim, new Integer(count).toString().toCharArray());
+			}
+		} else if (ipe.getKind().isDeclareAnnotation()) {
 			// look at peer declares
 			int count = 1;
 			List kids = ipe.getParent().getChildren();

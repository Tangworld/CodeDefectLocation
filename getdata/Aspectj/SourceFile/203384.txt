@@ -226,8 +226,10 @@ public class AjASTConverter extends ASTConverter {
 			return convert((InterTypeFieldDeclaration) methodDeclaration);
 		} else if (methodDeclaration instanceof InterTypeMethodDeclaration){
 			methodDecl = new org.aspectj.org.eclipse.jdt.core.dom.InterTypeMethodDeclaration(this.ast);
+			((org.aspectj.org.eclipse.jdt.core.dom.InterTypeMethodDeclaration) methodDecl).setOnType(((InterTypeMethodDeclaration) methodDeclaration).getOnType().toString());
 		} else if (methodDeclaration instanceof InterTypeConstructorDeclaration){
 			methodDecl = new org.aspectj.org.eclipse.jdt.core.dom.InterTypeMethodDeclaration(this.ast);
+			((org.aspectj.org.eclipse.jdt.core.dom.InterTypeMethodDeclaration) methodDecl).setOnType(((InterTypeConstructorDeclaration) methodDeclaration).getOnType().toString());
 			methodDecl.setConstructor(true);
 		} else if (methodDeclaration instanceof PointcutDeclaration){
 			return convert((PointcutDeclaration) methodDeclaration);
@@ -507,6 +509,7 @@ public class AjASTConverter extends ASTConverter {
 		if (!(this.resolveBindings && binding == null)) {
 			convert(fieldDecl.javadoc, fieldDeclaration);
 		}
+		fieldDeclaration.setOnType(fieldDecl.getOnType().toString());
 		return fieldDeclaration;
 	}
 	public ASTNode convert(PointcutDeclaration pointcutDeclaration) {
@@ -27,9 +27,19 @@ package org.aspectj.org.eclipse.jdt.core.dom;
  */
 
 public class InterTypeFieldDeclaration extends FieldDeclaration {
+	private String onType;
+
 	InterTypeFieldDeclaration(AST ast) {
 		super(ast);
 	}
+
+	public String getOnType() { 
+		return onType;
+	}
+	
+	public void setOnType(String onType) {
+		this.onType = onType;
+	}
 
 	ASTNode clone0(AST target) {
 		InterTypeFieldDeclaration result = new InterTypeFieldDeclaration(target);
@@ -28,10 +28,20 @@ import org.aspectj.org.eclipse.jdt.core.dom.Type;
  */
 
 public class InterTypeMethodDeclaration extends MethodDeclaration {
+	private String onType;
+	
 	InterTypeMethodDeclaration(AST ast) {
 		super(ast);
 	}
 
+	public String getOnType() { 
+		return onType;
+	}
+	
+	public void setOnType(String onType) {
+		this.onType = onType;
+	}
+
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */

@@ -1012,7 +1012,7 @@ class BcelClassWeaver implements IClassWeaver {
 		    while (!worthRetrying.isEmpty() && modificationOccured) {
 				modificationOccured = false;
                 List forRemoval = new ArrayList();
-                for (Iterator iter2 = worthRetrying.iterator(); iter.hasNext();) {
+                for (Iterator iter2 = worthRetrying.iterator(); iter2.hasNext();) {
 				  DeclareAnnotation decaF = (DeclareAnnotation) iter2.next();
 				  if (decaF.matches(itdIsActually,world)) {
 					LazyMethodGen annotationHolder = locateAnnotationHolderForFieldMunger(clazz,fieldMunger);
@@ -0,0 +1,14 @@
+@interface A {}
+
+aspect Test {
+        declare @field : @A int var* : @A;
+        declare @field : int var* : @A;
+
+        interface Subject {}
+
+        public int Subject.vara;
+        public int Subject.varb;
+}
+
+class X implements Test.Subject {
+}
\ No newline at end of file
@@ -20,6 +20,7 @@ import junit.framework.Test;
  */
 public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testDecFieldProblem_pr218167() { runTest("dec field problem");}
 	public void testGenericsSuperITD_pr206911() { runTest("generics super itd"); }
 	public void testGenericsSuperITD_pr206911_2() { runTest("generics super itd - 2"); }
 
@@ -3,6 +3,12 @@
 <!-- AspectJ v1.6.0 Tests -->
 <suite>
 
+   <ajc-test dir="bugs160/pr218167" title="dec field problem">
+     <compile options="-1.5" files="Test.java">
+       <message kind="warning" text="already has an annotation of type A, cannot add a second instance"/>
+     </compile>
+   </ajc-test>
+
    <ajc-test dir="bugs160/pr206911" title="generics super itd">
      <compile options="-1.5" files="VerifyError.java"/>
      <run class="bugs.VerifyError"/>
@@ -1065,7 +1065,7 @@ class BcelClassWeaver implements IClassWeaver {
 		    while (!worthRetrying.isEmpty() && modificationOccured) {
 				modificationOccured = false;
                 List forRemoval = new ArrayList();
-                for (Iterator iter2 = worthRetrying.iterator(); iter.hasNext();) {
+                for (Iterator iter2 = worthRetrying.iterator(); iter2.hasNext();) {
 				  DeclareAnnotation decaMC = (DeclareAnnotation) iter2.next();
 				  if (decaMC.matches(unMangledInterMethod,world)) {
 					LazyMethodGen annotationHolder = locateAnnotationHolderForFieldMunger(clazz,methodctorMunger);
@@ -1311,7 +1311,7 @@ class BcelClassWeaver implements IClassWeaver {
 					  reportedProblems.add(uniqueID);
 					  reportedProblems.add(new Integer(itdfieldsig.hashCode()*deca.hashCode()));
 					  world.getLint().elementAlreadyAnnotated.signal(
-						new String[]{rm.toString(),deca.getAnnotationTypeX().toString()},
+						new String[]{itdfieldsig.toString(),deca.getAnnotationTypeX().toString()},
 						rm.getSourceLocation(),new ISourceLocation[]{deca.getSourceLocation()});
 				  }
 			  }

@@ -82,6 +82,7 @@ public class InterTypeScope extends ClassScope {
 		if (aliased!=-1) {
 			if (aliased>sourceType.typeVariables.length || sourceType.typeVariables.length==0) {
 				TypeVariableBinding tvb = new TypeVariableBinding("fake".toCharArray(),null,0);
+				tvb.superclass = getJavaLangObject();
 				tvb.fPackage = new PackageBinding(environment());
 				return tvb;
 				// error is going to be reported by someone else!
@@ -0,0 +1,4 @@
+public aspect AspectX
+{
+        public A AspectXMarker<A,B>.doSomething(B b) { return null; }
+}
@@ -0,0 +1,3 @@
+public interface AspectXMarker <A, B extends BInterface<?> > extends   
+FooInterface<A, B>
+{ }
@@ -0,0 +1,2 @@
+public interface BInterface<S> { }
+
@@ -0,0 +1,3 @@
+public class Foo<B extends BInterface<?>> implements AspectXMarker<Integer, B>
+{}
+
@@ -0,0 +1,5 @@
+public interface FooInterface<A,B>
+{
+        public A doSomething(B transition);
+}
+
@@ -0,0 +1,9 @@
+public class Test 
+{
+        public static void main(String[] args)
+        {
+                Foo<BInterface<Integer>> foo = new Foo<BInterface<Integer>>();
+
+                foo.doSomething(null);
+        }
+}
@@ -23,6 +23,8 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1
+	public void testDuplicateMethodSignature_pr223226_2() { runTest("duplicate method signature - 2"); }
+	public void testDuplicateMethodSignature_pr223226() { runTest("duplicate method signature"); }
 	public void testProtectedMethodsAroundAdvice_pr197719_2() { runTest("protected methods and around advice - again - 2");}
 	public void testProtectedMethodsAroundAdvice_pr197719() { runTest("protected methods and around advice - again");}
 	public void testProtectedMethodsAroundAdvice_pr230075() { runTest("protected methods and around advice");}
@@ -3,6 +3,20 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
+	<ajc-test dir="bugs161/pr223226" title="duplicate method signature - 2">
+    	<compile files="AspectX.java BInterface.java FooInterface.java AspectXMarker.java Foo.java Test.java" options="-1.5"/>
+    	<run class="Test"/>
+    </ajc-test>
+    
+	<ajc-test dir="bugs161/pr223226" title="duplicate method signature">
+    	<compile files="AspectX.java BInterface.java FooInterface.java AspectXMarker.java Foo.java Test.java" options="">
+    	  <message kind="error" line="1"/>
+    	  <message kind="error" line="2"/>
+    	  <message kind="error" line="3"/>
+    	  <message kind="error" line="5"/>
+    	</compile>
+    </ajc-test>
+
 	<ajc-test dir="bugs161/pr197719" title="protected methods and around advice - again - 2">
     	<compile files="test/aspects/C1.java test/aspects/C3.java test/aspects/MyAnn.java test/aspects/MyAnnAspect.java test/aspects2/C2.java" options="-1.5 -showWeaveInfo">
     	  <message kind="weave" text="Join point 'method-call(void test.aspects.C1.aMethod())' in Type 'test.aspects.C1' (C1.java:12) "/>
@@ -714,10 +714,12 @@ class BcelClassWeaver implements IClassWeaver {
 			UnresolvedType[] bm = BcelWorld.fromBcel(bridgeToCandidate.getArgumentTypes());
 			ResolvedMember overriddenMethod = checkForOverride(theSuperclass,name,psig,rsig,bridgeToCandidate.getAccessFlags(),pkgName,bm);
 			if (overriddenMethod!=null) { 
-				boolean alreadyHaveABridgeMethod = methodsSet.contains(overriddenMethod.getName()+overriddenMethod.getSignature());
+				String key = new StringBuffer().append(overriddenMethod.getName()).append(overriddenMethod.getSignature()).toString();
+				boolean alreadyHaveABridgeMethod = methodsSet.contains(key);
 				if (!alreadyHaveABridgeMethod) {
 					if (world.forDEBUG_bridgingCode) System.err.println("Bridging:bridging to '"+overriddenMethod+"'");
 					createBridgeMethod(world, bridgeToCandidate, clazz, overriddenMethod);
+					methodsSet.add(key);
 					didSomething = true;
 					continue; // look at the next method
 				}
@@ -730,9 +732,11 @@ class BcelClassWeaver implements IClassWeaver {
 				ResolvedType interfaceType = world.resolve(interfaces[j]);
 				overriddenMethod = checkForOverride(interfaceType,name,psig,rsig,bridgeToCandidate.getAccessFlags(),clazz.getPackageName(),bm);
 				if (overriddenMethod!=null) { 
-					boolean alreadyHaveABridgeMethod = methodsSet.contains(overriddenMethod.getName()+overriddenMethod.getSignature());
+					String key = new StringBuffer().append(overriddenMethod.getName()).append(overriddenMethod.getSignature()).toString();
+					boolean alreadyHaveABridgeMethod = methodsSet.contains(key);
 					if (!alreadyHaveABridgeMethod) {
 						createBridgeMethod(world, bridgeToCandidate, clazz, overriddenMethod);
+						methodsSet.add(key);
 						didSomething=true;
 						if (world.forDEBUG_bridgingCode) System.err.println("Bridging:bridging to "+overriddenMethod);
 						continue; // look at the next method
@@ -0,0 +1,5 @@
+public aspect AspectX
+{
+        public A AspectXMarker<A,B>.doSomething(B b) { return null; }
+}
+
@@ -0,0 +1,4 @@
+public interface AspectXMarker <A, B extends BInterface<?> > extends   
+FooInterface<A, B>
+{ }
+
@@ -0,0 +1,2 @@
+public interface BInterface<S> { }
+
@@ -0,0 +1,2 @@
+public class Foo<B extends BInterface<?>> implements AspectXMarker<Integer, B>
+{}
@@ -0,0 +1,5 @@
+public interface FooInterface<A,B>
+{
+        public A doSomething(B transition);
+}
+
@@ -0,0 +1,9 @@
+public class Test 
+{
+        public static void main(String[] args)
+        {
+                Foo<BInterface<Integer>> foo = new Foo<BInterface<Integer>>();
+
+                foo.doSomething(null);
+        }
+}

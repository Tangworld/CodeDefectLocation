@@ -1041,7 +1041,8 @@ public final class LazyClassGen {
 	 * Create a field in the type containing the shadow where the annotation retrieved during binding can be stored - for later fast
 	 * access.
 	 * 
-	 * @param shadow the shadow at which the @annotation result is being cached
+	 * @param shadow
+	 *            the shadow at which the @annotation result is being cached
 	 * @return a field
 	 */
 	public Field getAnnotationCachingField(BcelShadow shadow, ResolvedType toType) {
@@ -1116,13 +1117,21 @@ public final class LazyClassGen {
 		}
 
 		if (serialVersionUIDRequiresInitialization) {
+			InstructionList[] ilSVUID = new InstructionList[1];
+			ilSVUID[0] = new InstructionList();
+			ilSVUID[0].append(InstructionFactory.PUSH(getConstantPool(), calculatedSerialVersionUID));
+			ilSVUID[0].append(getFactory().createFieldAccess(getClassName(), "serialVersionUID", BasicType.LONG,
+					Constants.PUTSTATIC));
 			if (il == null) {
-				il = new InstructionList[1];
+				il = ilSVUID;
+			} else {
+				InstructionList[] newIl = new InstructionList[il.length + ilSVUID.length];
+				System.arraycopy(il, 0, newIl, 0, il.length);
+				System.arraycopy(ilSVUID, 0, newIl, il.length, ilSVUID.length);
+				il = newIl;
 			}
-			il[0] = new InstructionList();
-			il[0].append(InstructionFactory.PUSH(getConstantPool(), calculatedSerialVersionUID));
-			il[0].append(getFactory().createFieldAccess(getClassName(), "serialVersionUID", BasicType.LONG, Constants.PUTSTATIC));
 		}
+
 		LazyMethodGen prevMethod;
 		LazyMethodGen nextMethod = null;
 		if (this.isInterface()) { // Cannot sneak stuff into another static method in an interface
@@ -1204,7 +1213,7 @@ public final class LazyClassGen {
 		list.append(InstructionFactory.PUSH(getConstantPool(), shadow.getKind().getName()));
 
 		// create the signature
-		if ( world.isTargettingAspectJRuntime12() || !isFastSJPAvailable || !sig.getKind().equals(Member.METHOD)) {
+		if (world.isTargettingAspectJRuntime12() || !isFastSJPAvailable || !sig.getKind().equals(Member.METHOD)) {
 			list.append(InstructionFactory.createLoad(factoryType, 0));
 		}
 
@@ -0,0 +1,38 @@
+
+	import java.util.Hashtable;
+
+	import javax.naming.Context;
+	import javax.naming.NamingException;
+	import javax.naming.directory.DirContext;
+	import javax.naming.directory.InitialDirContext;
+/*******************************************************************************
+ * Copyright (c) 2010 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - Repro test case
+ *    Abraham Nevado 
+ *******************************************************************************/
+
+
+	public class A implements java.io.Serializable{
+		    
+		  public A()  
+		  {  
+		  }  
+		  public void doSomething() throws Exception  
+		  {  
+
+
+		 }  
+		 public static void main(String[] args) throws Exception {  
+			 A lc = new A();  
+			 lc.doSomething();  
+		  
+		   }  
+	}
+	
+
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2010 Contributors All rights reserved. This program and the
+ * accompanying materials are made available under the terms of the Eclipse
+ * Public License v1.0 which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: Abraham Nevado
+ *******************************************************************************/
+
+aspect X {
+
+	public pointcut doSomething(Object o): 
+    	execution(* *()) && target(o);
+
+	before(Object o) : doSomething(o) {
+		try {
+			String signature = thisJoinPointStaticPart.getSignature().toString();
+			System.out.println("OK");
+		} catch (NullPointerException npe) {
+			System.out.println("KO");
+		}
+	}
+}
@@ -0,0 +1,10 @@
+<aspectj>
+	<aspects>
+		<aspect name="X"/>
+	</aspects>
+
+	<weaver options="-XaddSerialVersionUID -Xset:targetRuntime1_6_10=true,fastWeaving=true,weaveJavaxPackages=true -XhasMember -XlazyTjp -Xreweavable">
+		<include within="*"/>
+	</weaver>
+	
+</aspectj>
\ No newline at end of file
@@ -21,6 +21,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
  */
 public class Ajc1611Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testNPEAddSerialVersionUID_bug335783() {
+		runTest("pr335783");
+	}
+
 	public void testGenericsAndItds_333469() {
 		runTest("pr333469");
 	}
@@ -36,18 +40,18 @@ public class Ajc1611Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	public void testDeclareField_328840() {
 		runTest("pr328840");
 	}
-	
-//	public void testAnnoStyleAdviceChain_333274() {
-//			runTest("anno style advice chain");
-//	}
-//
-//	public void testAnnoStyleAdviceChain_333274_2() {
-//			runTest("code style advice chain");
-//	}
-//	
-//	public void testAnnoStyleAdviceChain_333274_3() {
-//		runTest("code style advice chain - no inline");
-//	}
+
+	// public void testAnnoStyleAdviceChain_333274() {
+	// runTest("anno style advice chain");
+	// }
+	//
+	// public void testAnnoStyleAdviceChain_333274_2() {
+	// runTest("code style advice chain");
+	// }
+	//
+	// public void testAnnoStyleAdviceChain_333274_3() {
+	// runTest("code style advice chain - no inline");
+	// }
 
 	// ---
 
@@ -1,6 +1,17 @@
 <!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>
 
 <suite>
+
+  <ajc-test dir="bugs1611/pr335783" title="pr335783">
+    <compile files="A.java" options="-1.5"/>
+    <compile files="X.aj" options="-1.5 -Xlint:ignore" />
+    <run class="A" ltw="aop.xml">
+    <stdout>
+	    <line text="OK"/>
+    </stdout>
+    </run>
+  </ajc-test>
+  
   <ajc-test dir="bugs1611/pr333274" title="anno style advice chain">
   <compile files="ma/Annotation1.java  ma/aspect1/Aspect1.java  ma/aspect3/Aspect3.java ma/Main.java ma/Precedence.java" options="-1.5"/>
   <run class="ma.Main">

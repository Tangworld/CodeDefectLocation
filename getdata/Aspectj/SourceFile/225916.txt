@@ -0,0 +1,8 @@
+package test.jmx;
+
+public class Test implements TestMBean {
+
+       public String test() {
+               return "test";
+       }
+}
@@ -0,0 +1,10 @@
+package test.aspects;
+
+public aspect TestAspect {
+
+       pointcut boundaries(): execution (public * *..*MBean+.*(..));
+
+       Object around(): boundaries() {
+               return proceed();
+       }
+}
@@ -0,0 +1,6 @@
+package test.jmx;
+
+public interface TestMBean {
+
+       String test();
+}
@@ -22,6 +22,9 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.0rc1
+    public void testPipelineCompilationAnonymous_pr225916() {
+        runTest("pipeline compilation and anonymous type");
+    }
     public void testGenericITDs_pr214994() { 
         runTest("generic itd");
     }
@@ -4,6 +4,12 @@
 <suite>
 
 
+	<ajc-test dir="bugs160/pr225916" title="pipeline compilation and anonymous type">
+		<compile files="Test.java TestMBean.java TestAspect.java" options="-showWeaveInfo">
+		 <message kind="weave" text="Join point 'method-execution(java.lang.String test.jmx.Test.test())' in Type"/>
+		</compile>
+	</ajc-test>
+
 	<ajc-test dir="bugs160/pr214994" title="generic itd">
 		<compile files="Broke.java" options="-1.5"/>
 	</ajc-test>
@@ -132,7 +132,9 @@ public class EclipseSourceType extends AbstractReferenceTypeDelegate {
 	}
 
 	public boolean isAnonymous() {
-		return ((declaration.modifiers & (ASTNode.IsAnonymousType | ASTNode.IsLocalType)) != 0);
+         if (declaration.binding != null)
+            return declaration.binding.isAnonymousType();
+        return ((declaration.modifiers & (ASTNode.IsAnonymousType | ASTNode.IsLocalType)) != 0);
 	}
 
 	public boolean isNested() {

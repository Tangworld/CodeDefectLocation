@@ -30,6 +30,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CodeStream;
@@ -43,6 +44,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeIds;
+import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 import org.aspectj.weaver.AjAttribute;
 import org.aspectj.weaver.patterns.WildTypePattern;
 
@@ -251,6 +253,41 @@ public class AstUtil {
 		System.arraycopy(rest, 0, ret, 1, len);
 		return ret;
 	}
+	
+	public static TypeParameter[] insert(TypeParameter first, TypeParameter[] rest) {
+		if (rest == null) {
+			return new TypeParameter[]{first};
+		}
+		int len = rest.length;
+		TypeParameter[] ret = new TypeParameter[len + 1];
+		ret[0] = first;
+		System.arraycopy(rest, 0, ret, 1, len);
+		return ret;
+	}
+	
+	public static TypeVariableBinding[] insert(TypeVariableBinding first, TypeVariableBinding[] rest) {
+		if (rest == null) {
+			return new TypeVariableBinding[]{first};
+		}
+		int len = rest.length;
+		TypeVariableBinding[] ret = new TypeVariableBinding[len + 1];
+		ret[0] = first;
+		System.arraycopy(rest, 0, ret, 1, len);
+		return ret;
+	}
+	
+	public static TypeVariableBinding[] insert(TypeVariableBinding[] first, TypeVariableBinding[] rest) {
+		if (rest == null) {
+			TypeVariableBinding[] ret = new TypeVariableBinding[first.length];
+			System.arraycopy(first, 0, ret, 0, first.length);
+			return ret;
+		}
+		int len = rest.length;
+		TypeVariableBinding[] ret = new TypeVariableBinding[first.length+len];
+		System.arraycopy(first,0,ret,0,first.length);
+		System.arraycopy(rest,0,ret,first.length,len);
+		return ret;
+	}
 
 	public static Expression[] insert(Expression first, Expression[] rest) {
 		if (rest == null) {
@@ -22,6 +22,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Argument;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CodeStream;
@@ -36,6 +37,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser;
 import org.aspectj.org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
 import org.aspectj.weaver.AjAttribute;
@@ -93,6 +95,18 @@ public class InterTypeMethodDeclaration extends InterTypeDeclaration {
 		if (!Modifier.isStatic(declaredModifiers)) {
 			this.arguments = AstUtil.insert(AstUtil.makeFinalArgument("ajc$this_".toCharArray(), onTypeBinding), this.arguments);
 			binding.parameters = AstUtil.insert(onTypeBinding, binding.parameters);
+			
+			// If the inserted argument is a generic type, we should include the associated type variables to ensure
+			// the generated signature is correct (it will be checked by eclipse when this type is consumed in binary form).
+			TypeVariableBinding onTypeTVBs[] = onTypeBinding.typeVariables();
+			if (onTypeTVBs!=null && onTypeTVBs.length!=0) {
+				// The type parameters don't seem to need to be correct
+	//			TypeParameter tp = new TypeParameter();
+	//			tp.binding = tvb[0];
+	//			tp.name = tvb[0].sourceName;
+	//			this.typeParameters = AstUtil.insert(tp,this.typeParameters);
+				binding.typeVariables = AstUtil.insert(onTypeBinding.typeVariables(), binding.typeVariables);
+			}
 		}
 
 		super.resolve(upperScope);
@@ -0,0 +1,5 @@
+public class Clazz {
+  public static void main(String[] argv) {
+    Code.foo();
+  }
+}
@@ -0,0 +1,9 @@
+public class Clazz2 {
+  public static void main(String[] argv) {
+    Bar bs = new Bar();
+    String s = bs.bar("abc",null);
+  }
+}
+
+class Bar implements Code2.I<String> {
+}
@@ -0,0 +1,9 @@
+public class Clazz3 {
+  public static void main(String[] argv) {
+    Bar<String> bs = new Bar<String>();
+    String s = bs.bar("abc",null);
+  }
+}
+
+class Bar<A extends java.io.Serializable> implements Code3.I<A> {
+}
@@ -0,0 +1,9 @@
+public class Clazz4 {
+  public static void main(String[] argv) {
+    Bar<String> bs = new Bar<String>();
+    String s = bs.bar("abc",new Integer(4));
+  }
+}
+
+class Bar<A extends java.io.Serializable> implements Code4.I<A> {
+}
@@ -0,0 +1,17 @@
+import java.io.*;
+
+interface Persistable<ID extends Serializable> {
+
+}
+
+public aspect Code {
+
+  public interface I<ID extends Serializable> extends Persistable<ID> {
+  }
+
+  public static void foo() {}
+
+  public boolean I.equals(Persistable<?> that) {
+    return false;
+  }
+}
@@ -0,0 +1,17 @@
+import java.io.*;
+
+interface Persistable<ID extends Serializable> {
+
+}
+
+public aspect Code2 {
+
+  public interface I<ID extends Serializable> extends Persistable<ID> {
+  }
+
+  public static void foo() {}
+
+  public Z I<Z>.bar(Z foo, Persistable<?> that) {
+    return foo;
+  }
+}
@@ -0,0 +1,17 @@
+import java.io.*;
+
+interface Persistable<ID extends Serializable> {
+
+}
+
+public aspect Code3 {
+
+  public interface I<ID extends Serializable> extends Persistable<ID> {
+  }
+
+  public static void foo() {}
+
+  public Z I<Z>.bar(Z foo, Persistable<?> that) {
+    return foo;
+  }
+}
@@ -0,0 +1,17 @@
+import java.io.*;
+
+interface Persistable<ID extends Serializable> {
+
+}
+
+public aspect Code4 {
+
+  public interface I<ID extends Serializable> extends Persistable<ID> {
+  }
+
+  public static void foo() {}
+
+  public <T> Z I<Z>.bar(Z foo, T that) {
+    return foo;
+  }
+}
@@ -8,12 +8,14 @@ import junit.framework.TestSuite;
 
 import org.aspectj.systemtest.ajc170.AllTestsAspectJ170;
 import org.aspectj.systemtest.ajc171.AllTestsAspectJ171;
+import org.aspectj.systemtest.ajc172.AllTestsAspectJ172;
 
 public class AllTests17 {
 
 	public static Test suite() {
 		TestSuite suite = new TestSuite("AspectJ System Test Suite - 1.7");
 		// $JUnit-BEGIN$
+		suite.addTest(AllTestsAspectJ172.suite());
 		suite.addTest(AllTestsAspectJ171.suite());
 		suite.addTest(AllTestsAspectJ170.suite());
 		suite.addTest(AllTests16.suite());
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2012 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc172;
+
+import java.io.File;
+
+import junit.framework.Test;
+
+import org.aspectj.testing.XMLBasedAjcTestCase;
+
+/**
+ * @author Andy Clement
+ */ 
+public class Ajc172Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
+	
+	public void testInconsistentClassFile_pr389750() {
+		runTest("inconsistent class file");
+	}
+	
+	public void testInconsistentClassFile_pr389750_2() {
+		runTest("inconsistent class file 2");
+	}
+
+	public void testInconsistentClassFile_pr389750_3() {
+		runTest("inconsistent class file 3");
+	}
+
+	public void testInconsistentClassFile_pr389750_4() {
+		runTest("inconsistent class file 4");
+	}
+
+	// ---
+
+	public static Test suite() {
+		return XMLBasedAjcTestCase.loadSuite(Ajc172Tests.class);
+	}
+
+	@Override
+	protected File getSpecFile() {
+		return new File("../tests/src/org/aspectj/systemtest/ajc172/ajc172.xml");
+	}
+
+}
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc172;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTestsAspectJ172 {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("AspectJ 1.7.2 tests");
+		// $JUnit-BEGIN$
+		suite.addTest(Ajc172Tests.suite());
+		// $JUnit-END$
+		return suite;
+	}
+}
@@ -0,0 +1,29 @@
+<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>
+
+<suite>
+
+	<ajc-test dir="bugs172/pr389750" title="inconsistent class file">
+      <compile files="Code.aj" options="-1.5">
+      </compile>
+      <compile files="Clazz.java" options="-1.5"/>
+    </ajc-test>
+    
+	<ajc-test dir="bugs172/pr389750" title="inconsistent class file 2">
+      <compile files="Code2.aj" outjar="azpect.jar" options="-1.5">
+      </compile>
+      <compile files="Clazz2.java" aspectpath="azpect.jar" options="-1.5"/>
+    </ajc-test>
+    
+	<ajc-test dir="bugs172/pr389750" title="inconsistent class file 3">
+      <compile files="Code3.aj" outjar="azpect.jar" options="-1.5">
+      </compile>
+      <compile files="Clazz3.java" aspectpath="azpect.jar" options="-1.5"/>
+    </ajc-test>
+    
+	<ajc-test dir="bugs172/pr389750" title="inconsistent class file 4">
+      <compile files="Code4.aj" outjar="azpect.jar" options="-1.5">
+      </compile>
+      <compile files="Clazz4.java" aspectpath="azpect.jar" options="-1.5"/>
+    </ajc-test>
+
+</suite>

@@ -376,7 +376,9 @@ public class ValidateAtAspectJAnnotationsVisitor extends ASTVisitor {
 			pointcutExpression = getStringLiteralFor("value", adviceAnn, pcLocation);
 		try {
 			ISourceContext context = new EclipseSourceContext(unit.compilationResult, pcLocation[0]);
-			Pointcut pc = new PatternParser(pointcutExpression, context).parsePointcut();
+			PatternParser pp = new PatternParser(pointcutExpression, context);
+			Pointcut pc = pp.parsePointcut();
+			pp.checkEof();
 			FormalBinding[] bindings = buildFormalAdviceBindingsFrom(methodDeclaration);
 			pc.resolve(new EclipseScope(bindings, methodDeclaration.scope));
 			EclipseFactory factory = EclipseFactory.fromScopeLookupEnvironment(methodDeclaration.scope);
@@ -0,0 +1,61 @@
+package example;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import junit.framework.TestCase;
+
+import org.aspectj.lang.Aspects;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+
+public class Bug extends TestCase {
+
+        public void testAdviceMatch() {
+                TestImpl impl = new TestImpl();
+                impl.method();
+
+                assertEquals(0, Aspects.aspectOf(TestAtAspect.class).count);
+//                assertEquals(0, TestAspect.aspectOf().count);
+        }
+
+
+        @Retention(RetentionPolicy.RUNTIME)
+        @Target(ElementType.TYPE)
+        @Inherited
+        static @interface TestAnnotation {
+        }
+
+        @TestAnnotation
+        static interface TestInterface {
+                void method();
+        }
+
+        static class TestImpl implements TestInterface {
+//                @Override
+                public void method() {
+                }
+        }
+
+//        static aspect TestAspect {
+//                int count = 0;
+//
+//                before() : @target(example.Bug.TestAnnotation)+ && execution(* *(..)) {
+//                        count++;
+//                }
+//        }
+
+        @Aspect
+        static class TestAtAspect {
+                int count = 0;
+
+                @Before("@target(example.Bug.TestAnnotation)+ && execution(* *(..))") 
+                public void increment() {
+                        count++;
+                }
+        }
+}
+
@@ -28,6 +28,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc163Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testAtTargetPlus_pr255856() {
+		runTest("attarget with plus");
+	}
+
 	public void testNonNullAtArgs_pr257833() {
 		runTest("param annos and at args");
 	}
@@ -222,9 +222,15 @@
       </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs163/pr255856" title="attarget with plus">
+      <compile files="Bug.java" options="-1.5">
+      <message kind="error" text="unexpected pointcut element"/>
+      </compile>
+    </ajc-test>
+    
     <ajc-test dir="bugs163/pr253109" title="generic pointcuts - 5">
       <compile files="CodeFive.java" options="-1.5 -showWeaveInfo">
-        <message kind="weave" text="advised by around advice"/>
+        <message kind="weave" line="55" text="advised by around advice"/>
       </compile>
     </ajc-test>
 

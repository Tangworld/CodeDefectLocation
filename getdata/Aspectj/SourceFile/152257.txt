@@ -190,7 +190,7 @@ public class AjCompilerAdapter extends AbstractCompilerAdapter {
 				notifyRequestor();
 			} else {
 				weave();  // notification happens as weave progresses...
-				weaver.getWorld().flush();
+//		        weaver.getWorld().flush(); // pr152257
 			}
 		} catch (IOException ex) {
 			AbortCompilation ac = new AbortCompilation(null,ex);
@@ -346,7 +346,7 @@ public class AjPipeliningCompilerAdapter extends AbstractCompilerAdapter {
 				notifyRequestor();
 			} else {
 				// weave();  // notification happens as weave progresses...
-				weaver.getWorld().flush();
+//		        weaver.getWorld().flush(); // pr152257
 			}
 //		} catch (IOException ex) {
 //			AbortCompilation ac = new AbortCompilation(null,ex);
@@ -820,21 +820,20 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 	}
 
     //Bugzilla Bug 152257 - Incremental compiler doesn't handle exception declaration correctly
-/*	public void testPr152257() {
+	public void testPr152257() {
 		configureNonStandardCompileOptions("-XnoInline");
-		super.VERBOSE=true;
 		initialiseProject("PR152257");
 		build("PR152257");
 		List errors = MyTaskListManager.getErrorMessages();
 		assertTrue("Should be no warnings, but there are #"+errors.size(),errors.size()==0);
-//		checkWasFullBuild();
+		checkWasFullBuild();
 		alter("PR152257","inc1");
 		build("PR152257");
 		errors = MyTaskListManager.getErrorMessages();
 		assertTrue("Should be no warnings, but there are #"+errors.size(),errors.size()==0);
-//		checkWasntFullBuild();
+		checkWasntFullBuild();
 	}
-*/	
+
 
 	public void testPr128655() {
 		configureNonStandardCompileOptions("-showWeaveInfo");
@@ -1133,6 +1133,7 @@ public abstract class World implements Dump.INode {
     public void setAddSerialVerUID(boolean b) { addSerialVerUID=b;}
     public boolean isAddSerialVerUID() { return addSerialVerUID;}
 
+    /** be careful calling this - pr152257 */
 	public void flush() {
 		typeMap.expendableMap.clear();
 	}
@@ -0,0 +1,13 @@
+package test;
+
+import java.io.IOException;
+
+public class Main {
+        public void testMethod() throws IOException {
+                methodThatThrows();
+        }
+ 
+        public static void methodThatThrows() throws IOException {
+                System.out.println("Inside method that may throw an IOException");
+        }
+}
\ No newline at end of file
@@ -0,0 +1,13 @@
+// IOExceptionInjector.aj
+package test;
+
+import java.io.IOException;
+
+public aspect IOExceptionInjector {
+        pointcut faultInjection() : call(void methodThatThrows() throws
+IOException);
+
+        void around() throws IOException : faultInjection() {
+                throw new IOException("Exception injected by aspect."); 
+        }
+}
\ No newline at end of file
@@ -0,0 +1,13 @@
+package test;
+
+import java.io.IOException;
+
+public class Main {
+        public void testMethod() throws IOException {
+                methodThatThrows();
+        }
+
+        public static void methodThatThrows() throws IOException {
+                System.out.println("Inside method that may throw an IOException");
+        }
+}
\ No newline at end of file
@@ -819,6 +819,22 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasFullBuild(); // back to the source
 	}
 
+    //Bugzilla Bug 152257 - Incremental compiler doesn't handle exception declaration correctly
+/*	public void testPr152257() {
+		configureNonStandardCompileOptions("-XnoInline");
+		super.VERBOSE=true;
+		initialiseProject("PR152257");
+		build("PR152257");
+		List errors = MyTaskListManager.getErrorMessages();
+		assertTrue("Should be no warnings, but there are #"+errors.size(),errors.size()==0);
+//		checkWasFullBuild();
+		alter("PR152257","inc1");
+		build("PR152257");
+		errors = MyTaskListManager.getErrorMessages();
+		assertTrue("Should be no warnings, but there are #"+errors.size(),errors.size()==0);
+//		checkWasntFullBuild();
+	}
+*/	
 
 	public void testPr128655() {
 		configureNonStandardCompileOptions("-showWeaveInfo");

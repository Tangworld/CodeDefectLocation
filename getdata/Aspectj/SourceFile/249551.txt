@@ -27,11 +27,11 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
  */
 public class AjCompiler {
 
-	private String compilerId;
-	private ICompilerConfiguration compilerConfig;
-	private IBuildProgressMonitor monitor;
-	private IBuildMessageHandler handler;
-	private AjdeCoreBuildManager buildManager;
+	private final String compilerId;
+	private final ICompilerConfiguration compilerConfig;
+	private final IBuildProgressMonitor monitor;
+	private final IBuildMessageHandler handler;
+	private final AjdeCoreBuildManager buildManager;
 
 	/**
 	 * Creates a new AjCompiler for the given id, ICompilerConfiguration, IBuildProgressMonitor and IBuildMessageHandler. None of
@@ -89,6 +89,13 @@ public class AjCompiler {
 	}
 
 	/**
+	 * Cleanup the compiler instance, ready for removal.
+	 */
+	public void cleanup() {
+		buildManager.cleanup();
+	}
+
+	/**
 	 * Perform a full build.
 	 */
 	public void buildFresh() {
@@ -45,10 +45,10 @@ import org.aspectj.util.LangUtil;
  */
 public class AjdeCoreBuildManager {
 
-	private AjCompiler compiler;
+	private final AjCompiler compiler;
 	private AjdeCoreBuildNotifierAdapter buildEventNotifier = null;
-	private AjBuildManager ajBuildManager;
-	private IMessageHandler msgHandlerAdapter;
+	private final AjBuildManager ajBuildManager;
+	private final IMessageHandler msgHandlerAdapter;
 
 	public AjdeCoreBuildManager(AjCompiler compiler) {
 		this.compiler = compiler;
@@ -390,4 +390,8 @@ public class AjdeCoreBuildManager {
 	public Object getCustomMungerFactory() {
 		return ajBuildManager.getCustomMungerFactory();
 	}
+
+	public void cleanup() {
+		ajBuildManager.cleanup();
+	}
 }
@@ -873,7 +873,7 @@ public class AjBuildManager implements IOutputClassFileNameProvider, IBinarySour
 	public FileSystem getLibraryAccess(String[] classpaths, String[] filenames) {
 		String defaultEncoding = buildConfig.getOptions().defaultEncoding;
 		if ("".equals(defaultEncoding)) {//$NON-NLS-1$
-			defaultEncoding = null; //$NON-NLS-1$	
+			defaultEncoding = null;
 		}
 		// Bug 46671: We need an array as long as the number of elements in the classpath - *even though* not every
 		// element of the classpath is likely to be a directory. If we ensure every element of the array is set to
@@ -898,7 +898,7 @@ public class AjBuildManager implements IOutputClassFileNameProvider, IBinarySour
 
 		String defaultEncoding = buildConfig.getOptions().defaultEncoding;
 		if ("".equals(defaultEncoding)) {//$NON-NLS-1$
-			defaultEncoding = null; //$NON-NLS-1$
+			defaultEncoding = null;
 		}
 
 		for (int i = 0; i < fileCount; i++) {
@@ -971,8 +971,17 @@ public class AjBuildManager implements IOutputClassFileNameProvider, IBinarySour
 		// cleanup
 		org.aspectj.ajdt.internal.compiler.CompilerAdapter.setCompilerAdapterFactory(null);
 		AnonymousClassPublisher.aspectOf().setAnonymousClassCreationListener(null);
-		// environment.cleanup();
-		// environment = null;
+		if (!willReceiveAJDTCallbackForCleanup) {
+			environment.cleanup();
+			environment = null;
+		}
+	}
+
+	public static boolean willReceiveAJDTCallbackForCleanup = false;
+
+	public void cleanup() {
+		environment.cleanup();
+		environment = null;
 	}
 
 	/*

@@ -831,7 +831,7 @@ public class AsmManager implements IStructureModel {
 			throw new RuntimeException("target can't be null!");
 		if (type == null)
 			throw new RuntimeException("type can't be null!");
-		if (target.getKind().isSourceFile()) {
+		if (target.getKind().isSourceFile() || target.getKind().isFile()) { // isFile() covers pr263487
 			// @AJ aspect with broken relationship endpoint - we couldn't find
 			// the real
 			// endpoint (the declare parents or ITD or similar) so defaulted to
@@ -854,10 +854,16 @@ public class AsmManager implements IStructureModel {
 				return false;
 			return (target.getSourceLocation().getSourceFile().equals(type.getSourceLocation().getSourceFile()));
 		}
-		while (!containingType.getKind().isType()) {
-			// System.err.println("Checked: "+containingType.getKind()+" "+
-			// containingType);
-			containingType = containingType.getParent();
+		try {
+			while (!containingType.getKind().isType()) {
+				containingType = containingType.getParent();
+			}
+		} catch (Throwable t) {
+			// Example:
+			// java.lang.RuntimeException: Exception whilst walking up from target X.class kind=(file)
+			// hid=(=importProb/binaries<x(X.class)
+			throw new RuntimeException("Exception whilst walking up from target " + target.toLabelString() + " kind=("
+					+ target.getKind() + ") hid=(" + target.getHandleIdentifier() + ")", t);
 		}
 		return (type.equals(containingType));
 	}
@@ -275,22 +275,31 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		List l = getCompilerErrorMessages(p);
 		assertEquals("Unexpected compiler error", 0, l.size());
 	}
-/*
-	public void testImports() {
+
+	public void testImports_pr263487() {
 		AjdeInteractionTestbed.VERBOSE = true;
+		String p2 = "importProb2";
+		initialiseProject(p2);
+		build(p2);
+		checkWasFullBuild();
+
 		String p = "importProb";
 		initialiseProject(p);
 		build(p);
+		configureAspectPath(p, getProjectRelativePath(p2, "bin"));
 		checkWasFullBuild();
+		build(p);
+		build(p);
+		build(p);
 		alter(p, "inc1");
 		addProjectSourceFileChanged(p, getProjectRelativePath(p, "src/p/Code.java"));
-		addProjectSourceFileChanged(p, getProjectRelativePath(p, "src/q/Asp.java"));
+		// addProjectSourceFileChanged(p, getProjectRelativePath(p, "src/q/Asp.java"));
 		build(p);
 		checkWasntFullBuild();
 		List l = getCompilerErrorMessages(p);
 		assertEquals("Unexpected compiler error", 0, l.size());
 	}
-*/
+
 	public void testBuildingBrokenCode_pr263323() {
 		AjdeInteractionTestbed.VERBOSE = true;
 		String p = "brokenCode";
@@ -0,0 +1,3 @@
+package p;
+public class B {
+}
@@ -0,0 +1,9 @@
+package p;
+import q.Asp;
+import p.B;
+
+public class Code {
+  public void foo() throws IllegalAccessException {
+    throw new IllegalAccessException();
+  }
+}
@@ -0,0 +1,9 @@
+package q;
+import p.Code;
+
+public aspect Asp {
+  static int I = 5;
+//before():staticinitialization(Code){}
+}
+
+
@@ -0,0 +1,10 @@
+package p;
+
+import q.Asp;
+import p.B;
+
+public class Code {
+  public void foo() throws IllegalAccessException {
+    throw new IllegalAccessException();
+  }
+}
@@ -0,0 +1,9 @@
+package x;
+
+import java.util.ArrayList;
+
+public aspect X {
+//  before(): within(!X) {}
+declare soft : IllegalAccessException : execution( * *(..) );
+
+}

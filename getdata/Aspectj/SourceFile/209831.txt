@@ -134,6 +134,7 @@ public class ExactTypePattern extends TypePattern {
 	// true if (matchType instanceof this.type)
 	public FuzzyBoolean matchesInstanceof(ResolvedType matchType) {
 		// in our world, Object is assignable from anything
+		annotationPattern.resolve(matchType.getWorld());
 		if (type.equals(ResolvedType.OBJECT)) 
 		    return FuzzyBoolean.YES.and(annotationPattern.matches(matchType));
 
@@ -31,6 +31,8 @@ public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	public void testDecpRepetition_pr214559() { runTest("decp repetition problem");} // all code in one file
 	public void testDecpRepetition_pr214559_2() { runTest("decp repetition problem - 2");} // all code in one file, default package
 	public void testDecpRepetition_pr214559_3() { runTest("decp repetition problem - 3");} // across multiple files
+	public void testISEAnnotations_pr209831() { runTest("illegal state exception with annotations");}
+	public void testISEAnnotations_pr209831_2() { runTest("illegal state exception with annotations - 2");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -60,5 +60,17 @@
      <compile files="TestClass.java Interface1.java Interface1TestClass.java DeclareParentsPrecedenceTest.java TestAspect.java"/>
      <run class="DeclareParentsPrecedenceTest"/>
    </ajc-test>
+
+   <ajc-test dir="bugs160/pr209831" title="illegal state exception with annotations">
+     <compile options="-1.5 -showWeaveInfo" files="Test.java">
+       <message kind="weave" text="Join point 'exception-handler(void Test.&lt;catch&gt;(java.lang.Throwable))' in Type 'Test' (Test.java:34) advised by before advice from 'ExactAnnotationTypePatternBug' (Test.java:5)"/>
+     </compile>
+     <run class="Test"/>
+   </ajc-test>
+
+   <ajc-test dir="bugs160/pr209831" title="illegal state exception with annotations - 2">
+     <compile options="-Xlint:ignore -1.5 -showWeaveInfo" files="Test2.java"/>
+     <run class="Test2"/>
+   </ajc-test>
 
 </suite>
\ No newline at end of file
@@ -0,0 +1,40 @@
+import java.lang.annotation.*;
+
+ aspect ExactAnnotationTypePatternBug {
+
+  before(Throwable e) : handler(Throwable+)  && args(e) &&
+!args(@NoDefaultHandler Throwable+) {
+
+  }
+}
+
+
+@Retention(RetentionPolicy.CLASS)
+@Target(ElementType.PARAMETER)
+ @interface NoDefaultHandler {
+}
+
+public class Test {
+
+  /**
+   * @param args
+   */
+  public static void main(String[] args) {
+    // TODO Auto-generated method stub
+
+  }
+
+  private void th() throws Throwable {
+    throw new Throwable();
+  }
+
+  private void test() {
+    try {
+      th();
+    } catch (Throwable e) {
+
+    }
+  }
+
+}
+
@@ -0,0 +1,45 @@
+import java.lang.annotation.*;
+
+ aspect ExactAnnotationTypePatternBug {
+
+  before(Throwable e) : handler(Throwable+)  && args(e) &&
+!args(@NoDefaultHandler Throwable+) {
+
+  }
+}
+
+
+@Retention(RetentionPolicy.CLASS)
+//@Target(ElementType.PARAMETER)
+ @interface NoDefaultHandler {
+}
+
+@NoDefaultHandler
+class MyException extends Throwable {
+	
+}
+
+public class Test2 {
+
+  /**
+   * @param args
+   */
+  public static void main(String[] args) {
+    // TODO Auto-generated method stub
+
+  }
+
+  private void th() throws MyException {
+    throw new MyException();
+  }
+
+  private void test() {
+    try {
+      th();
+    } catch (MyException e) {
+
+    }
+  }
+
+}
+

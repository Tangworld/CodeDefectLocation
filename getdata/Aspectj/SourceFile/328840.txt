@@ -202,19 +202,34 @@ public class PatternParser {
 	}
 
 	public ISignaturePattern parseCompoundFieldSignaturePattern() {
-		ISignaturePattern atomicFieldSignaturePattern = parseMaybeParenthesizedFieldSignaturePattern();
+		int index = tokenSource.getIndex();
+		try {
+			ISignaturePattern atomicFieldSignaturePattern = parseMaybeParenthesizedFieldSignaturePattern();
 
-		while (isEitherAndOrOr()) {
-			if (maybeEat("&&")) {
-				atomicFieldSignaturePattern = new AndSignaturePattern(atomicFieldSignaturePattern,
-						parseMaybeParenthesizedFieldSignaturePattern());
+			while (isEitherAndOrOr()) {
+				if (maybeEat("&&")) {
+					atomicFieldSignaturePattern = new AndSignaturePattern(atomicFieldSignaturePattern,
+							parseMaybeParenthesizedFieldSignaturePattern());
+				}
+				if (maybeEat("||")) {
+					atomicFieldSignaturePattern = new OrSignaturePattern(atomicFieldSignaturePattern,
+							parseMaybeParenthesizedFieldSignaturePattern());
+				}
 			}
-			if (maybeEat("||")) {
-				atomicFieldSignaturePattern = new OrSignaturePattern(atomicFieldSignaturePattern,
-						parseMaybeParenthesizedFieldSignaturePattern());
+			return atomicFieldSignaturePattern;
+		} catch (ParserException e) {
+			// fallback in the case of a regular single field signature pattern that just happened to start with '('
+			int nowAt = tokenSource.getIndex();
+			tokenSource.setIndex(index);
+			try {
+				ISignaturePattern fsp = parseFieldSignaturePattern();
+				return fsp;
+			} catch (Exception e2) {
+				tokenSource.setIndex(nowAt);
+				// throw the original
+				throw e;
 			}
 		}
-		return atomicFieldSignaturePattern;
 	}
 
 	private boolean isEitherAndOrOr() {
@@ -781,7 +796,7 @@ public class PatternParser {
 			return p;
 		}
 		int startPos = tokenSource.peek().getStart();
-		if (ap.start!=-1) {
+		if (ap.start != -1) {
 			startPos = ap.start;
 		}
 		TypePattern p = parseSingleTypePattern(insideTypeParameters);
@@ -0,0 +1,33 @@
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+
+public aspect Wibble {
+
+	declare @field: (@III *) Song.*: @Foo;
+	
+	before(): get((@III *) Song.*) {
+		System.out.println();
+	} 
+  public static void main(String []argv) throws Exception {
+    System.out.println(Song.class.getDeclaredField("i").getAnnotation(Foo.class));
+  }
+}
+
+@III
+class XX {
+	
+}
+class Song {
+
+	XX i;
+	
+	void foo() {
+		System.out.println(i);
+	}
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@interface III {}
+@Retention(RetentionPolicy.RUNTIME)
+@interface Foo {}
@@ -9,6 +9,7 @@ import junit.framework.TestSuite;
 import org.aspectj.systemtest.ajc160.AllTestsAspectJ160;
 import org.aspectj.systemtest.ajc161.AllTestsAspectJ161;
 import org.aspectj.systemtest.ajc1610.AllTestsAspectJ1610;
+import org.aspectj.systemtest.ajc1611.AllTestsAspectJ1611;
 import org.aspectj.systemtest.ajc162.AllTestsAspectJ162;
 import org.aspectj.systemtest.ajc163.AllTestsAspectJ163;
 import org.aspectj.systemtest.ajc164.AllTestsAspectJ164;
@@ -33,6 +34,7 @@ public class AllTests16 {
 		suite.addTest(AllTestsAspectJ167.suite());
 		suite.addTest(AllTestsAspectJ169.suite());
 		suite.addTest(AllTestsAspectJ1610.suite());
+		suite.addTest(AllTestsAspectJ1611.suite());
 		suite.addTest(AllTests15.suite());
 		// $JUnit-END$
 		return suite;
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc1611;
+
+import java.io.File;
+
+import junit.framework.Test;
+
+import org.aspectj.testing.XMLBasedAjcTestCase;
+
+/**
+ * @author Andy Clement
+ */
+public class Ajc1611Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
+
+	public void testDeclareField_328840() {
+		runTest("pr328840");
+	}
+
+	// ---
+
+	public static Test suite() {
+		return XMLBasedAjcTestCase.loadSuite(Ajc1611Tests.class);
+	}
+
+	@Override
+	protected File getSpecFile() {
+		return new File("../tests/src/org/aspectj/systemtest/ajc1611/ajc1611.xml");
+	}
+
+}
\ No newline at end of file
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Contributors
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andy Clement - initial API and implementation
+ *******************************************************************************/
+package org.aspectj.systemtest.ajc1611;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTestsAspectJ1611 {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("AspectJ 1.6.11 tests");
+		// $JUnit-BEGIN$
+		suite.addTest(Ajc1611Tests.suite());
+		// $JUnit-END$
+		return suite;
+	}
+}
@@ -0,0 +1,16 @@
+<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>
+
+<suite>
+
+  <ajc-test dir="bugs1611/pr328840" title="pr328840">
+    <compile files="Wibble.aj" options="-1.5 -showWeaveInfo">
+    <message kind="weave" text="Join point 'field-get(XX Song.i)' in Type 'Song' (Wibble.aj:26) advised by before advice from 'Wibble' (Wibble.aj:9)"/>
+    <message kind="weave" text="'XX i' of type 'Song' (Wibble.aj) is annotated with @Foo field annotation from 'Wibble' (Wibble.aj:7)"/>
+    </compile>
+    <run class="Wibble">
+    <stdout>
+    <line text="@Foo()"/>
+    </stdout></run>
+  </ajc-test>
+  
+</suite>
\ No newline at end of file

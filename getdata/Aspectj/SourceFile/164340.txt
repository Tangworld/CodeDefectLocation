@@ -678,7 +678,9 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 			startIndex = ((FieldDeclaration)astNode).declarationSourceStart;
 		} else if (astNode instanceof TypeDeclaration) {
 			startIndex = ((TypeDeclaration)astNode).declarationSourceStart;
-		} 
+		} else if (astNode instanceof ConstructorDeclaration) {
+			startIndex = ((ConstructorDeclaration)astNode).declarationSourceStart;
+		}
 
 		if (startIndex == -1) {
 			return null;
@@ -795,6 +797,7 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 		formatter.setParameters(constructorDeclaration, peNode);
 		peNode.setModifiers(constructorDeclaration.modifiers);
 		peNode.setSourceSignature(genSourceSignature(constructorDeclaration));
+		peNode.setFormalComment(generateJavadocComment(constructorDeclaration));
 
 		// Fix to enable us to anchor things from ctor nodes
 		if (constructorDeclaration.binding != null) {
@@ -0,0 +1,15 @@
+public class C {
+
+	/**
+	 * This is a constructor
+	 */
+	public C() {
+	}
+
+	/**
+	 * This is method foo
+	 */
+	public void foo() {
+	}
+
+}
@@ -23,6 +23,15 @@ import org.aspectj.weaver.bcel.Utility;
 
 public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+
+  public void testFormalCommentsAreSetForConstructorIPEs_pr164340() {
+	  runTest("formal comments are set for constructor ipes");
+	  IHierarchy top = AsmManager.getDefault().getHierarchy();
+	  IProgramElement ipe = top.findElementForLabel(top.getRoot(),
+			  IProgramElement.Kind.CONSTRUCTOR,"C()");
+	  assertNotNull("expected formal comment to be non null but" +
+		  		" found that it was null",ipe.getFormalComment());
+  }
   //public void testGenericsProblem_pr151978() { runTest("generics problem");}
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
@@ -15,6 +15,10 @@
 	  </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs153/pr164340" title="formal comments are set for constructor ipes">
+      <compile files="C.java" options="-emacssym -XjavadocsInModel"/>
+    </ajc-test>
+
     <ajc-test dir="bugs153/pr162135" title="bcexception in annotation style around advice">
       <compile files="Foo.java" options="-1.5"/>
       <run class="Foo"/>
@@ -0,0 +1,15 @@
+public class C {
+
+	/**
+	 * This is a constructor
+	 */
+	public C() {
+	}
+
+	/**
+	 * This is method foo
+	 */
+	public void foo() {
+	}
+
+}
@@ -156,4 +156,26 @@ public class BugTests extends AjdocTestCase {
 				"appear in ajdoc output but it did not", 
 				AjdocOutputChecker.containsString(htmlFile, goo));
 	}
+	
+	/**
+	 * Comments for a constructor should be included in the ajdoc output
+	 */
+	public void testPr164340() throws Exception {
+		initialiseProject("pr164340");
+		File[] files = {new File(getAbsoluteProjectDir() + "/C.java")};
+		runAjdoc(files);
+	    File htmlFile = new File(getAbsolutePathOutdir() + "/C.html");
+		if (htmlFile == null || !htmlFile.exists()) {
+			fail("couldn't find " + htmlFile.getAbsolutePath() + 
+					" (ajc aborted: " + Main.hasAborted() + ")");
+		}
+		String methodDesc = "This is method foo";
+		String constDesc = "This is a constructor";
+		assertTrue("expected method description 'This is method foo' to appear" +
+				" in ajdoc output but it did not", 
+				AjdocOutputChecker.containsString(htmlFile, methodDesc));
+		assertTrue("expected constructor description 'This is a constructor' to " +
+				"appear in ajdoc output but it did not", 
+				AjdocOutputChecker.containsString(htmlFile, constDesc));
+	}
 }

@@ -228,13 +228,6 @@ public class AjLookupEnvironment extends LookupEnvironment implements AnonymousC
         for (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {
             units[i].scope.checkParameterizedTypes();
         }
-        
-		for (int i = lastCompletedUnitIndex +1; i<=lastUnitIndex; i++) {
-			SourceTypeBinding[] b = units[i].scope.topLevelTypes;
-            for (int j = 0; j < b.length; j++) {
-            	verifyAnyTypeParametersMeetBounds(b[j]);
-            }
-		}
 
         for (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {
             SourceTypeBinding[] b = units[i].scope.topLevelTypes;
@@ -36,6 +36,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayInitializer;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.MemberValuePair;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.NameReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.NormalAnnotation;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation;
@@ -45,6 +46,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.aspectj.org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding;
+import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
@@ -59,6 +61,7 @@ import org.aspectj.weaver.AnnotationTargetKind;
 import org.aspectj.weaver.AnnotationValue;
 import org.aspectj.weaver.AnnotationX;
 import org.aspectj.weaver.ArrayAnnotationValue;
+import org.aspectj.weaver.BCException;
 import org.aspectj.weaver.EnumAnnotationValue;
 import org.aspectj.weaver.ReferenceType;
 import org.aspectj.weaver.ResolvedMember;
@@ -171,8 +174,17 @@ public class EclipseSourceType extends AbstractReferenceTypeDelegate {
 			char[] sig = ans[i].resolvedType.signature();
 			if (CharOperation.equals(pointcutSig,sig)) {
 				if (ans[i].memberValuePairs().length==0) return ""; // empty pointcut expression
-				StringLiteral sLit = ((StringLiteral)(ans[i].memberValuePairs()[0].value));
-				return new String(sLit.source());
+				Expression expr = ans[i].memberValuePairs()[0].value;
+				if (expr instanceof StringLiteral) {
+					StringLiteral sLit = ((StringLiteral)expr);
+					return new String(sLit.source());
+				} else if (expr instanceof NameReference && (((NameReference)expr).binding instanceof FieldBinding)) {
+					Binding b = ((NameReference)expr).binding;
+					Constant c = ((FieldBinding)b).constant;
+					return c.stringValue();
+				} else {
+					throw new BCException("Do not know how to recover pointcut definition from "+expr+" (type "+expr.getClass().getName()+")");
+				}
 			}
 		}
 		return "";
@@ -2,3 +2,8 @@ interface A {}
 interface B {}
 abstract aspect Parent< V extends A > {}
 abstract aspect Child< V extends A & B > extends Parent< V > {}
+
+public class Complex {
+  public static void main(String [] argv) {
+  }
+}
@@ -0,0 +1,15 @@
+interface A {}
+interface B {}
+abstract aspect Parent< V extends A > {}
+abstract aspect Child< V extends A & B > extends Parent< V > {}
+
+aspect Foo extends Child<AExtension> {}
+
+class AImpl implements A {}
+
+class AExtension extends AImpl implements B {}
+
+public class Complex2 {
+  public static void main(String [] argv) {
+  }
+}
@@ -23,8 +23,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1
-	//public void testComplexBoundsGenericAspect_pr199130_1() { runTest("complex bounds on generic aspect - 1");}
-	//public void testComplexBoundsGenericAspect_pr199130_2() { runTest("complex bounds on generic aspect - 2");}
+//	public void testFinalStringsAnnotationPointcut_pr174385() { runTest("static strings in annotation pointcuts");}
+	public void testComplexBoundsGenericAspect_pr199130_1() { runTest("complex bounds on generic aspect - 1");}
+	public void testComplexBoundsGenericAspect_pr199130_2() { runTest("complex bounds on generic aspect - 2");}
+	public void testComplexBoundsGenericAspect_pr199130_3() { runTest("complex bounds on generic aspect - 3");}
 	public void testGenericAspectAroundAdvice_pr226201() { runTest("generic aspect around advice");}
 	public void testCrazyGenericsInnerTypes_pr235829() { runTest("crazy generics and inner types");}
 	public void testAnnotationExposureGenerics_pr235597() { runTest("annotation exposure and generics");}
@@ -3,7 +3,12 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
-	<ajc-test dir="bugs161/pr199130" title="complex bounds on generic aspect - 1">
+	<ajc-test dir="bugs161/pr174385" title="static strings in annotation pointcuts">
+    	<compile files="StaticFinalStringInPointcutAspect.java" options="-1.5"/>
+    	<run class="bug.StaticFinalStringInPointcutAspect"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs161/pr199130" title="complex bounds on generic aspect - 1">
     	<compile files="Simple.java" options="-1.5"/>
     	<run class="Simple">
     	</run>
@@ -15,18 +20,22 @@
     	</run>
     </ajc-test>
 
+	<ajc-test dir="bugs161/pr199130" title="complex bounds on generic aspect - 3">
+    	<compile files="Complex2.java" options="-1.5"/>
+    	<run class="Complex2">
+    	</run>
+    </ajc-test>
+
 	<ajc-test dir="bugs161/pr226201" title="generic aspect around advice">
     	<compile files="IntAspTest.java" options="-1.5"/>
     	<run class="IntAspTest">
     	</run>
     </ajc-test>
-    
 
 	<ajc-test dir="bugs161/pr235829" title="crazy generics and inner types">
     	<compile files="Main.java a/Adapter.java a/b/Adapter.java" options="-1.5"/>
     	<run class="Main"/>
-    </ajc-test>
-    
+    </ajc-test>    
 
     <ajc-test dir="bugs161/pr235597" title="annotation exposure and generics">
         <compile files="AnnotationTest1.java SomeAnnotation.java SomeAspect.java" options="-1.5"/>
@@ -0,0 +1,4 @@
+interface A {}
+interface B {}
+abstract aspect Parent< V extends A > {}
+abstract aspect Child< V extends A & B > extends Parent< V > {}
@@ -0,0 +1,12 @@
+interface A {}
+abstract aspect Parent< T > {
+  public void m(T i) {}
+}
+abstract aspect Child< V extends A > extends Parent< V > {
+  public void n(V i) {}
+}
+
+public class Simple {
+  public static void main(String []argv) {
+  }
+}
@@ -23,6 +23,8 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1
+	//public void testComplexBoundsGenericAspect_pr199130_1() { runTest("complex bounds on generic aspect - 1");}
+	//public void testComplexBoundsGenericAspect_pr199130_2() { runTest("complex bounds on generic aspect - 2");}
 	public void testGenericAspectAroundAdvice_pr226201() { runTest("generic aspect around advice");}
 	public void testCrazyGenericsInnerTypes_pr235829() { runTest("crazy generics and inner types");}
 	public void testAnnotationExposureGenerics_pr235597() { runTest("annotation exposure and generics");}
@@ -3,6 +3,18 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
+	<ajc-test dir="bugs161/pr199130" title="complex bounds on generic aspect - 1">
+    	<compile files="Simple.java" options="-1.5"/>
+    	<run class="Simple">
+    	</run>
+    </ajc-test>
+    
+	<ajc-test dir="bugs161/pr199130" title="complex bounds on generic aspect - 2">
+    	<compile files="Complex.java" options="-1.5"/>
+    	<run class="Complex">
+    	</run>
+    </ajc-test>
+    
 	<ajc-test dir="bugs161/pr226201" title="generic aspect around advice">
     	<compile files="IntAspTest.java" options="-1.5"/>
     	<run class="IntAspTest">

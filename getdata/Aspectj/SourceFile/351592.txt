@@ -2462,7 +2462,7 @@ public class BcelShadow extends Shadow {
 
 		ret.append(Utility.createInvoke(fact, callbackMethod));
 		ret.append(Utility.createConversion(fact, callbackMethod.getReturnType(),
-				BcelWorld.makeBcelType(munger.getSignature().getReturnType())));
+				BcelWorld.makeBcelType(munger.getSignature().getReturnType()), world.isInJava5Mode()));
 		return ret;
 	}
 
@@ -2632,7 +2632,7 @@ public class BcelShadow extends Shadow {
 			ret.append(Utility.createConversion(fact, callbackMethod.getReturnType(), Type.OBJECT));
 		}
 		ret.append(Utility.createConversion(fact, callbackMethod.getReturnType(),
-				BcelWorld.makeBcelType(munger.getSignature().getReturnType())));
+				BcelWorld.makeBcelType(munger.getSignature().getReturnType()), world.isInJava5Mode()));
 
 		return ret;
 
@@ -25,6 +25,14 @@ public class Ajc1612Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	// runTest("anno copying");
 	// }
 
+	public void testGenericsIssue_pr351592() {
+		runTest("generics issue");
+	}
+
+	public void testGenericsIssue_pr351592_2() {
+		runTest("generics issue - 2");
+	}
+
 	public void testGenericsNpe_pr350800() {
 		runTest("generics npe");
 	}
@@ -2,6 +2,16 @@
 
 <suite>
 
+<ajc-test dir="bugs1612/pr351592" title="generics issue">
+<compile files="Test.java Fib.java FibCaching.aj Caching.aj" options="-1.5"/>
+<run class="caching.Test"/>
+</ajc-test>
+
+<ajc-test dir="bugs1612/pr351592" title="generics issue - 2">
+<compile files="Test.java Fib.java FibCaching.aj Caching.aj" options="-1.5"/>
+<run class="caching.Test"/>
+</ajc-test>
+
 <ajc-test dir="bugs1612/pr350800" title="generics npe">
 <compile files="AbstractAdapter.java AbstractProbingAspect.java Adapter.java ProbingAspect.java" options="-1.5"/>
 <!--  run class="com.example.MyAspectTest" -->
@@ -0,0 +1,20 @@
+package caching;
+
+import java.util.HashMap;
+import java.util.Map;
+  
+public  aspect Caching {
+	private Map<Integer,Integer> cache = new HashMap<Integer,Integer>();
+
+	Integer around(Integer a): execution(* Fib.calc*(*)) && args(a) {
+		if(cache.containsKey(a)){
+			System.out.println("Using cached value for: " + a);
+			return cache.get(a);
+		}
+		else {
+			Integer result = proceed(a);
+			cache.put(a, result);
+			return result;
+		}
+	}
+}
@@ -0,0 +1,12 @@
+package caching;
+
+public class Fib {
+	public static int calc(int n){
+		if (n < 2) return 1;
+		return calc(n-1) + calc(n-2);
+	}
+	public static Integer calc2(Integer n){
+		if (n < 2) return 1;
+		return calc2(n-1) + calc2(n-2);
+	}
+}
@@ -0,0 +1,8 @@
+//package caching;
+//
+//public aspect FibCaching extends Caching<Integer,Integer> {
+//	
+//	pointcut cached() : execution(Integer Fib.calc(Integer));
+//	
+//}
+
@@ -0,0 +1,9 @@
+package caching;
+
+public class Test {
+
+	public static void main(String[] args) {
+		System.out.println(Fib.calc(30));
+		System.out.println(Fib.calc2(30));
+	}
+}
@@ -0,0 +1,22 @@
+package caching;
+
+import java.util.HashMap;
+import java.util.Map;
+  
+public abstract aspect Caching<K,V> {
+	private Map<K,V> cache = new HashMap<K,V>();
+
+	abstract pointcut cached();
+
+	V around(K a): cached() && args(a) {
+		if(cache.containsKey(a)){
+			System.out.println("Using cached value for: " + a);
+			return cache.get(a);
+		}
+		else {
+			V result = proceed(a);
+			cache.put(a, result);
+			return result;
+		}
+	}
+}
@@ -0,0 +1,8 @@
+package caching;
+
+public class Fib {
+	public static int calc(int n){
+		if (n < 2) return 1;
+		return calc(n-1) + calc(n-2);
+	}
+}
@@ -0,0 +1,8 @@
+package caching;
+
+public aspect FibCaching extends Caching<Integer,Integer> {
+	
+	pointcut cached() : execution(int Fib.calc(int));
+	
+}
+
@@ -0,0 +1,8 @@
+package caching;
+
+public class Test {
+
+	public static void main(String[] args) {
+		System.out.println(Fib.calc(30));
+	}
+}

@@ -186,6 +186,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
             }
 
             String resourcePath = System.getProperty("org.aspectj.weaver.loadtime.configuration",AOP_XML);
+            trace.event("parseDefinitions",this,resourcePath);
     		StringTokenizer st = new StringTokenizer(resourcePath,";");
 
     		while(st.hasMoreTokens()){
@@ -34,14 +34,6 @@ public abstract class AbstractTrace implements Trace {
 
 	public abstract void exit(String methodName, Throwable th);
 
-	public void event(String methodName) {
-		throw new UnsupportedOperationException("event");
-	}
-
-	public void event(String methodName, Object thiz, Object[] args) {
-		throw new UnsupportedOperationException("event");
-	}
-	
 	/*
 	 * Convenience methods
 	 */
@@ -61,6 +53,10 @@ public abstract class AbstractTrace implements Trace {
 		exit(methodName,new Boolean(b));
 	}
 
+	public void event (String methodName, Object thiz, Object arg) {
+		event(methodName,thiz,new Object[] { arg });
+	}
+
 	public void warn(String message) {
 		warn(message,null);
 	}
@@ -54,6 +54,18 @@ public class CommonsTrace extends AbstractTrace {
 		}
 	}
 
+	public void event(String methodName, Object thiz, Object[] args) {
+		if (log.isDebugEnabled()) {
+			log.debug(formatMessage("-", className, methodName, thiz, args));
+		}
+	}
+
+	public void event(String methodName) {
+		if (log.isDebugEnabled()) {
+			log.debug(formatMessage("-", className, methodName, null, null));
+		}
+	}
+
 	public boolean isTraceEnabled () {
 		return log.isDebugEnabled();
 	}
@@ -55,6 +55,19 @@ public class DefaultTrace extends AbstractTrace {
 			println(formatMessage("<",tracedClass.getName(),methodName,th, null));
 		}
 	}
+	
+	public void event(String methodName, Object thiz, Object[] args) {
+		if (traceEnabled) {
+			println(formatMessage("-",tracedClass.getName(),methodName,thiz, args));
+		}
+	}
+
+	public void event(String methodName) {
+		if (traceEnabled) {
+			println(formatMessage("-",tracedClass.getName(),methodName,null,null));
+		}
+	}
+
 	public void debug (String message) {
 		println(formatMessage("?",message,null));
 	}
@@ -51,6 +51,8 @@ public interface Trace {
 	public void enter (String methodName, Object thiz, boolean z);
 
 	public void exit (String methodName, boolean b);
+
+	public void event (String methodName, Object thiz, Object arg);
 
 	public boolean isTraceEnabled ();
 
@@ -73,6 +73,18 @@ public abstract class AbstractTraceTest extends TestCase {
 		trace.exit("testExit");
 	}
 
+	public void testEvent() {
+		trace.event("testEvent");
+	}
+
+	public void testEventWithThisAndArgs() {
+		trace.event("testEventWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
+	}
+
+	public void testEventWithThisAndArg() {
+		trace.event("testEventWithThisAndArg",this,"arg1");
+	}
+
 	public void testDebug() {
 		trace.debug("debug");
 	}
@@ -56,6 +56,21 @@ public class Jdk14Trace extends AbstractTrace {
 		}
 	}
 
+	public void event(String methodName, Object thiz, Object[] args) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.logp(Level.FINER,name,methodName,"EVENT",formatObj(thiz));
+			if (args != null && logger.isLoggable(Level.FINER)) {
+				logger.logp(Level.FINER,name,methodName,"EVENT",args);
+			}			
+		}
+	}
+
+	public void event(String methodName) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.logp(Level.FINER,name,methodName,"EVENT");
+		}
+	}
+
 	public boolean isTraceEnabled() {
 		return logger.isLoggable(Level.FINER);
 	}
@@ -36,7 +36,7 @@ public class Aj implements ClassPreProcessor {
 
 
 	public Aj(IWeavingContext context){
-		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] {context});
+		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] {context, getClass().getClassLoader()});
 		this.weavingContext = context;
 		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
@@ -57,15 +57,15 @@ public class Aj implements ClassPreProcessor {
      * @return weaved bytes
      */
     public byte[] preProcess(String className, byte[] bytes, ClassLoader loader) {
-		if (trace.isTraceEnabled()) trace.enter("preProcess",this,new Object[] {className,bytes,loader});
 
         //TODO AV needs to doc that
         if (loader == null || className == null) {
             // skip boot loader or null classes (hibernate)
-    		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
             return bytes;
         }
 
+        if (trace.isTraceEnabled()) trace.enter("preProcess",this,new Object[] {className, bytes, loader, Thread.currentThread().getContextClassLoader()});
+
         try {
         	synchronized (loader) {
                 WeavingAdaptor weavingAdaptor = WeaverContainer.getWeaver(loader, weavingContext);
@@ -73,15 +73,16 @@ public class Aj implements ClassPreProcessor {
             		if (trace.isTraceEnabled()) trace.exit("preProcess");
                 	return bytes;
                 }
-        		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
-                return weavingAdaptor.weaveClass(className, bytes);
+                byte[] newBytes = weavingAdaptor.weaveClass(className, bytes);
+        		if (trace.isTraceEnabled()) trace.exit("preProcess",newBytes);
+                return newBytes;
 			}
-        } catch (Exception t) {
-    		trace.error("preProcess",t);
+        } catch (Exception ex) {
+    		trace.error("preProcess",ex);
             //FIXME AV wondering if we should have the option to fail (throw runtime exception) here
             // would make sense at least in test f.e. see TestHelper.handleMessage()
-            t.printStackTrace();
-    		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
+            ex.printStackTrace();
+    		if (trace.isTraceEnabled()) trace.exit("preProcess",ex);
             return bytes;
         }
     }
@@ -25,6 +25,8 @@ import org.aspectj.asm.AsmManager;
 import org.aspectj.weaver.patterns.CflowPointcut;
 import org.aspectj.weaver.patterns.DeclareParents;
 import org.aspectj.weaver.patterns.IVerificationRequired;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 /**
  * This holds on to all CrosscuttingMembers for a world.  It handles 
@@ -50,8 +52,14 @@ public class CrosscuttingMembersSet {
 
 	private List /*IVerificationRequired*/ verificationList = null; // List of things to be verified once the type system is 'complete'
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(CrosscuttingMembersSet.class);
+	
 	public CrosscuttingMembersSet(World world) {
+		trace.enter("<init>",this,world);
+
 		this.world = world;
+
+		trace.exit("<init>");
 	}
 
 	public boolean addOrReplaceAspect(ResolvedType aspectType) {
@@ -63,6 +71,8 @@ public class CrosscuttingMembersSet {
 	 * 			XXX for efficiency we will need a richer representation than this
 	 */
 	public boolean addOrReplaceAspect(ResolvedType aspectType, boolean inWeavingPhase) {
+		trace.enter("addOrReplaceAspect",this,new Object[] {aspectType,new Boolean(inWeavingPhase)});
+		
 		boolean change = false;
 		CrosscuttingMembers xcut = (CrosscuttingMembers)members.get(aspectType);
 		if (xcut == null) {
@@ -92,6 +102,8 @@ public class CrosscuttingMembersSet {
 			change = change || ancestorChange;
 		}
 		changedSinceLastReset = changedSinceLastReset || change;
+
+		trace.exit("addOrReplaceAspect",change);
 		return change;
 	}
 
@@ -22,6 +22,7 @@ import java.util.Map;
 import org.aspectj.apache.bcel.classfile.GenericSignatureParser;
 import org.aspectj.apache.bcel.classfile.Signature;
 import org.aspectj.apache.bcel.classfile.Signature.ClassSignature;
+import org.aspectj.weaver.tools.Traceable;
 
 /**
  * A UnresolvedType represents a type to the weaver. It has a basic signature that knows 
@@ -93,7 +94,7 @@ import org.aspectj.apache.bcel.classfile.Signature.ClassSignature;
  * The wildcard ? extends Foo has signature +LFoo;
  * The wildcard ? super Foo has signature -LFoo;
  */
-public class UnresolvedType implements TypeVariableDeclaringElement {
+public class UnresolvedType implements Traceable, TypeVariableDeclaringElement {
 
 	// common types referred to by the weaver
     public static final UnresolvedType[] NONE         = new UnresolvedType[0];
@@ -917,6 +918,10 @@ public class UnresolvedType implements TypeVariableDeclaringElement {
 		}
 		return null;
 	}
+
+	public String toTraceString() {
+		return getClass().getName() + "[" + getName() + "]";
+	}
 
 }
 
@@ -1324,6 +1324,8 @@ public class BcelWeaver implements IWeaver {
 
     private void weaveAndNotify(UnwovenClassFile classFile, BcelObjectType classType,
     		                    IWeaveRequestor requestor) throws IOException {
+    	trace.enter("weaveAndNotify",this,new Object[] {classFile,classType,requestor});
+    	
     	ContextToken tok = CompilationAndWeavingContext.enteringPhase(CompilationAndWeavingContext.WEAVING_TYPE, classType.getResolvedTypeX().getName());
     	LazyClassGen clazz = weaveWithoutDump(classFile,classType);
     	classType.finishedWith();
@@ -1338,6 +1340,8 @@ public class BcelWeaver implements IWeaver {
 		}
 		classType.weavingCompleted();
 		CompilationAndWeavingContext.leavingPhase(tok);
+		
+		trace.exit("weaveAndNotify");
     }
 
 	/** helper method - will return NULL if the underlying delegate is an EclipseSourceType and not a BcelObjectType */
@@ -37,5 +37,9 @@ public class TracingTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	public void testTraceMessages () {
   		runTest("Trace messages");
 	}
+	
+	public void testTraceEverything () {
+  		runTest("Trace everything");
+	}
 
 }
@@ -57,4 +57,16 @@
             </stderr>
         </ant>
     </ajc-test>
+
+	<ajc-test dir="tracing" title="Trace everything" keywords="tracing">
+        <compile
+        	files="HelloWorld.java"
+        />
+        <compile files="Aspect.aj" options="-outxml"/>
+		<ant file="ant.xml" target="Trace everything" verbose="true">
+        	<stdout>
+                <line text="Hello World!"/>
+            </stdout>
+        </ant>
+    </ajc-test>
 </suite>
@@ -0,0 +1,5 @@
+public aspect Aspect {
+	before () : within(HelloWorld) {
+		System.err.println(thisJoinPoint);
+	}
+}
\ No newline at end of file
@@ -37,4 +37,17 @@
         </java>
     </target>
 
+    <target name="Trace everything">
+        <java fork="yes" classname="HelloWorld" failonerror="yes">
+            <classpath refid="aj.path"/>
+            <jvmarg value="-Dorg.aspectj.tracing.enabled=true"/>
+            <jvmarg value="-Dorg.aspectj.tracing.factory=default"/>
+            <jvmarg value="-Dorg.aspectj.tracing.messages=true"/>
+<!--            <jvmarg value="-verbose:class"/>-->
+            <!-- use META-INF/aop.xml style -->
+            <jvmarg value="-javaagent:${aj.root}/lib/test/loadtime5.jar"/>
+<!--            <jvmarg line="${jdwp}"/>-->
+        </java>
+    </target>
+
 </project>
@@ -11,7 +11,9 @@
 package org.aspectj.weaver.tools;
 
 import java.io.File;
+import java.lang.reflect.Array;
 import java.text.SimpleDateFormat;
+import java.util.Collection;
 import java.util.Date;
 
 public abstract class AbstractTrace implements Trace {
@@ -126,6 +128,12 @@ public abstract class AbstractTrace implements Trace {
 			    || obj instanceof File
 			    || obj instanceof StringBuffer
 		    ) return obj;
+		else if (obj.getClass().isArray()) {
+			return formatArray(obj);
+		}
+		else if (obj instanceof Collection) {
+			return formatCollection((Collection)obj);
+		}
 		else try {
 
 			/* Classes can provide an alternative implementation of toString() */
@@ -142,6 +150,14 @@ public abstract class AbstractTrace implements Trace {
 			return obj.getClass().getName();
 		}
 	}
+	
+	protected String formatArray (Object obj) {
+		return obj.getClass().getComponentType().getName() + "[" + Array.getLength(obj) + "]"; 
+	}
+	
+	protected String formatCollection (Collection c) {
+		return c.getClass().getName() + "(" + c.size() + ")"; 
+	}
 
 	/** 
 	 * Format arguments into a comma separated list
@@ -10,12 +10,15 @@
  *******************************************************************************/
 package org.aspectj.weaver;
 
+import java.util.ArrayList;
+
 import junit.framework.TestCase;
 
 import org.aspectj.weaver.tools.AbstractTrace;
 import org.aspectj.weaver.tools.DefaultTrace;
+import org.aspectj.weaver.tools.Traceable;
 
-public class AbstractTraceTest extends TestCase {
+public abstract class AbstractTraceTest extends TestCase {
 
 	protected AbstractTrace trace;
 
@@ -28,6 +31,28 @@ public class AbstractTraceTest extends TestCase {
 		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
 	}
 
+	public void testEnterWithThisAndArray() {
+		Object arg1 = new String[] { "s1", "s2" };
+		Object arg2 = new char[] { 'a', 'b', 'c' };
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { arg1, arg2 });
+	}
+
+	public void testEnterWithThisAndCollection() {
+		Object arg1 = new ArrayList();
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { arg1 });
+	}
+
+	public void testEnterWithThisAndTraceable () {
+		Object arg1 = new Traceable() {
+
+			public String toTraceString() {
+				return "Traceable";
+			}
+			
+		};
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { arg1 });
+	}
+
 	public void testEnterWithThis() {
 		trace.enter("testEnterWithThis",this);
 	}
@@ -124,8 +124,8 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
         };
 
         List definitions = parseDefinitions(classLoader);
-        if (!enabled) {
-        	if (trace.isTraceEnabled()) trace.exit("initialize",enabled);
+        if (!isEnabled()) {
+        	if (trace.isTraceEnabled()) trace.exit("initialize",false);
         	return;
         }
 
@@ -147,7 +147,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
 
         // register the definitions
         registerDefinitions(weaver, classLoader, definitions);
-        if (enabled) {
+        if (isEnabled()) {
 
             //bcelWorld.setResolutionLoader(loader.getParent());//(ClassLoader)null);//
 
@@ -160,7 +160,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
         }
 
         initialized = true;
-    	if (trace.isTraceEnabled()) trace.exit("initialize",enabled);
+    	if (trace.isTraceEnabled()) trace.exit("initialize",isEnabled());
     }
 
     /**
@@ -198,11 +198,11 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
     			}
     		}
     		if (definitions.isEmpty()) {
-                enabled = false;// will allow very fast skip in shouldWeave()
+                disable();// will allow very fast skip in shouldWeave()
         		info("no configuration found. Disabling weaver for class loader " + getClassLoaderName(loader));
     		}
         } catch (Exception e) {
-            enabled = false;// will allow very fast skip in shouldWeave()
+            disable();// will allow very fast skip in shouldWeave()
             warn("parse definitions failed",e);
         }
 		return definitions;
@@ -217,7 +217,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
             registerIncludeExclude(weaver, loader, definitions);
             registerDump(weaver, loader, definitions);
         } catch (Exception e) {
-            enabled = false;// will allow very fast skip in shouldWeave()
+            disable();// will allow very fast skip in shouldWeave()
             warn("register definition failed",(e instanceof AbortException)?null:e);
         }
     }
@@ -341,7 +341,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
     	kind.signal(infos,null,null);
     }
 
-	protected String getContextId () {
+	public String getContextId () {
 		return weavingContext.getId();
 	}
 
@@ -413,11 +413,11 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
 
         /* We didn't register any aspects so disable the adaptor */
         if (namespace == null) {
-        	enabled = false;
+        	disable();
     		info("no aspects registered. Disabling weaver for class loader " + getClassLoaderName(loader));
         }
 
-        if (trace.isTraceEnabled()) trace.exit("registerAspects",enabled);
+        if (trace.isTraceEnabled()) trace.exit("registerAspects",isEnabled());
     }
 
     /**
@@ -697,4 +697,4 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
 
 		if (trace.isTraceEnabled()) trace.exit("defineClass",clazz);
 	}
-}
+}
\ No newline at end of file
@@ -34,8 +34,8 @@ public class TracingTests extends org.aspectj.testing.XMLBasedAjcTestCase {
   		runTest("Default tracing");
 	}
 
-	public void testDefaultTracingMessageHandler () {
-  		runTest("Default TraceMessageHandler");
+	public void testTraceMessages () {
+  		runTest("Trace messages");
 	}
 
 }
@@ -7,35 +7,54 @@
         <compile
         	files="TracingTest.java"
         />
-        <ant file="ant.xml" target="Tracing" verbose="true"/>
+        <ant file="ant.xml" target="Tracing" verbose="true">
+        	<stdout>
+                <line text="? TracingTest.main() trace="/>
+            </stdout>
+		</ant>      
     </ajc-test>
 
 	<ajc-test dir="tracing" title="Default tracing" keywords="tracing">
         <compile
         	files="DefaultTracingTest.java"
         />
-        <ant file="ant.xml" target="Default tracing" verbose="true"/>
+        <ant file="ant.xml" target="Default tracing" verbose="true">
+        	<stdout>
+                <line text="? DefaultTracingTest.main() trace=org.aspectj.weaver.tools.DefaultTrace"/>
+            </stdout>
+		</ant>        
     </ajc-test>
 
-	<ajc-test dir="tracing" title="Default TraceMessageHandler" keywords="tracing">
+	<ajc-test dir="tracing" title="Trace messages" keywords="tracing">
         <compile
-        	files="HelloWorld.java, MyDefaultTraceMessageHandler.java"
+        	files="HelloWorld.java"
         />
         <compile
         	files="IncludedAspect.aj, ExcludedAspect.aj"
         />
-        <run class="HelloWorld" ltw="aop-defaulttracemessagehandler.xml">
+		<ant file="ant.xml" target="Trace messages" verbose="true">
         	<stdout>
                 <line text="Hello World!"/>
             </stdout>
+            <!-- 
+            	Always get info messages even without -verbose because output determined
+                by tracing infrastructure.
+                 
+                Duplicate warning and error messages: first through trace then message 
+                writer
+            -->
         	<stderr>
+	  	    	<line text="info AspectJ Weaver Version DEVELOPMENT built on"/>
+	  	    	<line text="info register classloader"/>
+	  	    	<line text="info using configuration"/>
 	  	    	<line text="info register aspect IncludedAspect"/>
 	  	    	<line text="warning aspect ExcludedAspect exluded"/>
+	  	    	<line text="warning aspect ExcludedAspect exluded"/>
+	  	    	<line text="error Cannot find m_parent aspect"/>
 	  	    	<line text="error Cannot find m_parent aspect"/>
-	  	    	<line text="error Concrete-aspect 'IncludedMissingAspect' could not be registered"/>
-	  	    	<line text="info weaving 'HelloWorld'"/>
+	  	    	<line text="warning register definition failed"/>
+	  	    	<line text="warning register definition failed"/>
             </stderr>
-        </run>
+        </ant>
     </ajc-test>
-
 </suite>
@@ -24,4 +24,17 @@
         </java>
     </target>
 
+    <target name="Trace messages">
+        <copy file="${aj.root}/tests/tracing/aop-tracemessages.xml"
+              tofile="${aj.sandbox}/META-INF/aop.xml"/>
+        <java fork="yes" classname="HelloWorld" failonerror="yes">
+            <classpath refid="aj.path"/>
+            <jvmarg value="-Dorg.aspectj.tracing.factory=default"/>
+            <jvmarg value="-Dorg.aspectj.tracing.messages=true"/>
+            <!-- use META-INF/aop.xml style -->
+            <jvmarg value="-javaagent:${aj.root}/lib/test/loadtime5.jar"/>
+<!--            <jvmarg line="${jdwp}"/>-->
+        </java>
+    </target>
+
 </project>
@@ -0,0 +1,13 @@
+<aspectj>
+	<aspects>
+		<aspect name="IncludedAspect"/>
+		<aspect name="ExcludedAspect"/>
+		
+        <concrete-aspect name="IncludedMissingAspect" extends="MissingAbstractAspect">
+        	<pointcut name="pointcut" expression="within(*)"/>
+        </concrete-aspect>
+		
+		<include within="Included*"/>
+	</aspects>
+    <weaver options="-Xlint:warning"/>
+</aspectj>
\ No newline at end of file
@@ -31,11 +31,13 @@ import java.util.StringTokenizer;
 
 import org.aspectj.bridge.AbortException;
 import org.aspectj.bridge.IMessage;
+import org.aspectj.bridge.IMessageContext;
 import org.aspectj.bridge.IMessageHandler;
 import org.aspectj.bridge.Message;
 import org.aspectj.bridge.MessageUtil;
 import org.aspectj.bridge.MessageWriter;
 import org.aspectj.bridge.Version;
+import org.aspectj.bridge.WeaveMessage;
 import org.aspectj.bridge.IMessage.Kind;
 import org.aspectj.org.objectweb.asm.ClassReader;
 import org.aspectj.util.FileUtil;
@@ -63,15 +65,16 @@ import org.aspectj.weaver.bcel.Utility;
  * weaving messages to be written to the console.
  *
  */
-public class WeavingAdaptor {
+public class WeavingAdaptor implements IMessageContext {
 
 	/**
 	 * System property used to turn on verbose weaving messages 
 	 */
 	public static final String WEAVING_ADAPTOR_VERBOSE = "aj.weaving.verbose"; 
 	public static final String SHOW_WEAVE_INFO_PROPERTY = "org.aspectj.weaver.showWeaveInfo"; 
+	public static final String TRACE_MESSAGES_PROPERTY = "org.aspectj.tracing.messages";
 
-	protected boolean enabled = true;
+	private boolean enabled = true;
 	protected boolean verbose = getVerbose();
 	protected BcelWorld bcelWorld;
 	protected BcelWeaver weaver;
@@ -179,12 +182,21 @@ public class WeavingAdaptor {
 	}
 
 	protected void setMessageHandler (IMessageHandler mh) {
-		if (messageHolder != null) {
-			messageHolder.flushMessages();
-			messageHolder = null;
+		if (mh instanceof ISupportsMessageContext) {
+			ISupportsMessageContext smc = (ISupportsMessageContext)mh;
+			smc.setMessageContext(this);
 		}
-		messageHandler = mh;
-		bcelWorld.setMessageHandler(mh);
+		if (mh != messageHolder) messageHolder.setDelegate(mh);
+		messageHolder.flushMessages();
+	}
+	
+	protected void disable () {
+		enabled = false;
+		messageHolder.flushMessages();
+	}
+	
+	protected boolean isEnabled () {
+		return enabled;
 	}
 
 	/**
@@ -396,7 +408,7 @@ public class WeavingAdaptor {
 		return MessageUtil.error(messageHandler,message);
 	}
 
-	protected String getContextId () {
+	public String getContextId () {
 		return "WeavingAdaptor";
 	}
 
@@ -436,14 +448,97 @@ public class WeavingAdaptor {
 	 * Processes messages arising from weaver operations. 
 	 * Tell weaver to abort on any message more severe than warning.
 	 */
-	protected class WeavingAdaptorMessageHandler extends MessageWriter {
+	protected class WeavingAdaptorMessageHandler implements IMessageHandler {
 
-		private Set ignoring = new HashSet();
-		private IMessage.Kind failKind;
+		private IMessageHandler delegate;
 		private boolean accumulating = true;
 	    private List messages = new ArrayList();
 
+		protected boolean traceMessages = Boolean.getBoolean(TRACE_MESSAGES_PROPERTY);
+	    
 		public WeavingAdaptorMessageHandler (PrintWriter writer) {
+			
+			this.delegate = new WeavingAdaptorMessageWriter(writer);
+		}
+
+		public boolean handleMessage(IMessage message) throws AbortException {
+			if (traceMessages) traceMessage(message);
+			if (accumulating) {
+				boolean result = addMessage(message);
+				if (0 <= message.getKind().compareTo(IMessage.ERROR)) {
+					throw new AbortException(message);
+				}
+				return result;
+			}
+			else return delegate.handleMessage(message);
+		}
+		
+		private void traceMessage (IMessage message) {
+			if (message instanceof WeaveMessage) {
+				trace.debug(render(message));
+			}
+			else if (message.isDebug()) {
+				trace.debug(render(message));
+			}
+			else if (message.isInfo()) {
+				trace.info(render(message));
+			}
+			else if (message.isWarning()) {
+				trace.warn(render(message),message.getThrown());
+			}
+			else if (message.isError()) {
+				trace.error(render(message),message.getThrown());
+			}
+			else if (message.isFailed()) {
+				trace.fatal(render(message),message.getThrown());
+			}
+			else if (message.isAbort()) {
+				trace.fatal(render(message),message.getThrown());
+			}
+			else {
+				trace.error(render(message),message.getThrown());
+			}
+		}
+
+	    protected String render(IMessage message) {
+	    	return "[" + getContextId() + "] " + message.toString();    
+	    }
+
+		public boolean isIgnoring (Kind kind) {
+			return delegate.isIgnoring(kind);
+		}
+
+		public void dontIgnore (IMessage.Kind kind) {
+			if (null != kind) {
+				delegate.dontIgnore(kind);
+			}
+		}
+		
+		private boolean addMessage (IMessage message) {
+			messages.add(message);
+			return true;
+		}
+		
+		public void flushMessages () {
+            for (Iterator iter = messages.iterator(); iter.hasNext();) {
+                IMessage message = (IMessage)iter.next();
+                delegate.handleMessage(message);
+            }
+			accumulating = false;
+			messages.clear();
+		}
+		
+		public void setDelegate (IMessageHandler messageHandler) {
+			delegate = messageHandler;
+		}
+	}
+
+	protected class WeavingAdaptorMessageWriter extends MessageWriter {
+
+		private Set ignoring = new HashSet();
+		private IMessage.Kind failKind;
+
+		public WeavingAdaptorMessageWriter (PrintWriter writer) {
 			super(writer,true);
 
 			ignore(IMessage.WEAVEINFO);
@@ -452,7 +547,6 @@ public class WeavingAdaptor {
 		}
 
 		public boolean handleMessage(IMessage message) throws AbortException {
-			addMessage(message);
 			boolean result = super.handleMessage(message);
 			if (0 <= message.getKind().compareTo(failKind)) {
 				throw new AbortException(message);
@@ -479,24 +573,8 @@ public class WeavingAdaptor {
 		public void dontIgnore (IMessage.Kind kind) {
 			if (null != kind) {
 				ignoring.remove(kind);
-				if (kind.equals(IMessage.INFO)) accumulating = false;
-			}
-		}
-		
-		private void addMessage (IMessage message) {
-			if (accumulating && isIgnoring(message.getKind())) {
-				messages.add(message);
 			}
 		}
-		
-		public void flushMessages () {
-            for (Iterator iter = messages.iterator(); iter.hasNext();) {
-                IMessage message = (IMessage)iter.next();
-                super.handleMessage(message);
-            }
-			accumulating = false;
-			messages.clear();
-		}
 
 	    protected String render(IMessage message) {
 	    	return "[" + getContextId() + "] " + super.render(message);
@@ -0,0 +1,16 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.bridge;
+
+public interface IMessageContext {
+
+	public String getContextId ();
+}
@@ -0,0 +1,18 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import org.aspectj.bridge.IMessageContext;
+
+public interface ISupportsMessageContext {
+
+	public void setMessageContext (IMessageContext messageContext);
+}
@@ -1,81 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials 
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     Matthew Webster - initial implementation
- *******************************************************************************/
-package org.aspectj.weaver.loadtime;
-
-import org.aspectj.bridge.AbortException;
-import org.aspectj.bridge.IMessage;
-import org.aspectj.bridge.IMessageHandler;
-import org.aspectj.bridge.WeaveMessage;
-import org.aspectj.bridge.IMessage.Kind;
-import org.aspectj.weaver.tools.Trace;
-import org.aspectj.weaver.tools.TraceFactory;
-
-public class TraceMessageHandler implements IMessageHandler {
-
-	private Trace trace;
-
-	public TraceMessageHandler () {
-		this(TraceFactory.getTraceFactory().getTrace(TraceMessageHandler.class));
-	}
-
-	/**
-	 * Used for testing
-	 *
-	 */
-	protected TraceMessageHandler (Trace t) {
-		this.trace = t;
-	}
-	
-	/* Ignore this and defer all decisions about what we log to the Trace
-	 * configuration
-	 */
-	public void dontIgnore(Kind kind) {
-	}
-
-	public boolean handleMessage(IMessage message) throws AbortException {
-		if (message instanceof WeaveMessage) {
-			trace.debug(render(message));
-		}
-		else if (message.isDebug()) {
-			trace.debug(render(message));
-		}
-		else if (message.isInfo()) {
-			trace.info(render(message));
-		}
-		else if (message.isWarning()) {
-			trace.warn(render(message),message.getThrown());
-		}
-		else if (message.isError()) {
-			trace.error(render(message),message.getThrown());
-		}
-		else if (message.isFailed()) {
-			trace.fatal(render(message),message.getThrown());
-		}
-		else if (message.isAbort()) {
-			trace.fatal(render(message),message.getThrown());
-		}
-		else return false;
-		
-		return true;
-	}
-
-	/* Ignore this and defer all decisions about what we log to the Trace
-	 * configuration
-	 */
-	public boolean isIgnoring(Kind kind) {
-		return false;
-	}
-
-    protected String render(IMessage message) {
-        return message.toString();    
-    }
-
-}
@@ -11,15 +11,14 @@ package org.aspectj.loadtime;
  *   Alexandre Vasseur         initial implementation
  *******************************************************************************/
 
-import junit.framework.TestCase;
 import junit.framework.Test;
+import junit.framework.TestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
 import org.aspectj.weaver.loadtime.AjTest;
 import org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptorTest;
 import org.aspectj.weaver.loadtime.JRockitAgentTest;
-import org.aspectj.weaver.loadtime.TraceMessageHandlerTest;
 import org.aspectj.weaver.loadtime.WeavingContextTest;
 import org.aspectj.weaver.loadtime.WeavingURLClassLoaderTest;
 import org.aspectj.weaver.loadtime.test.DocumentParserTest;
@@ -36,7 +35,6 @@ public class LoadtimeModuleTests extends TestCase {
         suite.addTestSuite(AjTest.class);
         suite.addTestSuite(ClassLoaderWeavingAdaptorTest.class);
         suite.addTestSuite(JRockitAgentTest.class);
-        suite.addTestSuite(TraceMessageHandlerTest.class);
         suite.addTestSuite(WeavingContextTest.class);
         suite.addTestSuite(WeavingURLClassLoaderTest.class);
         return suite;
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials 
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     Matthew Webster - initial implementation
- *******************************************************************************/
-package org.aspectj.weaver.loadtime;
-
-import junit.framework.TestCase;
-
-import org.aspectj.bridge.IMessage;
-import org.aspectj.bridge.MessageUtil;
-import org.aspectj.bridge.IMessage.Kind;
-
-public class TraceMessageHandlerTest extends TestCase {
-
-	private TraceMessageHandler messageHandler;
-	
-	protected void setUp() throws Exception {
-		super.setUp();
-		messageHandler = new TraceMessageHandler();
-	}
-
-	public void testTraceMessageHandler() {
-		TraceMessageHandler tmh = new TraceMessageHandler();
-	}
-
-	public void testDontIgnore() {
-		Kind kind = IMessage.WEAVEINFO;
-		messageHandler.dontIgnore(kind);
-		boolean b = messageHandler.isIgnoring(kind);
-		assertFalse("Don't filter message kinds",b);
-	}
-
-	public void testHandleMessageInfo () {
-		IMessage message = MessageUtil.info("testHandleMessage");
-		boolean b = messageHandler.handleMessage(message);
-		assertTrue("Message not handled",b);
-	}
-
-	public void testIsIgnoring() {
-		Kind kind = IMessage.WEAVEINFO;
-		boolean b = messageHandler.isIgnoring(kind);
-		assertFalse("Don't filter message kinds",b);
-	}
-
-	public void testRender() {
-		String text = "testRender";
-		IMessage message = MessageUtil.info(text);
-		String s = messageHandler.render(message);
-		assertTrue("Message not rendered correctly",s.indexOf(text) != -1);
-	}
-
-}
@@ -1,12 +0,0 @@
-import org.aspectj.weaver.loadtime.TraceMessageHandler;
-import org.aspectj.weaver.tools.*;
-
-public class MyDefaultTraceMessageHandler extends TraceMessageHandler {
-	
-	private static Trace trace = new DefaultTrace(MyDefaultTraceMessageHandler.class);
-	
-	public MyDefaultTraceMessageHandler () {
-		super(trace);
-		trace.setTraceEnabled(true);
-	}
-}
\ No newline at end of file
@@ -1,13 +0,0 @@
-<aspectj>
-	<aspects>
-		<aspect name="IncludedAspect"/>
-		<aspect name="ExcludedAspect"/>
-		
-        <concrete-aspect name="IncludedMissingAspect" extends="MissingAbstractAspect">
-        	<pointcut name="pointcut" expression="within(*)"/>
-        </concrete-aspect>
-		
-		<include within="Included*"/>
-	</aspects>
-    <weaver options="-verbose -Xlint:warning -XmessageHandlerClass:MyDefaultTraceMessageHandler"/>
-</aspectj>
\ No newline at end of file
@@ -56,38 +56,27 @@ public class DefaultTrace extends AbstractTrace {
 		}
 	}
 	public void debug (String message) {
-		if (traceEnabled) {
-			println(formatMessage("?",message,null));
-		}
+		println(formatMessage("?",message,null));
 	}
 
 	public void info(String message) {
-		if (traceEnabled) {
-			println(formatMessage("I",message,null));
-		}
+		println(formatMessage("I",message,null));
 	}
 
 	public void warn (String message, Throwable th) {
-		if (traceEnabled) {
-			println(formatMessage("W",message,th));
-			if (th != null) th.printStackTrace();
-		}
+		println(formatMessage("W",message,th));
+		if (th != null) th.printStackTrace();
 	}
 
 
 	public void error (String message, Throwable th) {
-		if (traceEnabled) {
-			println(formatMessage("E",message,th));
-			if (th != null) th.printStackTrace();
-		}
-		
+		println(formatMessage("E",message,th));
+		if (th != null) th.printStackTrace();
 	}
 
 	public void fatal (String message, Throwable th) {
-		if (traceEnabled) {
-			println(formatMessage("X",message,th));
-			if (th != null) th.printStackTrace();
-		}
+		println(formatMessage("X",message,th));
+		if (th != null) th.printStackTrace();
 	}
 
 	/**
@@ -16,9 +16,10 @@ public abstract class TraceFactory {
 
 	public final static String DEBUG_PROPERTY = "org.aspectj.tracing.debug";
 	public final static String FACTORY_PROPERTY = "org.aspectj.tracing.factory";
+	public final static String DEFAULT_FACTORY_NAME = "default";
 
     private static boolean debug = getBoolean(DEBUG_PROPERTY,false); 
-    private static TraceFactory instance = new DefaultTraceFactory();
+    private static TraceFactory instance;
 
     public Trace getTrace (Class clazz) {
     	return instance.getTrace(clazz);
@@ -35,7 +36,28 @@ public abstract class TraceFactory {
 	}
 
 	static {
-    	try {
+		
+		/*
+		 * Allow user to override default behaviour or specify their own factory 
+		 */
+		String factoryName = System.getProperty(FACTORY_PROPERTY);
+		if (factoryName != null) try {
+			if (factoryName.equals(DEFAULT_FACTORY_NAME)) {
+				instance = new DefaultTraceFactory();
+			}
+			else {
+	    		Class factoryClass = Class.forName(factoryName);
+	    		instance = (TraceFactory)factoryClass.newInstance();
+			}
+		}
+    	catch (Throwable th) {
+    		if (debug) th.printStackTrace();
+    	}
+    	
+		/*
+		 * Try to load external trace infrastructure using supplied factories
+		 */
+    	if (instance == null) try {
 			if (LangUtil.is15VMOrGreater()) {
 	    		Class factoryClass = Class.forName("org.aspectj.weaver.tools.Jdk14TraceFactory");
 	    		instance = (TraceFactory)factoryClass.newInstance();
@@ -47,6 +69,13 @@ public abstract class TraceFactory {
     	catch (Throwable th) {
     		if (debug) th.printStackTrace();
     	}
+
+    	/*
+		 * Use default trace 
+		 */
+    	if (instance == null) {
+    	    instance = new DefaultTraceFactory();
+    	}
 
     	if (debug) System.out.println("TraceFactory.instance=" + instance);
     }
@@ -32,44 +32,12 @@ public abstract class AbstractTrace implements Trace {
 
 	public abstract void exit(String methodName, Throwable th);
 
-	public void error(String message) {
-		// TODO Auto-generated method stub
-
-	}
-
-	public void error(String message, Throwable th) {
-		// TODO Auto-generated method stub
-
-	}
-
 	public void event(String methodName) {
-		// TODO Auto-generated method stub
-
+		throw new UnsupportedOperationException("event");
 	}
 
 	public void event(String methodName, Object thiz, Object[] args) {
-		// TODO Auto-generated method stub
-
-	}
-
-	public void exit(String methodName) {
-		// TODO Auto-generated method stub
-
-	}
-
-	public void info(String message) {
-		// TODO Auto-generated method stub
-
-	}
-
-	public void warn(String message) {
-		// TODO Auto-generated method stub
-
-	}
-
-	public void warn(String message, Throwable th) {
-		// TODO Auto-generated method stub
-
+		throw new UnsupportedOperationException("event");
 	}
 
 	/*
@@ -90,7 +58,22 @@ public abstract class AbstractTrace implements Trace {
 	public void exit (String methodName, boolean b) {
 		exit(methodName,new Boolean(b));
 	}
+
+	public void warn(String message) {
+		warn(message,null);
+	}
+
+	public void error(String message) {
+		error(message,null);
+	}
+
+	public void fatal (String message) {
+		fatal(message,null);
+	}
 
+	/*
+	 * Formatting
+	 */
 	protected String formatMessage(String kind, String className, String methodName, Object thiz, Object[] args) {
 		StringBuffer message = new StringBuffer();
 		Date now = new Date();
@@ -104,6 +87,17 @@ public abstract class AbstractTrace implements Trace {
 		return message.toString();
 	}
 
+	protected String formatMessage(String kind, String text, Throwable th) {
+		StringBuffer message = new StringBuffer();
+		Date now = new Date();
+		message.append(formatDate(now)).append(" ");
+		message.append(Thread.currentThread().getName()).append(" ");
+		message.append(kind).append(" ");
+		message.append(text);
+		if (th != null) message.append(" ").append(formatObj(th));
+		return message.toString();
+	}
+	
 	private static String formatDate (Date date) {
 		if (timeFormat == null) {
 			timeFormat = new SimpleDateFormat("HH:mm:ss.SSS");
@@ -166,4 +160,4 @@ public abstract class AbstractTrace implements Trace {
 
 		return sb.toString();
 	}
-}
+}
\ No newline at end of file
@@ -61,4 +61,34 @@ public class CommonsTrace extends AbstractTrace {
 	public void setTraceEnabled (boolean b) {
 	}
 
+	public void debug (String message) {
+		if (log.isDebugEnabled()) {
+			log.debug(message);
+		}
+	}
+
+	public void info(String message) {
+		if (log.isInfoEnabled()) {
+			log.info(message);
+		}
+	}
+
+	public void warn (String message, Throwable th) {
+		if (log.isWarnEnabled()) {
+			log.warn(message,th);
+		}
+	}
+
+	public void error (String message, Throwable th) {
+		if (log.isErrorEnabled()) {
+			log.error(message,th);
+		}
+	}
+
+	public void fatal (String message, Throwable th) {
+		if (log.isFatalEnabled()) {
+			log.fatal(message,th);
+		}
+	}
+
 }
@@ -55,6 +55,40 @@ public class DefaultTrace extends AbstractTrace {
 			println(formatMessage("<",tracedClass.getName(),methodName,th, null));
 		}
 	}
+	public void debug (String message) {
+		if (traceEnabled) {
+			println(formatMessage("?",message,null));
+		}
+	}
+
+	public void info(String message) {
+		if (traceEnabled) {
+			println(formatMessage("I",message,null));
+		}
+	}
+
+	public void warn (String message, Throwable th) {
+		if (traceEnabled) {
+			println(formatMessage("W",message,th));
+			if (th != null) th.printStackTrace();
+		}
+	}
+
+
+	public void error (String message, Throwable th) {
+		if (traceEnabled) {
+			println(formatMessage("E",message,th));
+			if (th != null) th.printStackTrace();
+		}
+		
+	}
+
+	public void fatal (String message, Throwable th) {
+		if (traceEnabled) {
+			println(formatMessage("X",message,th));
+			if (th != null) th.printStackTrace();
+		}
+	}
 
 	/**
 	 * Template method that allows choice of destination for output
@@ -26,6 +26,8 @@ public interface Trace {
 
 	public void event (String methodName, Object thiz, Object[] args);
 
+	public void debug (String message);
+	
 	public void info (String message);
 
 	public void warn (String message);
@@ -35,6 +37,11 @@ public interface Trace {
 	public void error (String message);
 
 	public void error (String message, Throwable th);
+
+	public void fatal (String message);
+
+	public void fatal (String message, Throwable th);
+	
 
 	/*
 	 * Convenience methods
@@ -48,4 +55,4 @@ public interface Trace {
 	public boolean isTraceEnabled ();
 
 	public void setTraceEnabled (boolean b);
-}
+}
\ No newline at end of file
@@ -0,0 +1,83 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.TestCase;
+
+import org.aspectj.weaver.tools.AbstractTrace;
+import org.aspectj.weaver.tools.DefaultTrace;
+
+public class AbstractTraceTest extends TestCase {
+
+	protected AbstractTrace trace;
+
+	public void testIsTraceEnabled() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+		assertFalse(trace.isTraceEnabled());
+	}
+
+	public void testEnterWithThisAndArgs() {
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
+	}
+
+	public void testEnterWithThis() {
+		trace.enter("testEnterWithThis",this);
+	}
+
+	public void testEnter() {
+		trace.enter("testEnter");
+	}
+
+	public void testExitWithReturn() {
+		trace.exit("testExitWithReturn","ret");
+	}
+
+	public void testExitWithThrowable() {
+		trace.exit("testExitWithThrowable",new RuntimeException());
+	}
+
+	public void testExit() {
+		trace.exit("testExit");
+	}
+
+	public void testDebug() {
+		trace.debug("debug");
+	}
+
+	public void testInfo() {
+		trace.info("information");
+	}
+
+	public void testWarn() {
+		trace.warn("warning");
+	}
+
+	public void testWarnWithException() {
+		trace.warn("warning",new RuntimeException("warning"));
+	}
+
+	public void testError() {
+		trace.error("error");
+	}
+
+	public void testErrorWithException() {
+		trace.error("error",new RuntimeException("error"));
+	}
+
+	public void testFatal() {
+		trace.fatal("fatal");
+	}
+
+	public void testFatalWithException() {
+		trace.fatal("fatal",new RuntimeException("fatal"));
+	}
+
+}
@@ -12,51 +12,18 @@ package org.aspectj.weaver;
 
 import org.aspectj.weaver.tools.CommonsTrace;
 
-import junit.framework.TestCase;
-
-public class CommonsTraceTest extends TestCase {
-
-	private CommonsTrace trace; 
+public class CommonsTraceTest extends AbstractTraceTest {
 
 	protected void setUp() throws Exception {
 		super.setUp();
 		trace = new CommonsTrace(getClass());
 		trace.setTraceEnabled(true);
 	}
-
+	
 	public void testCommonsTrace() {
 		CommonsTrace trace = new CommonsTrace(getClass());
 	}
 
-	public void testEnterWithThisAndArgs() {
-		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
-	}
-
-	public void testEnterWithThis() {
-		trace.enter("testEnterWithThis",this);
-	}
-
-	public void testEnter() {
-		trace.enter("testEnter");
-	}
-
-	public void testExitWithReturn() {
-		trace.exit("testExitWithReturn","ret");
-	}
-
-	public void testExitWithThrowable() {
-		trace.exit("testExitWithThrowable",new RuntimeException());
-	}
-
-	public void testExit() {
-		trace.exit("testExit");
-	}
-
-	public void testIsTraceEnabled() {
-		CommonsTrace trace = new CommonsTrace(getClass());
-		assertFalse(trace.isTraceEnabled());
-	}
-
 	public void testSetTraceEnabled() {
 		CommonsTrace trace = new CommonsTrace(getClass());
 		trace.setTraceEnabled(true);
@@ -10,14 +10,10 @@
  *******************************************************************************/
 package org.aspectj.weaver;
 
-import junit.framework.TestCase;
-
 import org.aspectj.weaver.tools.DefaultTrace;
 
-public class DefaultTraceTest extends TestCase {
+public class DefaultTraceTest extends AbstractTraceTest {
 
-	private DefaultTrace trace; 
-	
 	protected void setUp() throws Exception {
 		super.setUp();
 		trace = new DefaultTrace(getClass());
@@ -28,39 +24,9 @@ public class DefaultTraceTest extends TestCase {
 		DefaultTrace trace = new DefaultTrace(getClass());
 	}
 
-	public void testEnterWithThisAndArgs() {
-		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
-	}
-
-	public void testEnterWithThis() {
-		trace.enter("testEnterWithThis",this);
-	}
-
-	public void testEnter() {
-		trace.enter("testEnter");
-	}
-
-	public void testExitWithReturn() {
-		trace.exit("testExitWithReturn","ret");
-	}
-
-	public void testExitWithThrowable() {
-		trace.exit("testExitWithThrowable",new RuntimeException());
-	}
-
-	public void testExit() {
-		trace.exit("testExit");
-	}
-
-	public void testIsTraceEnabled() {
-		DefaultTrace trace = new DefaultTrace(getClass());
-		assertFalse(trace.isTraceEnabled());
-	}
-
 	public void testSetTraceEnabled() {
 		DefaultTrace trace = new DefaultTrace(getClass());
 		trace.setTraceEnabled(true);
 		assertTrue(trace.isTraceEnabled());
 	}
-
 }
@@ -77,5 +77,35 @@ public class Jdk14Trace extends AbstractTrace {
 			logger.setLevel(Level.INFO);
 		}
 	}
+
+	public void debug (String message) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.fine(message);
+		}
+	}
+
+	public void info(String message) {
+		if (logger.isLoggable(Level.INFO)) {
+			logger.info(message);
+		}
+	}
+
+	public void warn (String message, Throwable th) {
+		if (logger.isLoggable(Level.WARNING)) {
+			logger.log(Level.WARNING,message,th);
+		}
+	}
+
+	public void error (String message, Throwable th) {
+		if (logger.isLoggable(Level.SEVERE)) {
+			logger.log(Level.SEVERE,message,th);
+		}
+	}
+
+	public void fatal (String message, Throwable th) {
+		if (logger.isLoggable(Level.SEVERE)) {
+			logger.log(Level.SEVERE,message,th);
+		}
+	}
 
 }
@@ -13,12 +13,8 @@ package org.aspectj.weaver;
 import org.aspectj.weaver.tools.DefaultTrace;
 import org.aspectj.weaver.tools.Jdk14Trace;
 
-import junit.framework.TestCase;
+public class Jdk14TraceTest extends AbstractTraceTest {
 
-public class Jdk14TraceTest extends TestCase {
-
-	private Jdk14Trace trace; 
-	
 	protected void setUp() throws Exception {
 		super.setUp();
 		trace = new Jdk14Trace(getClass());
@@ -29,35 +25,6 @@ public class Jdk14TraceTest extends TestCase {
 		Jdk14Trace trace = new Jdk14Trace(getClass());
 	}
 
-	public void testEnterWithThisAndArgs() {
-		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
-	}
-
-	public void testEnterWithThis() {
-		trace.enter("testEnterWithThis",this);
-	}
-
-	public void testEnter() {
-		trace.enter("testEnter");
-	}
-
-	public void testExitWithReturn() {
-		trace.exit("testExitWithReturn","ret");
-	}
-
-	public void testExitWithThrowable() {
-		trace.exit("testExitWithThrowable",new RuntimeException());
-	}
-
-	public void testExit() {
-		trace.exit("testExit");
-	}
-
-	public void testIsTraceEnabled() {
-		DefaultTrace trace = new DefaultTrace(getClass());
-		assertFalse(trace.isTraceEnabled());
-	}
-
 	public void testSetTraceEnabled() {
 		DefaultTrace trace = new DefaultTrace(getClass());
 		trace.setTraceEnabled(true);
@@ -0,0 +1,81 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.loadtime;
+
+import org.aspectj.bridge.AbortException;
+import org.aspectj.bridge.IMessage;
+import org.aspectj.bridge.IMessageHandler;
+import org.aspectj.bridge.WeaveMessage;
+import org.aspectj.bridge.IMessage.Kind;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
+
+public class TraceMessageHandler implements IMessageHandler {
+
+	private Trace trace;
+
+	public TraceMessageHandler () {
+		this(TraceFactory.getTraceFactory().getTrace(TraceMessageHandler.class));
+	}
+
+	/**
+	 * Used for testing
+	 *
+	 */
+	protected TraceMessageHandler (Trace t) {
+		this.trace = t;
+	}
+	
+	/* Ignore this and defer all decisions about what we log to the Trace
+	 * configuration
+	 */
+	public void dontIgnore(Kind kind) {
+	}
+
+	public boolean handleMessage(IMessage message) throws AbortException {
+		if (message instanceof WeaveMessage) {
+			trace.debug(render(message));
+		}
+		else if (message.isDebug()) {
+			trace.debug(render(message));
+		}
+		else if (message.isInfo()) {
+			trace.info(render(message));
+		}
+		else if (message.isWarning()) {
+			trace.warn(render(message),message.getThrown());
+		}
+		else if (message.isError()) {
+			trace.error(render(message),message.getThrown());
+		}
+		else if (message.isFailed()) {
+			trace.fatal(render(message),message.getThrown());
+		}
+		else if (message.isAbort()) {
+			trace.fatal(render(message),message.getThrown());
+		}
+		else return false;
+		
+		return true;
+	}
+
+	/* Ignore this and defer all decisions about what we log to the Trace
+	 * configuration
+	 */
+	public boolean isIgnoring(Kind kind) {
+		return false;
+	}
+
+    protected String render(IMessage message) {
+        return message.toString();    
+    }
+
+}
@@ -19,6 +19,7 @@ import junit.textui.TestRunner;
 import org.aspectj.weaver.loadtime.AjTest;
 import org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptorTest;
 import org.aspectj.weaver.loadtime.JRockitAgentTest;
+import org.aspectj.weaver.loadtime.TraceMessageHandlerTest;
 import org.aspectj.weaver.loadtime.WeavingContextTest;
 import org.aspectj.weaver.loadtime.WeavingURLClassLoaderTest;
 import org.aspectj.weaver.loadtime.test.DocumentParserTest;
@@ -35,6 +36,7 @@ public class LoadtimeModuleTests extends TestCase {
         suite.addTestSuite(AjTest.class);
         suite.addTestSuite(ClassLoaderWeavingAdaptorTest.class);
         suite.addTestSuite(JRockitAgentTest.class);
+        suite.addTestSuite(TraceMessageHandlerTest.class);
         suite.addTestSuite(WeavingContextTest.class);
         suite.addTestSuite(WeavingURLClassLoaderTest.class);
         return suite;
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.loadtime;
+
+import junit.framework.TestCase;
+
+import org.aspectj.bridge.IMessage;
+import org.aspectj.bridge.MessageUtil;
+import org.aspectj.bridge.IMessage.Kind;
+
+public class TraceMessageHandlerTest extends TestCase {
+
+	private TraceMessageHandler messageHandler;
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+		messageHandler = new TraceMessageHandler();
+	}
+
+	public void testTraceMessageHandler() {
+		TraceMessageHandler tmh = new TraceMessageHandler();
+	}
+
+	public void testDontIgnore() {
+		Kind kind = IMessage.WEAVEINFO;
+		messageHandler.dontIgnore(kind);
+		boolean b = messageHandler.isIgnoring(kind);
+		assertFalse("Don't filter message kinds",b);
+	}
+
+	public void testHandleMessageInfo () {
+		IMessage message = MessageUtil.info("testHandleMessage");
+		boolean b = messageHandler.handleMessage(message);
+		assertTrue("Message not handled",b);
+	}
+
+	public void testIsIgnoring() {
+		Kind kind = IMessage.WEAVEINFO;
+		boolean b = messageHandler.isIgnoring(kind);
+		assertFalse("Don't filter message kinds",b);
+	}
+
+	public void testRender() {
+		String text = "testRender";
+		IMessage message = MessageUtil.info(text);
+		String s = messageHandler.render(message);
+		assertTrue("Message not rendered correctly",s.indexOf(text) != -1);
+	}
+
+}
@@ -33,5 +33,9 @@ public class TracingTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	public void testDefaultTracing () {
   		runTest("Default tracing");
 	}
+	
+	public void testDefaultTracingMessageHandler () {
+  		runTest("Default TraceMessageHandler");
+	}
 
 }
@@ -17,4 +17,25 @@
         <ant file="ant.xml" target="Default tracing" verbose="true"/>
     </ajc-test>
 
+	<ajc-test dir="tracing" title="Default TraceMessageHandler" keywords="tracing">
+        <compile
+        	files="HelloWorld.java, MyDefaultTraceMessageHandler.java"
+        />
+        <compile
+        	files="IncludedAspect.aj, ExcludedAspect.aj"
+        />
+        <run class="HelloWorld" ltw="aop-defaulttracemessagehandler.xml">
+        	<stdout>
+                <line text="Hello World!"/>
+            </stdout>
+        	<stderr>
+	  	    	<line text="info register aspect IncludedAspect"/>
+	  	    	<line text="warning aspect ExcludedAspect exluded"/>
+	  	    	<line text="error Cannot find m_parent aspect"/>
+	  	    	<line text="error Concrete-aspect 'IncludedMissingAspect' could not be registered"/>
+	  	    	<line text="info weaving 'HelloWorld'"/>
+            </stderr>
+        </run>
+    </ajc-test>
+
 </suite>
@@ -0,0 +1,3 @@
+public aspect ExcludedAspect {
+	
+}
\ No newline at end of file
@@ -0,0 +1,3 @@
+public aspect IncludedAspect {
+	
+}
\ No newline at end of file
@@ -0,0 +1,12 @@
+import org.aspectj.weaver.loadtime.TraceMessageHandler;
+import org.aspectj.weaver.tools.*;
+
+public class MyDefaultTraceMessageHandler extends TraceMessageHandler {
+	
+	private static Trace trace = new DefaultTrace(MyDefaultTraceMessageHandler.class);
+	
+	public MyDefaultTraceMessageHandler () {
+		super(trace);
+		trace.setTraceEnabled(true);
+	}
+}
\ No newline at end of file
@@ -0,0 +1,13 @@
+<aspectj>
+	<aspects>
+		<aspect name="IncludedAspect"/>
+		<aspect name="ExcludedAspect"/>
+		
+        <concrete-aspect name="IncludedMissingAspect" extends="MissingAbstractAspect">
+        	<pointcut name="pointcut" expression="within(*)"/>
+        </concrete-aspect>
+		
+		<include within="Included*"/>
+	</aspects>
+    <weaver options="-verbose -Xlint:warning -XmessageHandlerClass:MyDefaultTraceMessageHandler"/>
+</aspectj>
\ No newline at end of file
@@ -15,7 +15,7 @@
             </classpath>
 -->            
             <jvmarg value="-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader"/>
-            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar;${aj.sandbox}/handler.jar"/>
+        	<sysproperty key="aj.class.path" path="${aj.sandbox}/hello.jar:${aj.sandbox}/handler.jar"/>
             <jvmarg value="-Daj.weaving.verbose=true"/>
             <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
             <jvmarg value="-Dorg.aspectj.tracing.debug=true"/>
@@ -34,8 +34,8 @@
             </classpath>
 -->            
             <jvmarg value="-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader"/>
-            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar;${aj.sandbox}/handler.jar"/>
-            <jvmarg value="-Daj.aspect.path=${aj.sandbox}/handler.jar"/>
+        	<sysproperty key="aj.class.path" path="${aj.sandbox}/hello.jar:${aj.sandbox}/handler.jar"/>
+        	<sysproperty key="aj.aspect.path" path="${aj.sandbox}/handler.jar"/>
             <jvmarg value="-Daj.weaving.verbose=true"/>
             <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
             <jvmarg value="-Dorg.aspectj.tracing.debug=true"/>
@@ -43,7 +43,7 @@ public class WeavingURLClassLoader extends ExtensibleURLClassLoader implements W
 	 */
 	public WeavingURLClassLoader (ClassLoader parent) {
 		this(getURLs(getClassPath()),getURLs(getAspectPath()),parent);
-//		System.err.println("? WeavingURLClassLoader.<init>(" + m_parent + ")");
+//		System.out.println("? WeavingURLClassLoader.WeavingURLClassLoader()");
 	}
 
 	public WeavingURLClassLoader (URL[] urls, ClassLoader parent) {
@@ -53,15 +53,22 @@ public class WeavingURLClassLoader extends ExtensibleURLClassLoader implements W
 
 	public WeavingURLClassLoader (URL[] classURLs, URL[] aspectURLs, ClassLoader parent) {
 		super(classURLs,parent);
-//		System.err.println("? WeavingURLClassLoader.<init>() classURLs=" + classURLs.length + ", aspectURLs=" + aspectURLs.length);
+//		System.out.println("> WeavingURLClassLoader.WeavingURLClassLoader() classURLs=" + Arrays.asList(classURLs));
 		this.aspectURLs = aspectURLs;
 
-		/* If either we nor our m_parent is using an ASPECT_PATH use a new-style
+		/* If either we nor our parent is using an ASPECT_PATH use a new-style
 		 * adaptor
 		 */ 
-		if (this.aspectURLs.length > 0 || parent instanceof WeavingClassLoader) {
-			adaptor = new WeavingAdaptor(this);
+		if (this.aspectURLs.length > 0 || getParent() instanceof WeavingClassLoader) {
+			try {
+				adaptor = new WeavingAdaptor(this);
+			}
+			catch (ExceptionInInitializerError ex) {
+				ex.printStackTrace(System.out);
+				throw ex;
+			}
 		}
+//		System.out.println("< WeavingURLClassLoader.WeavingURLClassLoader() adaptor=" + adaptor);
 	}
 
 	private static String getAspectPath () {
@@ -106,26 +113,30 @@ public class WeavingURLClassLoader extends ExtensibleURLClassLoader implements W
 
 			/* Need to defer creation because of possible recursion during constructor execution */
 			if (adaptor == null && !initializingAdaptor) {
-				DefaultWeavingContext weavingContext = new DefaultWeavingContext (this) {
-
-					/* Ensures consistent LTW messages for testing */
-					public String getClassLoaderName() {
-						return loader.getClass().getName();
-					}
-					
-				};
-				
-				ClassLoaderWeavingAdaptor clwAdaptor = new ClassLoaderWeavingAdaptor();
-				initializingAdaptor = true;
-				clwAdaptor.initialize(this,weavingContext);
-				initializingAdaptor = false;
-				adaptor = clwAdaptor;
+				createAdaptor();
 			}
 
 			b = adaptor.weaveClass(name,b);
 		}
 		return super.defineClass(name, b, cs);
 	}
+	
+	private void createAdaptor () {
+		DefaultWeavingContext weavingContext = new DefaultWeavingContext (this) {
+
+			/* Ensures consistent LTW messages for testing */
+			public String getClassLoaderName() {
+				return loader.getClass().getName();
+			}
+			
+		};
+		
+		ClassLoaderWeavingAdaptor clwAdaptor = new ClassLoaderWeavingAdaptor();
+		initializingAdaptor = true;
+		clwAdaptor.initialize(this,weavingContext);
+		initializingAdaptor = false;
+		adaptor = clwAdaptor;
+	}
 
 	/**
 	 * Override to find classes generated by WeavingAdaptor
@@ -0,0 +1,9 @@
+public aspect ExceptionHandler {
+	void around() : execution(public void main(String[])) {
+		try {
+			proceed();
+		}
+		catch (Exception ex) {
+		}
+	}
+}
\ No newline at end of file
@@ -2,6 +2,7 @@ public class HelloWorld {
 
 	public static void main (String[] args) throws Exception {
 		System.out.println("Hello World!");
+		throw new Exception();
 	}
 
 }
\ No newline at end of file
@@ -6,16 +6,38 @@
         name="jdwp"
         value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
 
-    <target name="JDK14 LTW">
+    <target name="JDK14 LTW with XML">
         <java fork="yes" classname="HelloWorld" failonerror="yes">
             <classpath refid="aj.path"/>
+<!--        	
             <classpath>
                 <pathelement path="${aj.sandbox}/hello.jar"/>
             </classpath>
+-->            
             <jvmarg value="-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader"/>
+            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar;${aj.sandbox}/handler.jar"/>
+            <jvmarg value="-Daj.weaving.verbose=true"/>
+            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
+            <jvmarg value="-Dorg.aspectj.tracing.debug=true"/>
+            <!-- use META-INF/aop.xml style -->
+<!--            <jvmarg value="-javaagent:${aj.root}/lib/test/loadtime5.jar"/>-->
+<!--            <jvmarg line="${jdwp}"/>-->
+        </java>
+    </target>
+
+    <target name="JDK14 LTW with ASPECTPATH">
+        <java fork="yes" classname="HelloWorld" failonerror="yes">
+            <classpath refid="aj.path"/>
         	<!--        	
+            <classpath>
+                <pathelement path="${aj.sandbox}/hello.jar"/>
+            </classpath>
 -->            
-            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar"/>
+            <jvmarg value="-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader"/>
+            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar;${aj.sandbox}/handler.jar"/>
+            <jvmarg value="-Daj.aspect.path=${aj.sandbox}/handler.jar"/>
+            <jvmarg value="-Daj.weaving.verbose=true"/>
+            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
             <jvmarg value="-Dorg.aspectj.tracing.debug=true"/>
             <!-- use META-INF/aop.xml style -->
 <!--            <jvmarg value="-javaagent:${aj.root}/lib/test/loadtime5.jar"/>-->
@@ -97,8 +97,12 @@ public class LTWTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("Odd zip on classpath");  		
   	}
 
-  	public void testJDK14LTW() {  	
-		runTest("JDK14 LTW");  		
+  	public void testJ14LTWWithXML() {  	
+		runTest("JDK14 LTW with XML");  		
+  	}
+  	
+  	public void testJ14LTWWithASPECTPATH() {  	
+		runTest("JDK14 LTW with ASPECTPATH");  		
   	}
 
   	// separate bugzilla patch has this one... commented out
@@ -470,11 +470,16 @@ commented out: reported in another bugzilla bug...
         </run>
     </ajc-test>
 -->
-	<ajc-test dir="ltw" title="JDK14 LTW" keywords="ltw">
-        <compile
-        	files="HelloWorld.java"
-        	options="-outjar hello.jar"
-        />
-        <ant file="ant.xml" target="JDK14 LTW" verbose="true"/>
+	<ajc-test dir="ltw" title="JDK14 LTW with XML" keywords="ltw">
+        <compile files="HelloWorld.java" options="-outjar hello.jar"/>
+        <compile files="ExceptionHandler.aj" options="-outxml -outjar handler.jar"/>
+        <ant file="ant.xml" target="JDK14 LTW with XML" verbose="true"/>
+    </ajc-test>
+    
+	<ajc-test dir="ltw" title="JDK14 LTW with ASPECTPATH" keywords="ltw">
+        <compile files="HelloWorld.java" options="-outjar hello.jar"/>
+        <compile files="ExceptionHandler.aj" options="-outjar handler.jar"/>
+        <ant file="ant.xml" target="JDK14 LTW with ASPECTPATH" verbose="true"/>
     </ajc-test>
 
+    
\ No newline at end of file
@@ -29,7 +29,13 @@ public abstract class ExtensibleURLClassLoader extends URLClassLoader {
 		super(urls,parent);
 
 //		System.err.println("? ExtensibleURLClassLoader.<init>() path=" + WeavingAdaptor.makeClasspath(urls));
-		classPath = new ClassPathManager(FileUtil.makeClasspath(urls),null);
+		try {
+			classPath = new ClassPathManager(FileUtil.makeClasspath(urls),null);
+		}
+		catch (ExceptionInInitializerError ex) {
+			ex.printStackTrace(System.out);
+			throw ex;
+		}
 	}
 
 	protected void addURL(URL url) {
@@ -46,11 +46,7 @@ public class ClassPathManager {
 	private static int maxOpenArchives       = -1;
     private static final int MAXOPEN_DEFAULT = 1000;
 
-    /*
-     * FIXME maw Tracing ClassPathManager can cause recursion for JDK 1.4 
-     * LTW i.e. -Djava.system.class.loader
-     */
-//    private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassPathManager.class);
+    private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassPathManager.class);
 
 	static {
 		String openzipsString = getSystemPropertyWithoutSecurityException("org.aspectj.weaver.openarchives",Integer.toString(MAXOPEN_DEFAULT));
@@ -61,13 +57,13 @@ public class ClassPathManager {
 
 
 	public ClassPathManager(List classpath, IMessageHandler handler) {
-//		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] { classpath, handler });
+		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] { classpath, handler });
 		entries = new ArrayList();
 		for (Iterator i = classpath.iterator(); i.hasNext();) {
 			String name = (String) i.next();
 			addPath(name, handler);
 		}
-//		if (trace.isTraceEnabled()) trace.exit("<init>");
+		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
 
 	protected ClassPathManager() {};
@@ -18,7 +18,7 @@ public abstract class AbstractTrace implements Trace {
 
 	protected Class tracedClass;
 
-	private static SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss.SSS");
+	private static SimpleDateFormat timeFormat;
 
 	protected AbstractTrace (Class clazz) {
 		this.tracedClass = clazz;
@@ -94,7 +94,7 @@ public abstract class AbstractTrace implements Trace {
 	protected String formatMessage(String kind, String className, String methodName, Object thiz, Object[] args) {
 		StringBuffer message = new StringBuffer();
 		Date now = new Date();
-		message.append(time.format(now)).append(" ");
+		message.append(formatDate(now)).append(" ");
 		message.append(Thread.currentThread().getName()).append(" ");
 		message.append(kind).append(" ");
 		message.append(className);
@@ -103,6 +103,14 @@ public abstract class AbstractTrace implements Trace {
 		if (args != null) message.append(" ").append(formatArgs(args));
 		return message.toString();
 	}
+	
+	private static String formatDate (Date date) {
+		if (timeFormat == null) {
+			timeFormat = new SimpleDateFormat("HH:mm:ss.SSS");
+		}
+		
+		return timeFormat.format(date);
+	}
 
 	/**
 	 * Format objects safely avoiding toString which can cause recursion,
@@ -70,9 +70,10 @@ public class Aj implements ClassPreProcessor {
         	synchronized (loader) {
                 WeavingAdaptor weavingAdaptor = WeaverContainer.getWeaver(loader, weavingContext);
                 if (weavingAdaptor == null) {
-            		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
+            		if (trace.isTraceEnabled()) trace.exit("preProcess");
                 	return bytes;
                 }
+        		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
                 return weavingAdaptor.weaveClass(className, bytes);
 			}
         } catch (Exception t) {
@@ -0,0 +1,7 @@
+public class HelloWorld {
+	
+	public static void main (String[] args) throws Exception {
+		System.out.println("Hello World!");
+	}
+	
+}
\ No newline at end of file
@@ -0,0 +1,26 @@
+<!-- ajc-ant script, not to be used from Ant commant line - see AntSpec -->
+<project name="ltw">
+
+    <!-- using this we can debug the forked VM -->
+    <property
+        name="jdwp"
+        value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
+
+    <target name="JDK14 LTW">
+        <java fork="yes" classname="HelloWorld" failonerror="yes">
+            <classpath refid="aj.path"/>
+            <classpath>
+                <pathelement path="${aj.sandbox}/hello.jar"/>
+            </classpath>
+            <jvmarg value="-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader"/>
+        	<!--        	
+-->            
+            <jvmarg value="-Daj.class.path=${aj.sandbox}/hello.jar"/>
+            <jvmarg value="-Dorg.aspectj.tracing.debug=true"/>
+            <!-- use META-INF/aop.xml style -->
+<!--            <jvmarg value="-javaagent:${aj.root}/lib/test/loadtime5.jar"/>-->
+<!--            <jvmarg line="${jdwp}"/>-->
+        </java>
+    </target>
+
+</project>
@@ -97,6 +97,10 @@ public class LTWTests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("Odd zip on classpath");  		
   	}
 
+  	public void testJDK14LTW() {  	
+		runTest("JDK14 LTW");  		
+  	}
+  	
   	// separate bugzilla patch has this one... commented out
 //  	public void testSeparateCompilationDeclareParentsCall() {
 //  		runTest("Separate compilation with ltw: declare parents and call");
@@ -470,4 +470,11 @@ commented out: reported in another bugzilla bug...
         </run>
     </ajc-test>
 -->
+	<ajc-test dir="ltw" title="JDK14 LTW" keywords="ltw">
+        <compile
+        	files="HelloWorld.java"
+        	options="-outjar hello.jar"
+        />
+        <ant file="ant.xml" target="JDK14 LTW" verbose="true"/>
+    </ajc-test>
 
@@ -46,7 +46,11 @@ public class ClassPathManager {
 	private static int maxOpenArchives       = -1;
     private static final int MAXOPEN_DEFAULT = 1000;
 
-    private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassPathManager.class);
+    /*
+     * FIXME maw Tracing ClassPathManager can cause recursion for JDK 1.4 
+     * LTW i.e. -Djava.system.class.loader
+     */
+//    private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassPathManager.class);
 
 	static {
 		String openzipsString = getSystemPropertyWithoutSecurityException("org.aspectj.weaver.openarchives",Integer.toString(MAXOPEN_DEFAULT));
@@ -57,13 +61,13 @@ public class ClassPathManager {
 
 
 	public ClassPathManager(List classpath, IMessageHandler handler) {
-		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] { classpath, handler });
+//		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] { classpath, handler });
 		entries = new ArrayList();
 		for (Iterator i = classpath.iterator(); i.hasNext();) {
 			String name = (String) i.next();
 			addPath(name, handler);
 		}
-		if (trace.isTraceEnabled()) trace.exit("<init>");
+//		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
 
 	protected ClassPathManager() {};
@@ -23,10 +23,6 @@ public abstract class TraceFactory {
     public Trace getTrace (Class clazz) {
     	return instance.getTrace(clazz);
     }
-
-	public boolean isEnabled() {
-		return true;
-	}
 
     public static TraceFactory getTraceFactory () {
     	return instance;
@@ -28,9 +28,4 @@ public class TraceFactoryTest extends TestCase {
 		assertNotNull(trace);
 	}
 
-	public void testIsEnabled() {
-		TraceFactory traceFactory = TraceFactory.getTraceFactory();
-		assertTrue(traceFactory.isEnabled());
-	}
-
 }
@@ -26,32 +26,39 @@ public class CommonsTrace extends AbstractTrace {
 
 	public void enter(String methodName, Object thiz, Object[] args) {
 		if (log.isDebugEnabled()) {
-			log.debug("> " + formatMessage(className, methodName, thiz, args));
+			log.debug(formatMessage(">", className, methodName, thiz, args));
 		}
 	}
 
 	public void enter(String methodName, Object thiz) {
 		if (log.isDebugEnabled()) {
-			log.debug("> " + formatMessage(className, methodName, thiz, null));
+			log.debug(formatMessage(">", className, methodName, thiz, null));
 		}
 	}
 
 	public void exit(String methodName, Object ret) {
 		if (log.isDebugEnabled()) {
-			log.debug("< " + formatMessage(className, methodName, ret, null));
+			log.debug(formatMessage("<", className, methodName, ret, null));
 		}
 	}
 
 	public void exit(String methodName, Throwable th) {
 		if (log.isDebugEnabled()) {
-			log.debug("< " + formatMessage(className, methodName, th, null));
+			log.debug(formatMessage("<", className, methodName, th, null));
 		}
 	}
 
 	public void exit(String methodName) {
 		if (log.isDebugEnabled()) {
-			log.debug("< " + formatMessage(className, methodName, null, null));
+			log.debug(formatMessage("<", className, methodName, null, null));
 		}
 	}
 
+	public boolean isTraceEnabled () {
+		return log.isDebugEnabled();
+	}
+
+	public void setTraceEnabled (boolean b) {
+	}
+
 }
@@ -12,40 +12,48 @@ package org.aspectj.weaver.tools;
 
 public class DefaultTrace extends AbstractTrace {
 
+	private boolean traceEnabled = false; 
+	
 	public DefaultTrace (Class clazz) {
 		super(clazz);
 	}
 
+	public boolean isTraceEnabled () {
+		return traceEnabled;
+	}
+	
+	public void setTraceEnabled (boolean b) {
+		traceEnabled = b;
+	}
+	
 	public void enter (String methodName, Object thiz, Object[] args) {
-		if (tracingEnabled) {
-//			println("> " + tracedClass.getName() + "." + methodName + " " + formatObj(thiz) + " " + formatArgs(args));
-			println("> " + formatMessage(tracedClass.getName(),methodName,thiz,args));
+		if (traceEnabled) {
+			println(formatMessage(">",tracedClass.getName(),methodName,thiz, args));
 		}
 	}
 
 	public void enter (String methodName, Object thiz) {
-		if (tracingEnabled) {
-//			println("> " + tracedClass.getName() + "." + methodName + " " + formatObj(thiz));
-			println("> " + formatMessage(tracedClass.getName(),methodName,thiz,null));
+		if (traceEnabled) {
+			println(formatMessage(">",tracedClass.getName(),methodName,thiz, null));
 		}
 	}
 
 	public void exit (String methodName, Object ret) {
-		if (tracingEnabled) {
-//			println("< " + tracedClass.getName() + "." + methodName + " " + formatObj(ret));
-			println("< " + formatMessage(tracedClass.getName(),methodName,ret,null));
+		if (traceEnabled) {
+			println(formatMessage("<",tracedClass.getName(),methodName,ret, null));
 		}
 	}
 
 	public void exit (String methodName) {
-		if (tracingEnabled) {
-//			println("< " + tracedClass.getName() + "." + methodName);
-			println("< " + formatMessage(tracedClass.getName(),methodName,null,null));
+		if (traceEnabled) {
+			println(formatMessage("<",tracedClass.getName(),methodName,null, null));
 		}
 	}
 
 	public void exit(String methodName, Throwable th) {
-		exit(methodName,th);
+		if (traceEnabled) {
+			println(formatMessage("<",tracedClass.getName(),methodName,th, null));
+		}
 	}
 
 	/**
@@ -57,12 +65,12 @@ public class DefaultTrace extends AbstractTrace {
 		System.err.println(s);
 	}
 
-	private static boolean tracingEnabled = getBoolean("org.aspectj.weaver.tools.tracing",false);
-
-	private static boolean getBoolean (String name, boolean def) {
-		String defaultValue = String.valueOf(def);
-		String value = System.getProperty(name,defaultValue);
-		return Boolean.valueOf(value).booleanValue();
-	}
+//	private static boolean isTracingEnabled = getBoolean("org.aspectj.weaver.tools.tracing",false);
+//
+//	private static boolean getBoolean (String name, boolean def) {
+//		String defaultValue = String.valueOf(def);
+//		String value = System.getProperty(name,defaultValue);
+//		return Boolean.valueOf(value).booleanValue();
+//	}
 
 }
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+public class DefaultTraceFactory extends TraceFactory {
+
+	public final static String ENABLED_PROPERTY = "org.aspectj.tracing.enabled";
+
+    private boolean tracingEnabled = getBoolean(ENABLED_PROPERTY,false);
+
+    public boolean isEnabled() {
+		return tracingEnabled;
+	}
+    
+    public Trace getTrace (Class clazz) {
+    	DefaultTrace trace = new DefaultTrace(clazz);
+    	trace.setTraceEnabled(tracingEnabled);
+    	return trace;
+    }
+
+}
@@ -46,4 +46,6 @@ public interface Trace {
 	public void exit (String methodName, boolean b);
 
 	public boolean isTraceEnabled ();
+
+	public void setTraceEnabled (boolean b);
 }
@@ -12,19 +12,33 @@ package org.aspectj.weaver.tools;
 
 import org.aspectj.util.LangUtil;
 
-public class TraceFactory {
+public abstract class TraceFactory {
 
-    public static TraceFactory instance = new TraceFactory(); 
+	public final static String DEBUG_PROPERTY = "org.aspectj.tracing.debug";
+	public final static String FACTORY_PROPERTY = "org.aspectj.tracing.factory";
+	
+    private static boolean debug = getBoolean(DEBUG_PROPERTY,false); 
+    private static TraceFactory instance = new DefaultTraceFactory();
 
     public Trace getTrace (Class clazz) {
-    	return new DefaultTrace(clazz);
+    	return instance.getTrace(clazz);
     }
+
+	public boolean isEnabled() {
+		return true;
+	}
 
     public static TraceFactory getTraceFactory () {
     	return instance;
     }
 
-    static {
+    protected static boolean getBoolean(String name, boolean def) {
+		String defaultValue = String.valueOf(def);
+		String value = System.getProperty(name,defaultValue);
+		return Boolean.valueOf(value).booleanValue();
+	}
+
+	static {
     	try {
 			if (LangUtil.is15VMOrGreater()) {
 	    		Class factoryClass = Class.forName("org.aspectj.weaver.tools.Jdk14TraceFactory");
@@ -35,9 +49,10 @@ public class TraceFactory {
 			}
     	}
     	catch (Throwable th) {
-//    		th.printStackTrace();
+    		if (debug) th.printStackTrace();
     	}
-//    	System.out.println("TraceFactory.<clinit>() instance=" + instance);
+    	
+    	if (debug) System.out.println("TraceFactory.instance=" + instance);
     }
 
 }
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTracingTests {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite(AllTracingTests.class.getName());
+		//$JUnit-BEGIN$
+		suite.addTestSuite(TraceFactoryTest.class);
+		suite.addTestSuite(DefaultTraceFactoryTest.class);
+		suite.addTestSuite(DefaultTraceTest.class);
+		suite.addTestSuite(CommonsTraceFactoryTest.class);
+		suite.addTestSuite(CommonsTraceTest.class);
+		//$JUnit-END$
+		return suite;
+	}
+
+}
@@ -54,6 +54,7 @@ public class BcweaverTests extends TestCase {
 		suite.addTestSuite(TypeXTestCase.class); 
 		suite.addTestSuite(WeaverMessagesTestCase.class);
 		suite.addTestSuite(DumpTestCase.class);
+        suite.addTest(AllTracingTests.suite());
         //$JUnit-END$
         return suite;
     }
@@ -0,0 +1,26 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.TestCase;
+
+import org.aspectj.weaver.tools.CommonsTraceFactory;
+import org.aspectj.weaver.tools.Trace;
+
+public class CommonsTraceFactoryTest extends TestCase {
+
+	public void testGetTraceFactory() {
+		CommonsTraceFactory factory = new CommonsTraceFactory();
+		Trace trace = factory.getTrace(getClass());
+		assertFalse("Tracing should be disbled by default",trace.isTraceEnabled());
+	}
+
+}
@@ -0,0 +1,67 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import org.aspectj.weaver.tools.CommonsTrace;
+
+import junit.framework.TestCase;
+
+public class CommonsTraceTest extends TestCase {
+
+	private CommonsTrace trace; 
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+		trace = new CommonsTrace(getClass());
+		trace.setTraceEnabled(true);
+	}
+
+	public void testCommonsTrace() {
+		CommonsTrace trace = new CommonsTrace(getClass());
+	}
+
+	public void testEnterWithThisAndArgs() {
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
+	}
+
+	public void testEnterWithThis() {
+		trace.enter("testEnterWithThis",this);
+	}
+
+	public void testEnter() {
+		trace.enter("testEnter");
+	}
+
+	public void testExitWithReturn() {
+		trace.exit("testExitWithReturn","ret");
+	}
+
+	public void testExitWithThrowable() {
+		trace.exit("testExitWithThrowable",new RuntimeException());
+	}
+
+	public void testExit() {
+		trace.exit("testExit");
+	}
+
+	public void testIsTraceEnabled() {
+		CommonsTrace trace = new CommonsTrace(getClass());
+		assertFalse(trace.isTraceEnabled());
+	}
+
+	public void testSetTraceEnabled() {
+		CommonsTrace trace = new CommonsTrace(getClass());
+		trace.setTraceEnabled(true);
+		/* XXX Need to find out how to turn tracing on */
+//		assertTrue(trace.isTraceEnabled());
+	}
+
+}
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import org.aspectj.weaver.tools.DefaultTraceFactory;
+import org.aspectj.weaver.tools.Trace;
+
+import junit.framework.TestCase;
+
+public class DefaultTraceFactoryTest extends TestCase {
+
+	public void testGetTrace() {
+		DefaultTraceFactory factory = new DefaultTraceFactory();
+		Trace trace = factory.getTrace(getClass());
+		assertFalse("Tracing should be disbled by default",trace.isTraceEnabled());
+	}
+
+//	public void testIsEnabled() {
+//		fail("Not yet implemented");
+//	}
+
+}
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.TestCase;
+
+import org.aspectj.weaver.tools.DefaultTrace;
+
+public class DefaultTraceTest extends TestCase {
+
+	private DefaultTrace trace; 
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+		trace = new DefaultTrace(getClass());
+		trace.setTraceEnabled(true);
+	}
+
+	public void testDefaultTrace() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+	}
+
+	public void testEnterWithThisAndArgs() {
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
+	}
+
+	public void testEnterWithThis() {
+		trace.enter("testEnterWithThis",this);
+	}
+
+	public void testEnter() {
+		trace.enter("testEnter");
+	}
+
+	public void testExitWithReturn() {
+		trace.exit("testExitWithReturn","ret");
+	}
+
+	public void testExitWithThrowable() {
+		trace.exit("testExitWithThrowable",new RuntimeException());
+	}
+
+	public void testExit() {
+		trace.exit("testExit");
+	}
+
+	public void testIsTraceEnabled() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+		assertFalse(trace.isTraceEnabled());
+	}
+
+	public void testSetTraceEnabled() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+		trace.setTraceEnabled(true);
+		assertTrue(trace.isTraceEnabled());
+	}
+
+}
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
+
+import junit.framework.TestCase;
+
+public class TraceFactoryTest extends TestCase {
+
+	public void testGetTraceFactory() {
+		TraceFactory traceFactory = TraceFactory.getTraceFactory();
+		assertNotNull(traceFactory);
+	}
+
+	public void testGetTrace() {
+		TraceFactory traceFactory = TraceFactory.getTraceFactory();
+		Trace trace = traceFactory.getTrace(getClass());
+		assertNotNull(trace);
+	}
+
+	public void testIsEnabled() {
+		TraceFactory traceFactory = TraceFactory.getTraceFactory();
+		assertTrue(traceFactory.isEnabled());
+	}
+
+}
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.aspectj.weaver.tools;
 
+import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -55,9 +56,26 @@ public class Jdk14Trace extends AbstractTrace {
 		}
 	}
 
-	@Override
 	public boolean isTraceEnabled() {
-		return logger.isLoggable(Level.FINE);
+		return logger.isLoggable(Level.FINER);
+	}
+
+	public void setTraceEnabled (boolean b) {
+		if (b) {
+			logger.setLevel(Level.FINER);
+			Handler[] handlers = logger.getHandlers();
+			if (handlers.length == 0) {
+				Logger parent = logger.getParent();
+				if (parent != null) handlers = parent.getHandlers();
+			}
+			for (int i = 0; i < handlers.length; i++) {
+				Handler handler = handlers[i];
+				handler.setLevel(Level.FINER);
+			}
+		}
+		else {
+			logger.setLevel(Level.INFO);
+		}
 	}
 
 }
@@ -1,3 +1,7 @@
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.aspectj.weaver.AllTracing5Tests;
 import org.aspectj.weaver.TestJava5ReflectionBasedReferenceTypeDelegate;
 import org.aspectj.weaver.patterns.ArgsTestCase;
 import org.aspectj.weaver.patterns.ThisOrTargetTestCase;
@@ -6,9 +10,6 @@ import org.aspectj.weaver.tools.PointcutExpressionTest;
 import org.aspectj.weaver.tools.PointcutParserTest;
 import org.aspectj.weaver.tools.TypePatternMatcherTest;
 
-import junit.framework.Test;
-import junit.framework.TestSuite;
-
 public class AllWeaver5Tests {
 
 	public static Test suite() {
@@ -21,6 +22,7 @@ public class AllWeaver5Tests {
 		suite.addTestSuite(PointcutExpressionTest.class);
 		suite.addTestSuite(PointcutParserTest.class);
 		suite.addTestSuite(TypePatternMatcherTest.class);
+        suite.addTest(AllTracing5Tests.suite());
 		//$JUnit-END$
 		return suite;
 	}
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class AllTracing5Tests {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("Test for org.aspectj.weaver");
+		//$JUnit-BEGIN$
+		suite.addTestSuite(Jdk14TraceFactoryTest.class);
+		suite.addTestSuite(Jdk14TraceTest.class);
+		//$JUnit-END$
+		return suite;
+	}
+
+}
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import junit.framework.TestCase;
+
+import org.aspectj.weaver.tools.Jdk14TraceFactory;
+import org.aspectj.weaver.tools.Trace;
+
+public class Jdk14TraceFactoryTest extends TestCase {
+
+	public void testJdk14TraceFactory() {
+		Jdk14TraceFactory factory = new Jdk14TraceFactory();
+	}
+
+	public void testGetTrace() {
+		Jdk14TraceFactory factory = new Jdk14TraceFactory();
+		Trace trace = factory.getTrace(getClass());
+		assertFalse("Tracing should be disbled by default",trace.isTraceEnabled());
+	}
+
+}
@@ -0,0 +1,67 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver;
+
+import org.aspectj.weaver.tools.DefaultTrace;
+import org.aspectj.weaver.tools.Jdk14Trace;
+
+import junit.framework.TestCase;
+
+public class Jdk14TraceTest extends TestCase {
+
+	private Jdk14Trace trace; 
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+		trace = new Jdk14Trace(getClass());
+		trace.setTraceEnabled(true);
+	}
+
+	public void testJdk14Trace() {
+		Jdk14Trace trace = new Jdk14Trace(getClass());
+	}
+
+	public void testEnterWithThisAndArgs() {
+		trace.enter("testEnterWithThisAndArgs",this,new Object[] { "arg1", "arg2" });
+	}
+
+	public void testEnterWithThis() {
+		trace.enter("testEnterWithThis",this);
+	}
+
+	public void testEnter() {
+		trace.enter("testEnter");
+	}
+
+	public void testExitWithReturn() {
+		trace.exit("testExitWithReturn","ret");
+	}
+
+	public void testExitWithThrowable() {
+		trace.exit("testExitWithThrowable",new RuntimeException());
+	}
+
+	public void testExit() {
+		trace.exit("testExit");
+	}
+
+	public void testIsTraceEnabled() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+		assertFalse(trace.isTraceEnabled());
+	}
+
+	public void testSetTraceEnabled() {
+		DefaultTrace trace = new DefaultTrace(getClass());
+		trace.setTraceEnabled(true);
+		assertTrue(trace.isTraceEnabled());
+	}
+
+}
@@ -25,6 +25,7 @@ public class Weaver5ModuleTests extends TestCase {
         TestSuite suite = new TestSuite(Weaver5ModuleTests.class.getName());
         if (TestUtil.is15VMOrGreater()) {
 	            TestUtil.loadTestsReflectively(suite, "org.aspectj.weaver.tools.Java15PointcutExpressionTest", false);
+	            TestUtil.loadTestsReflectively(suite, "org.aspectj.weaver.AllTracing5Tests", false);
 	            suite.addTestSuite(PointcutExpressionTest.class);
         } else {
             suite.addTest(TestUtil.testNamed("all tests require 1.5"));
@@ -11,10 +11,14 @@
 package org.aspectj.weaver.tools;
 
 import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.Date;
 
 public abstract class AbstractTrace implements Trace {
 
 	protected Class tracedClass;
+
+	private static SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss.SSS");
 
 	protected AbstractTrace (Class clazz) {
 		this.tracedClass = clazz;
@@ -71,6 +75,10 @@ public abstract class AbstractTrace implements Trace {
 	/*
 	 * Convenience methods
 	 */
+	public void enter (String methodName) {
+		enter(methodName,null,null);
+	}
+
 	public void enter (String methodName, Object thiz, Object arg) {
 		enter(methodName,thiz,new Object[] { arg });
 	}
@@ -83,12 +91,12 @@ public abstract class AbstractTrace implements Trace {
 		exit(methodName,new Boolean(b));
 	}
 
-	public boolean isTraceEnabled () {
-		return true;
-	}
-
-	protected String formatMessage(String className, String methodName, Object thiz, Object[] args) {
+	protected String formatMessage(String kind, String className, String methodName, Object thiz, Object[] args) {
 		StringBuffer message = new StringBuffer();
+		Date now = new Date();
+		message.append(time.format(now)).append(" ");
+		message.append(Thread.currentThread().getName()).append(" ");
+		message.append(kind).append(" ");
 		message.append(className);
 		message.append(".").append(methodName);
 		if (thiz != null) message.append(" ").append(formatObj(thiz));
@@ -150,5 +158,4 @@ public abstract class AbstractTrace implements Trace {
 
 		return sb.toString();
 	}
-
 }
@@ -668,7 +668,12 @@ public class AjcTestCase extends TestCase {
 			Constructor constructor = loaderClazz.getConstructor(parameterTypes);
 			loader = (URLClassLoader)constructor.newInstance(parameters);
 		}
+		catch (InvocationTargetException ex) {
+			ex.printStackTrace();
+			fail("Cannot create weaving class loader: " + ex.getCause());
+		}
 		catch (Exception ex) {
+			ex.printStackTrace();
 			fail("Cannot create weaving class loader: " + ex.toString());
 		}
 
@@ -34,7 +34,8 @@ public class TraceFactory {
 	    		instance = (TraceFactory)factoryClass.newInstance();
 			}
     	}
-    	catch (Exception ex) {
+    	catch (Throwable th) {
+//    		th.printStackTrace();
     	}
 //    	System.out.println("TraceFactory.<clinit>() instance=" + instance);
     }
@@ -301,7 +301,8 @@
 				<!-- see skipped libraries in Builder.properties -->
            	    <pathelement location="${jdk.tools.jar}"/>
             	<pathelement location="${aspectj.modules.lib.dir}/junit/junit.jar"/> 
-				<!-- XML api's used by loadtime, also needed when running under 1.3 per Ant FAQ -->
+           		<fileset dir="${aspectj.modules.lib.dir}/commons" includes="commons.jar"/>
+           		<!-- XML api's used by loadtime, also needed when running under 1.3 per Ant FAQ -->
            	    <fileset dir="${aspectj.modules.lib.dir}/ant/lib" 
                 	includes="ant.jar,ant-junit.jar,xml-apis.jar,xercesImpl.jar"/>
            	</classpath>
Binary files differ
@@ -9,7 +9,7 @@ alias.aspectjlib.jar=org.aspectj.lib.jar
 
 # libraries to avoid bundling (IBM JRE different, etc.)
 # see build/readme-build-module.html, Builder.SKIP_LIBRARIES
-skip.libraries=core.jar,graphics.jar,ant.jar,tools.jar,junit.jar,xml-apis.jar,xercesImpl.jar
+skip.libraries=core.jar,graphics.jar,ant.jar,tools.jar,junit.jar,xml-apis.jar,xercesImpl.jar,commons.jar
 
 # Ant patterns to gather and omit resources
 # files copied during module jar assembly
@@ -14,6 +14,8 @@ package org.aspectj.weaver.loadtime;
 import java.util.Map;
 import java.util.WeakHashMap;
 
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 import org.aspectj.weaver.tools.WeavingAdaptor;
 
 /**
@@ -26,13 +28,17 @@ public class Aj implements ClassPreProcessor {
 
 	private IWeavingContext weavingContext;
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(Aj.class);
+	
 	public Aj(){
 		this(null);
 	}
 
 
 	public Aj(IWeavingContext context){
-		weavingContext = context;
+		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] {context});
+		this.weavingContext = context;
+		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
 
     /**
@@ -51,22 +57,28 @@ public class Aj implements ClassPreProcessor {
      * @return weaved bytes
      */
     public byte[] preProcess(String className, byte[] bytes, ClassLoader loader) {
+		if (trace.isTraceEnabled()) trace.enter("preProcess",this,new Object[] {className,bytes,loader});
+    	
         //TODO AV needs to doc that
         if (loader == null || className == null) {
             // skip boot loader or null classes (hibernate)
+    		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
             return bytes;
         }
 
         try {
             WeavingAdaptor weavingAdaptor = WeaverContainer.getWeaver(loader, weavingContext);
             if (weavingAdaptor == null) {
+        		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
             	return bytes;
             }
             return weavingAdaptor.weaveClass(className, bytes);
         } catch (Exception t) {
+    		trace.error("preProcess",t);
             //FIXME AV wondering if we should have the option to fail (throw runtime exception) here
             // would make sense at least in test f.e. see TestHelper.handleMessage()
             t.printStackTrace();
+    		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
             return bytes;
         }
     }
@@ -46,6 +46,8 @@ import org.aspectj.weaver.ltw.LTWWorld;
 import org.aspectj.weaver.patterns.PatternParser;
 import org.aspectj.weaver.patterns.TypePattern;
 import org.aspectj.weaver.tools.GeneratedClassHandler;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 import org.aspectj.weaver.tools.WeavingAdaptor;
 
 /**
@@ -72,10 +74,14 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
     private ClassLoader classLoader;
     private IWeavingContext weavingContext;
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassLoaderWeavingAdaptor.class);
+    
     public ClassLoaderWeavingAdaptor(final ClassLoader loader, IWeavingContext wContext) {
     	super();
+    	if (trace.isTraceEnabled()) trace.enter("<init>",this);
     	this.classLoader = loader;
     	this.weavingContext = wContext;
+    	if (trace.isTraceEnabled()) trace.exit("<init>");
     }
 
     protected void initialize (final ClassLoader deprecatedLoader, IWeavingContext deprecatedContext) {
@@ -334,6 +340,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
      * @param definitions
      */
     private void registerAspects(final BcelWeaver weaver, final ClassLoader loader, final List definitions) {
+    	if (trace.isTraceEnabled()) trace.enter("registerAspects",this, new Object[] { weaver, loader, definitions} );
         //TODO: the exclude aspect allow to exclude aspect defined upper in the CL hierarchy - is it what we want ??
         // if not, review the getResource so that we track which resource is defined by which CL
 
@@ -396,6 +403,8 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
         	enabled = false;
     		info("no aspects registered. Disabling weaver for class loader " + getClassLoaderName(loader));
         }
+
+        if (trace.isTraceEnabled()) trace.exit("registerAspects",enabled);
     }
 
     /**
@@ -647,6 +656,8 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
     }
 
 	private void defineClass(ClassLoader loader, String name, byte[] bytes) {
+    	if (trace.isTraceEnabled()) trace.enter("defineClass",this,new Object[] {loader,name,bytes});
+    	Object clazz = null;
 		info("generating class '" + name + "'");
 
 		try {
@@ -655,7 +666,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
 					"defineClass", new Class[] { String.class,
 							bytes.getClass(), int.class, int.class });
 			defineClass.setAccessible(true);
-			defineClass.invoke(loader, new Object[] { name, bytes,
+			clazz = defineClass.invoke(loader, new Object[] { name, bytes,
 					new Integer(0), new Integer(bytes.length) });
 		} catch (InvocationTargetException e) {
 			if (e.getTargetException() instanceof LinkageError) {
@@ -668,5 +679,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
 		} catch (Exception e) {
 			warn("define generated class failed",e);
 		}
+
+		if (trace.isTraceEnabled()) trace.exit("defineClass",clazz);
 	}
 }
@@ -68,7 +68,7 @@ public class DefaultWeavingContext implements IWeavingContext {
 	 */
 	public String getId () {
 		if (shortName == null) {
-			shortName = getClassLoaderName();
+			shortName = getClassLoaderName().replace('$','.');
 			int index = shortName.lastIndexOf(".");
 			shortName = shortName.substring(index + 1);
 		}
@@ -15,7 +15,10 @@ import junit.framework.Test;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
+import org.aspectj.weaver.loadtime.AjTest;
+import org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptorTest;
 import org.aspectj.weaver.loadtime.JRockitAgentTest;
+import org.aspectj.weaver.loadtime.WeavingContextTest;
 import org.aspectj.weaver.loadtime.WeavingURLClassLoaderTest;
 import org.aspectj.weaver.loadtime.test.DocumentParserTest;
 
@@ -28,8 +31,11 @@ public class LoadtimeModuleTests extends TestCase {
         TestSuite suite = new TestSuite(LoadtimeModuleTests.class.getName());
 
         suite.addTestSuite(DocumentParserTest.class);
-        suite.addTestSuite(WeavingURLClassLoaderTest.class);
+        suite.addTestSuite(AjTest.class);
+        suite.addTestSuite(ClassLoaderWeavingAdaptorTest.class);
         suite.addTestSuite(JRockitAgentTest.class);
+        suite.addTestSuite(WeavingContextTest.class);
+        suite.addTestSuite(WeavingURLClassLoaderTest.class);
         return suite;
     }
 
@@ -12,5 +12,6 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/aspectj5rt"/>
 	<classpathentry kind="lib" path="/lib/asm/asm-aj.jar"/>
 	<classpathentry sourcepath="/lib/bcel/bcel-src.zip" kind="lib" path="/lib/bcel/bcel.jar"/>
+	<classpathentry sourcepath="/lib/commons/commons-src.zip" kind="lib" path="/lib/commons/commons.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
@@ -28,6 +28,8 @@ import org.aspectj.bridge.IMessage;
 import org.aspectj.bridge.ISourceLocation;
 import org.aspectj.bridge.Message;
 import org.aspectj.bridge.MessageUtil;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 public class Lint {
 	/* private */ Map kinds = new HashMap();
@@ -123,14 +125,20 @@ public class Lint {
 		new Kind("cantFindType","{0}");
 
 	public final Kind cantFindTypeAffectingJoinPointMatch = new Kind("cantFindTypeAffectingJPMatch","{0}");
+
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(Lint.class);
 
     public Lint(World world) {
+    	if (trace.isTraceEnabled()) trace.enter("<init>",this,world);
 		this.world = world;
+		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
 
 
 	public void setAll(String messageKind) {
+		if (trace.isTraceEnabled()) trace.enter("setAll",this,messageKind);
 		setAll(getMessageKind(messageKind));
+		if (trace.isTraceEnabled()) trace.exit("setAll");
 	}
 
 	private void setAll(IMessage.Kind messageKind) {
@@ -141,6 +149,7 @@ public class Lint {
 	}
 
 	public void setFromProperties(File file) {
+		if (trace.isTraceEnabled()) trace.enter("setFromProperties",this,file);
 		try {
 			InputStream s = new FileInputStream(file);
 			setFromProperties(s);
@@ -148,6 +157,7 @@ public class Lint {
 			MessageUtil.error(world.getMessageHandler(),
 					WeaverMessages.format(WeaverMessages.XLINT_LOAD_ERROR,file.getPath(),ioe.getMessage()));
 		}
+		if (trace.isTraceEnabled()) trace.exit("setFromProperties");
 	}
 
 	public void loadDefaultProperties() {
@@ -38,6 +38,8 @@ import org.aspectj.weaver.patterns.DeclarePrecedence;
 import org.aspectj.weaver.patterns.PerClause;
 import org.aspectj.weaver.patterns.Pointcut;
 import org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 /**
  * A World is a collection of known types and crosscutting members.
@@ -109,6 +111,7 @@ public abstract class World implements Dump.INode {
 	public boolean forDEBUG_structuralChangesCode = false;
 	public boolean forDEBUG_bridgingCode = false;
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(World.class);
 
     // Records whether ASM is around ... so we might use it for delegates
     protected static boolean isASMAround;
@@ -138,6 +141,7 @@ public abstract class World implements Dump.INode {
      */
     protected World() {
         super();
+        if (trace.isTraceEnabled()) trace.enter("<init>", this);
         Dump.registerNode(this.getClass(),this);
         typeMap.put("B", ResolvedType.BYTE);
         typeMap.put("S", ResolvedType.SHORT);
@@ -149,6 +153,7 @@ public abstract class World implements Dump.INode {
         typeMap.put("Z", ResolvedType.BOOLEAN);
         typeMap.put("V", ResolvedType.VOID);
         precedenceCalculator = new AspectPrecedenceCalculator(this);
+        if (trace.isTraceEnabled()) trace.exit("<init>");
     }
 
     /**
@@ -305,7 +310,10 @@ public abstract class World implements Dump.INode {
      * Convenience method for finding a type by name and resolving it in one step.
      */
     public ResolvedType resolve(String name) {
-    	return resolve(UnresolvedType.forName(name));
+//    	trace.enter("resolve", this, new Object[] {name});
+    	ResolvedType ret = resolve(UnresolvedType.forName(name));
+//    	trace.exit("resolve", ret);
+    	return ret;
     }
 
     public ResolvedType resolve(String name,boolean allowMissing) {
@@ -595,6 +603,9 @@ public abstract class World implements Dump.INode {
 			}
 		}
 
+	public boolean debug (String message) {
+		return MessageUtil.debug(messageHandler,message);
+	}
 
 	public void setCrossReferenceHandler(ICrossReferenceHandler xrefHandler) {
 		this.xrefHandler = xrefHandler;
@@ -819,9 +830,13 @@ public abstract class World implements Dump.INode {
 		private int collectedTypes = 0;
 		private ReferenceQueue rq = new ReferenceQueue();
 
+		private static Trace trace = TraceFactory.getTraceFactory().getTrace(World.TypeMap.class);
+		
 		TypeMap(World w) {
+			if (trace.isTraceEnabled()) trace.enter("<init>",this,w);
 			this.w = w;
 			memoryProfiling = false;// !w.getMessageHandler().isIgnoring(Message.INFO);
+			if (trace.isTraceEnabled()) trace.exit("<init>");
 		}
 
 		/** 
@@ -95,6 +95,8 @@ import org.aspectj.weaver.patterns.OrPointcut;
 import org.aspectj.weaver.patterns.Pointcut;
 import org.aspectj.weaver.patterns.PointcutRewriter;
 import org.aspectj.weaver.patterns.WithinPointcut;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 
 public class BcelWeaver implements IWeaver {
@@ -106,11 +108,15 @@ public class BcelWeaver implements IWeaver {
 
     private boolean inReweavableMode = false;
 
+    private static Trace trace = TraceFactory.getTraceFactory().getTrace(BcelWeaver.class);
+
     public BcelWeaver(BcelWorld world) {
         super();
+        if (trace.isTraceEnabled()) trace.enter("<init>",this,world);
         WeaverMetrics.reset();
         this.world = world;
         this.xcutSet = world.getCrosscuttingMembersSet();
+        if (trace.isTraceEnabled()) trace.exit("<init>");
     }
 
     public BcelWeaver() {
@@ -149,7 +155,9 @@ public class BcelWeaver implements IWeaver {
      * @return aspect
      */
     public ResolvedType addLibraryAspect(String aspectName) {
-        // 1 - resolve as is
+    	if (trace.isTraceEnabled()) trace.enter("addLibraryAspect",this,aspectName);
+
+    	// 1 - resolve as is
     	UnresolvedType unresolvedT = UnresolvedType.forName(aspectName);
     	unresolvedT.setNeedsModifiableDelegate(true);
         ResolvedType type = world.resolve(unresolvedT, true);
@@ -185,10 +193,13 @@ public class BcelWeaver implements IWeaver {
             //TODO AV - happens to reach that a lot of time: for each type flagged reweavable X for each aspect in the weaverstate
             //=> mainly for nothing for LTW - pbly for something in incremental build...
 			xcutSet.addOrReplaceAspect(type);
+	    	if (trace.isTraceEnabled()) trace.exit("addLibraryAspect",type);
             return type;
         } else {
             // FIXME AV - better warning upon no such aspect from aop.xml
-			throw new RuntimeException("Cannot register non aspect: " + type.getName() + " , " + aspectName);
+			RuntimeException ex = new RuntimeException("Cannot register non aspect: " + type.getName() + " , " + aspectName);
+	    	if (trace.isTraceEnabled()) trace.exit("addLibraryAspect",ex);
+			throw ex;
 		}
     }
 
@@ -436,6 +447,7 @@ public class BcelWeaver implements IWeaver {
     }
 
     public void prepareForWeave() {
+    	if (trace.isTraceEnabled()) trace.enter("prepareForWeave",this);
     	needToReweaveWorld = xcutSet.hasChangedSinceLastReset();
 
     	CflowPointcut.clearCaches();
@@ -457,6 +469,7 @@ public class BcelWeaver implements IWeaver {
     	}
 
 		shadowMungerList = xcutSet.getShadowMungers();
+//		world.debug("shadow mungers=" + shadowMungerList);
 		rewritePointcuts(shadowMungerList);
 		// Sometimes an error occurs during rewriting pointcuts (for example, if ambiguous bindings
 		// are detected) - we ought to fail the prepare when this happens because continuing with
@@ -486,6 +499,8 @@ public class BcelWeaver implements IWeaver {
 					return (sm2.getSourceLocation().getOffset()-sm1.getSourceLocation().getOffset());
 				}
 			});
+ 
+		if (trace.isTraceEnabled()) trace.exit("prepareForWeave");
     }
 
     /*
@@ -991,6 +1006,7 @@ public class BcelWeaver implements IWeaver {
 
     // variation of "weave" that sources class files from an external source.
     public Collection weave(IClassFileProvider input) throws IOException {
+    	if (trace.isTraceEnabled()) trace.enter("weave",this,input);
     	ContextToken weaveToken = CompilationAndWeavingContext.enteringPhase(CompilationAndWeavingContext.WEAVING, "");
     	Collection wovenClassNames = new ArrayList();
     	IWeaveRequestor requestor = input.getRequestor();
@@ -1138,6 +1154,7 @@ public class BcelWeaver implements IWeaver {
 
         requestor.weaveCompleted();
         CompilationAndWeavingContext.leavingPhase(weaveToken);
+        if (trace.isTraceEnabled()) trace.exit("weave",wovenClassNames);
     	return wovenClassNames;
     }
 
@@ -1693,9 +1710,11 @@ public class BcelWeaver implements IWeaver {
 	}
 
 	public void setReweavableMode(boolean xNotReweavable) {
+    	if (trace.isTraceEnabled()) trace.enter("setReweavableMode",this,xNotReweavable);
 		inReweavableMode = !xNotReweavable;
 		WeaverStateInfo.setReweavableModeDefaults(!xNotReweavable,false,true);
 		BcelClassWeaver.setReweavableMode(!xNotReweavable);
+    	if (trace.isTraceEnabled()) trace.exit("setReweavableMode");
 	}
 
 	public boolean isReweavable() {
@@ -1707,9 +1726,11 @@ public class BcelWeaver implements IWeaver {
     }
 
 	public void tidyUp() {
+		if (trace.isTraceEnabled()) trace.enter("tidyUp",this);
 	    shadowMungerList = null; // setup by prepareForWeave
 		typeMungerList = null; // setup by prepareForWeave
 	    lateTypeMungerList = null; // setup by prepareForWeave
 		declareParentsList = null; // setup by prepareForWeave
+		if (trace.isTraceEnabled()) trace.exit("tidyUp");
 	}
 }
@@ -30,6 +30,8 @@ import org.aspectj.bridge.MessageUtil;
 import org.aspectj.weaver.BCException;
 import org.aspectj.weaver.UnresolvedType;
 import org.aspectj.weaver.WeaverMessages;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 
 public class ClassPathManager {
@@ -43,6 +45,8 @@ public class ClassPathManager {
 	private List openArchives                = new ArrayList();
 	private static int maxOpenArchives       = -1;
     private static final int MAXOPEN_DEFAULT = 1000;
+
+    private static Trace trace = TraceFactory.getTraceFactory().getTrace(ClassPathManager.class);
 
 	static {
 		String openzipsString = getSystemPropertyWithoutSecurityException("org.aspectj.weaver.openarchives",Integer.toString(MAXOPEN_DEFAULT));
@@ -53,11 +57,13 @@ public class ClassPathManager {
 
 
 	public ClassPathManager(List classpath, IMessageHandler handler) {
+		if (trace.isTraceEnabled()) trace.enter("<init>",this,new Object[] { classpath, handler });
 		entries = new ArrayList();
 		for (Iterator i = classpath.iterator(); i.hasNext();) {
 			String name = (String) i.next();
 			addPath(name, handler);
 		}
+		if (trace.isTraceEnabled()) trace.exit("<init>");
 	}
 
 	protected ClassPathManager() {};
@@ -0,0 +1,154 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import java.io.File;
+
+public abstract class AbstractTrace implements Trace {
+
+	protected Class tracedClass;
+	
+	protected AbstractTrace (Class clazz) {
+		this.tracedClass = clazz;
+	}
+	
+	public abstract void enter (String methodName, Object thiz, Object[] args);
+	
+	public abstract void enter(String methodName, Object thiz);
+
+	public abstract void exit(String methodName, Object ret);
+
+	public abstract void exit(String methodName, Throwable th);
+
+	public void error(String message) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void error(String message, Throwable th) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void event(String methodName) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void event(String methodName, Object thiz, Object[] args) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void exit(String methodName) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void info(String message) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void warn(String message) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void warn(String message, Throwable th) {
+		// TODO Auto-generated method stub
+
+	}
+	
+	/*
+	 * Convenience methods
+	 */
+	public void enter (String methodName, Object thiz, Object arg) {
+		enter(methodName,thiz,new Object[] { arg });
+	}
+
+	public void enter (String methodName, Object thiz, boolean z) {
+		enter(methodName,thiz,new Boolean(z));
+	}
+
+	public void exit (String methodName, boolean b) {
+		exit(methodName,new Boolean(b));
+	}
+	
+	public boolean isTraceEnabled () {
+		return true;
+	}
+
+	protected String formatMessage(String className, String methodName, Object thiz, Object[] args) {
+		StringBuffer message = new StringBuffer();
+		message.append(className);
+		message.append(".").append(methodName);
+		if (thiz != null) message.append(" ").append(formatObj(thiz));
+		if (args != null) message.append(" ").append(formatArgs(args));
+		return message.toString();
+	}
+
+	/**
+	 * Format objects safely avoiding toString which can cause recursion,
+	 * NullPointerExceptions or highly verbose results.
+	 *  
+	 * @param obj parameter to be formatted
+	 * @return the formated parameter
+	 */
+	protected Object formatObj(Object obj) {
+		
+		/* These classes have a safe implementation of toString() */
+		if (obj == null
+				|| obj instanceof String
+			    || obj instanceof Number
+			    || obj instanceof Boolean
+			    || obj instanceof Exception
+			    || obj instanceof Character
+			    || obj instanceof Class
+			    || obj instanceof File
+			    || obj instanceof StringBuffer
+		    ) return obj;
+		else try {
+			
+			/* Classes can provide an alternative implementation of toString() */
+			if (obj instanceof Traceable) {
+				Traceable t = (Traceable)obj;
+				return t.toTraceString();
+			}
+			
+			/* Use classname@hashcode */
+			else return obj.getClass().getName() + "@" + Integer.toString(obj.hashCode(),16);
+		
+		/* Object.hashCode() can be override and may thow an exception */	
+		} catch (Exception ex) {
+			return obj.getClass().getName();
+		}
+	}
+
+	/** 
+	 * Format arguments into a comma separated list
+	 * 
+	 * @param names array of argument names
+	 * @param args array of arguments
+	 * @return the formated list
+	 */
+	protected String formatArgs(Object[] args) {
+		StringBuffer sb = new StringBuffer();
+		
+		for (int i = 0; i < args.length; i++) {
+			sb.append(formatObj(args[i]));
+			if (i < args.length-1) sb.append(", ");
+		}
+		
+		return sb.toString();
+	}
+
+}
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+public class CommonsTrace extends AbstractTrace {
+
+	private Log log;
+	private String className;
+	
+	public CommonsTrace (Class clazz) {
+		super(clazz);
+		this.log = LogFactory.getLog(clazz);
+		this.className = tracedClass.getName();
+	}
+	
+	public void enter(String methodName, Object thiz, Object[] args) {
+		if (log.isDebugEnabled()) {
+			log.debug("> " + formatMessage(className, methodName, thiz, args));
+		}
+	}
+
+	public void enter(String methodName, Object thiz) {
+		if (log.isDebugEnabled()) {
+			log.debug("> " + formatMessage(className, methodName, thiz, null));
+		}
+	}
+
+	public void exit(String methodName, Object ret) {
+		if (log.isDebugEnabled()) {
+			log.debug("< " + formatMessage(className, methodName, ret, null));
+		}
+	}
+
+	public void exit(String methodName, Throwable th) {
+		if (log.isDebugEnabled()) {
+			log.debug("< " + formatMessage(className, methodName, th, null));
+		}
+	}
+
+	public void exit(String methodName) {
+		if (log.isDebugEnabled()) {
+			log.debug("< " + formatMessage(className, methodName, null, null));
+		}
+	}
+
+}
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import org.apache.commons.logging.LogFactory;
+
+public class CommonsTraceFactory extends TraceFactory {
+
+	private LogFactory logFactory = LogFactory.getFactory();
+	
+	public Trace getTrace(Class clazz) {
+		return new CommonsTrace(clazz);
+	}
+
+}
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+public class DefaultTrace extends AbstractTrace {
+	
+	public DefaultTrace (Class clazz) {
+		super(clazz);
+	}
+	
+	public void enter (String methodName, Object thiz, Object[] args) {
+		if (tracingEnabled) {
+//			println("> " + tracedClass.getName() + "." + methodName + " " + formatObj(thiz) + " " + formatArgs(args));
+			println("> " + formatMessage(tracedClass.getName(),methodName,thiz,args));
+		}
+	}
+	
+	public void enter (String methodName, Object thiz) {
+		if (tracingEnabled) {
+//			println("> " + tracedClass.getName() + "." + methodName + " " + formatObj(thiz));
+			println("> " + formatMessage(tracedClass.getName(),methodName,thiz,null));
+		}
+	}
+
+	public void exit (String methodName, Object ret) {
+		if (tracingEnabled) {
+//			println("< " + tracedClass.getName() + "." + methodName + " " + formatObj(ret));
+			println("< " + formatMessage(tracedClass.getName(),methodName,ret,null));
+		}
+	}
+
+	public void exit (String methodName) {
+		if (tracingEnabled) {
+//			println("< " + tracedClass.getName() + "." + methodName);
+			println("< " + formatMessage(tracedClass.getName(),methodName,null,null));
+		}
+	}
+
+	public void exit(String methodName, Throwable th) {
+		exit(methodName,th);
+	}
+
+	/**
+	 * Template method that allows choice of destination for output
+	 * 
+	 * @param s message to be traced
+	 */
+	protected void println (String s) {
+		System.err.println(s);
+	}
+
+	private static boolean tracingEnabled = getBoolean("org.aspectj.weaver.tools.tracing",false);
+
+	private static boolean getBoolean (String name, boolean def) {
+		String defaultValue = String.valueOf(def);
+		String value = System.getProperty(name,defaultValue);
+		return Boolean.valueOf(value).booleanValue();
+	}
+
+}
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+public interface Trace {
+
+	public void enter (String methodName, Object thiz, Object[] args);
+
+	public void enter (String methodName, Object thiz);
+
+	public void exit (String methodName, Object ret);
+
+	public void exit (String methodName, Throwable th);
+
+	public void exit (String methodName);
+
+	public void event (String methodName);
+
+	public void event (String methodName, Object thiz, Object[] args);
+	
+	public void info (String message);
+
+	public void warn (String message);
+
+	public void warn (String message, Throwable th);
+
+	public void error (String message);
+
+	public void error (String message, Throwable th);
+	
+	/*
+	 * Convenience methods
+	 */
+	public void enter (String methodName, Object thiz, Object arg);
+
+	public void enter (String methodName, Object thiz, boolean z);
+
+	public void exit (String methodName, boolean b);
+	
+	public boolean isTraceEnabled ();
+}
@@ -0,0 +1,42 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import org.aspectj.util.LangUtil;
+
+public class TraceFactory {
+    
+    public static TraceFactory instance = new TraceFactory(); 
+    
+    public Trace getTrace (Class clazz) {
+    	return new DefaultTrace(clazz);
+    }
+    
+    public static TraceFactory getTraceFactory () {
+    	return instance;
+    }
+    
+    static {
+    	try {
+			if (LangUtil.is15VMOrGreater()) {
+	    		Class factoryClass = Class.forName("org.aspectj.weaver.tools.Jdk14TraceFactory");
+	    		instance = (TraceFactory)factoryClass.newInstance();
+			} else {
+	    		Class factoryClass = Class.forName("org.aspectj.weaver.tools.CommonsTraceFactory");
+	    		instance = (TraceFactory)factoryClass.newInstance();
+			}
+    	}
+    	catch (Exception ex) {
+    	}
+//    	System.out.println("TraceFactory.<clinit>() instance=" + instance);
+    }
+
+}
@@ -0,0 +1,17 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+public interface Traceable {
+
+	public String toTraceString ();
+	
+}
@@ -78,6 +78,8 @@ public class WeavingAdaptor {
 	protected GeneratedClassHandler generatedClassHandler;
 	protected Map generatedClasses = new HashMap(); /* String -> UnwovenClassFile */
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(WeavingAdaptor.class);
+
 	protected WeavingAdaptor () {
 	}
 
@@ -205,6 +207,7 @@ public class WeavingAdaptor {
 	 */
 	public byte[] weaveClass (String name, byte[] bytes) throws IOException {
 		if (enabled) {
+	    	if (trace.isTraceEnabled()) trace.enter("weaveClass",this,new Object[] {name,bytes});
 
 			if (shouldWeave(name, bytes)) {
 				info("weaving '" + name + "'");
@@ -217,6 +220,8 @@ public class WeavingAdaptor {
 			else {
 				info("not weaving '" + name + "'");
 			}
+
+			if (trace.isTraceEnabled()) trace.exit("weaveClass",bytes);
 		}
 
         return bytes;
@@ -0,0 +1,63 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Jdk14Trace extends AbstractTrace {
+
+	private Logger logger;
+	private String name;
+	
+	public Jdk14Trace (Class clazz) {
+		super(clazz);
+		this.name = clazz.getName();
+		this.logger = Logger.getLogger(name);
+	}
+	
+	public void enter(String methodName, Object thiz, Object[] args) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.entering(name,methodName,formatObj(thiz));
+			if (args != null && logger.isLoggable(Level.FINER)) {
+				logger.entering(name,methodName,args);
+			}			
+		}
+	}
+
+	public void enter(String methodName, Object thiz) {
+		enter(methodName,thiz,null);
+	}
+
+	public void exit(String methodName, Object ret) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.exiting(name,methodName,ret);
+		}
+	}
+
+	public void exit(String methodName, Throwable th) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.exiting(name,methodName,th);
+		}
+	}
+
+	public void exit(String methodName) {
+		if (logger.isLoggable(Level.FINE)) {
+			logger.exiting(name,methodName);
+		}
+	}
+
+	@Override
+	public boolean isTraceEnabled() {
+		return logger.isLoggable(Level.FINE);
+	}
+	
+}
@@ -0,0 +1,20 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Matthew Webster - initial implementation
+ *******************************************************************************/
+package org.aspectj.weaver.tools;
+
+public class Jdk14TraceFactory extends TraceFactory {
+
+	@Override
+	public Trace getTrace(Class clazz) {
+		return new Jdk14Trace(clazz);
+	}
+
+}
@@ -0,0 +1,59 @@
+############################################################
+#  	Default Logging Configuration File
+#
+# You can use a different file by specifying a filename
+# with the java.util.logging.config.file system property.  
+# For example java -Djava.util.logging.config.file=myfile
+############################################################
+
+############################################################
+#  	Global properties
+############################################################
+
+# "handlers" specifies a comma separated list of log Handler 
+# classes.  These handlers will be installed during VM startup.
+# Note that these classes must be on the system classpath.
+# By default we only configure a ConsoleHandler, which will only
+# show messages at the INFO and above levels.
+#handlers= java.util.logging.ConsoleHandler
+
+# To also add the FileHandler, use the following line instead.
+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
+handlers= java.util.logging.FileHandler
+
+# Default global logging level.
+# This specifies which kinds of events are logged across
+# all loggers.  For any given facility this global level
+# can be overriden by a facility specific level
+# Note that the ConsoleHandler also has a separate level
+# setting to limit messages printed to the console.
+.level= INFO
+
+############################################################
+# Handler specific properties.
+# Describes specific configuration info for Handlers.
+############################################################
+
+# default file output is in user's home directory.
+java.util.logging.FileHandler.pattern = %h/java%u.log
+#java.util.logging.FileHandler.limit = 50000
+java.util.logging.FileHandler.count = 1
+#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
+java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
+java.util.logging.FileHandler.level = FINER
+
+# Limit the message that are printed on the console to INFO and above.
+java.util.logging.ConsoleHandler.level = FINER
+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
+
+
+############################################################
+# Facility specific properties.
+# Provides extra control for each logger.
+############################################################
+
+# For example, set the com.xyz.foo logger to only log SEVERE
+# messages:
+#com.xyz.foo.level = SEVERE
+org.aspectj.weaver.level = FINER
+org.aspectj.weaver.loadtime.level = FINER

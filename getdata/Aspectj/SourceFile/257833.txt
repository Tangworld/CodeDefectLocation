@@ -140,11 +140,21 @@ public final class BcelRenderer implements ITestVisitor, IExprVisitor {
 		// in Java:
 		// foo.class.isAnnotationPresent(annotationClass);
 		// in bytecode:
+
+		// ifnull? skip to the end if it is as getClass() will fail (see pr 257833)
+
 		// load var onto the stack (done for us later)
 		// invokevirtual java/lang/Object.getClass:()Ljava/lang/Class
 		// ldc_w annotationClass
 		// invokevirtual java/lang/Class.isAnnotationPresent:(Ljava/lang/Class;)Z
 		InstructionList il = new InstructionList();
+
+		// If it is null jump past the advice call
+		il.append(fact.createBranchInstruction(Constants.IFNULL, fk));
+
+		// Load up the var again
+		il.append(((BcelVar) hasAnnotation.getVar()).createLoad(fact));
+
 		Member getClass = MemberImpl.method(UnresolvedType.OBJECT, 0, UnresolvedType.JAVA_LANG_CLASS, "getClass",
 				UnresolvedType.NONE);
 		il.append(Utility.createInvoke(fact, world, getClass));
@@ -0,0 +1,3 @@
+package patterntesting.check.runtime;
+
+public @interface NotNull { }
@@ -0,0 +1,15 @@
+package patterntesting.check.runtime;
+
+public aspect NotNullAspect {
+
+    pointcut ctorWithNotNullArg() :
+        execution(*..*.new(*)) && @args(NotNull);
+
+    before() : ctorWithNotNullArg() {
+        Object[] args = thisJoinPoint.getArgs();
+        if (args[0] == null) {
+            throw new AssertionError("@NotNull constraint violated");
+        }
+    }
+
+}
@@ -0,0 +1,21 @@
+package patterntesting.check.runtime;
+
+
+public class NotNullTest {
+    
+    private String s2;
+    private static final String nullString = null;
+    
+    public NotNullTest() {
+    }
+    
+    public NotNullTest(@NotNull String s) {
+        s2 = s;
+    }
+    
+    public static void main(String []argv) {
+        new NotNullTest("something");
+        new NotNullTest(nullString);
+    }
+
+}
@@ -28,6 +28,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc163Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testNonNullAtArgs_pr257833() {
+		runTest("param annos and at args");
+	}
+
 	// public void testAtAspectJDecp_pr164016() {
 	// runTest("ataspectj decp");
 	// }
@@ -191,6 +191,13 @@
         <message kind="warning" line="4" text="has not been applied"/>
       </compile>
     </ajc-test>
+
+    <ajc-test dir="bugs163/pr257833" title="param annos and at args">
+      <compile files="NotNull.java NotNullAspect.java NotNullTest.java" options="-1.5 -showWeaveInfo">
+        <message kind="weave" text="Join point 'constructor-execution(void patterntesting.check.runtime.NotNullTest.&lt;init&gt;(java.lang.String))' in Type"/>
+      </compile>
+      <run class="patterntesting.check.runtime.NotNullTest"/>
+    </ajc-test>
 
     <ajc-test dir="bugs163/pr253109" title="generic pointcuts - 2">
       <compile files="CodeTwo.java" options="-1.5"/>

@@ -1,16 +1,28 @@
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.LinkedList;
 import java.util.List;
 
 
 public interface BadInterface {
-
     static final Comparator MY_COMPARATOR = new Comparator() {
         public int compare(Object o1, Object o2) {
             return 0;
         }
     };
 
+    static final String aString = "Constant String"; // StringLiteral
+    static final String bString = aString; 			//SingleNameReference
+    static final String cString = aString + bString; // BinaryExpression
+    static final String dString = aString + " and " + bString;//CombinedBinaryExpression
+    static final String eString = "Hello" + " World"; //ExtendedStringLiteral
+    
+    static final int aInteger = 1; //IntLiteral
+    static final int bInteger = aInteger; //SingleNameReference
+    static final int cInteger = aInteger + bInteger; //BinaryExpression
+    static final int dInteger = aInteger + 3 + bInteger; //CombinedBinaryExpression
+    
     public List<String> aList = new LinkedList<String>() {{ add("Busted"); }};
 
     public List<String> bList = new LinkedList<String>() {
@@ -21,4 +33,9 @@ public interface BadInterface {
           return modCount;
        }
     };
+    
+	public List<String> cList = 
+		Collections.unmodifiableList(new ArrayList<String>(){{add("VMID"); }});
+
+    
 }
@@ -47,12 +47,13 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclara
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
-import org.aspectj.org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Initializer;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Literal;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
-import org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.OperatorExpression;
+import org.aspectj.org.eclipse.jdt.internal.compiler.ast.Reference;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope;
@@ -878,17 +879,15 @@ public class AsmHierarchyBuilder extends ASTVisitor {
 			fieldDeclaration.type.print(0, output).append(' ').append(fieldDeclaration.name);
 		}
 
-		if (fieldDeclaration.initialization != null && !(fieldDeclaration.initialization instanceof QualifiedAllocationExpression)) {
-			output.append(" = "); //$NON-NLS-1$
+		output.append(" = ");
+		if (fieldDeclaration.initialization != null && 
+				(  fieldDeclaration.initialization instanceof Literal 
+				|| fieldDeclaration.initialization instanceof OperatorExpression
+				|| fieldDeclaration.initialization instanceof Reference)) {
 			fieldDeclaration.initialization.printExpression(0, output);
-		} else if (fieldDeclaration.initialization instanceof QualifiedAllocationExpression) {
-			QualifiedAllocationExpression qae = (QualifiedAllocationExpression) fieldDeclaration.initialization;
-			StringBuffer sb = new StringBuffer();
-			qae.printExpression(0, sb);
-			if (sb.toString().indexOf("new ") != 0) {
-				output.append(" = "); //$NON-NLS-1$	         
-				output.append(sb.toString());
-			}
+		} 
+		else {
+			output.append("null");
 		}
 		output.append(";\n");
 		return output.toString();
@@ -327,17 +327,47 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("ensure getSourceSignature correct with static field");
 		IHierarchy top = AsmManager.lastActiveStructureModel.getHierarchy();
 		IProgramElement ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "MY_COMPARATOR");
-		String expected = "static final Comparator MY_COMPARATOR;\n";
+		String expected = "static final Comparator MY_COMPARATOR = null;\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "aString");
+		expected = "static final String aString = \"Constant String\";\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "bString");
+		expected = "static final String bString = aString;\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "cString");
+		expected = "static final String cString = (aString + bString);\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "dString");
+		expected = "static final String dString = ((aString + \" and \") + bString);\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "eString");
+		expected = "static final String eString = \"Hello World\";\n";
 		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
 				.getSourceSignature());
 
 		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "aList");
-		expected = "public List<String> aList;\n";
+		expected = "public List<String> aList = null;\n";
 		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
 				.getSourceSignature());
 
 		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "bList");
-		expected = "public List<String> bList;\n";
+		expected = "public List<String> bList = null;\n";
+		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
+				.getSourceSignature());
+
+		ipe = top.findElementForLabel(top.getRoot(), IProgramElement.Kind.FIELD, "cList");
+		expected = "public List<String> cList = null;\n";
 		assertEquals("expected source signature to be " + expected + " but found " + ipe.getSourceSignature(), expected, ipe
 				.getSourceSignature());
 	}

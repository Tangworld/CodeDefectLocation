@@ -27,6 +27,7 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   // public void testAmbiguousBinding_pr121805() { runTest("ambiguous binding");}
+  public void testMixingGenerics_pr152848()  { runTest("mixing generics"); }
   public void testIncorrectStaticinitializationWeaving_pr149560_1() { runTest("incorrect staticinitialization weaving - codestyle");}
   public void testIncorrectStaticinitializationWeaving_pr149560_2() { runTest("incorrect staticinitialization weaving - annstyle");}
   public void testIncorrectDeprecatedAnnotationProcessing_pr154332() { runTest("incorrect deprecated annotation processing");}
@@ -39,7 +39,7 @@ public class TypeFactory {
 		if (!aBaseType.isGenericType()) {
 			// try and find the generic type...
 			if (someTypeParameters != null && someTypeParameters.length>0) {
-				if (!aBaseType.isRawType()) throw new IllegalStateException("Expecting raw type");
+				if (!aBaseType.isRawType()) throw new IllegalStateException("Expecting raw type, not: "+aBaseType);
 				baseType = baseType.getGenericType();
 				if (baseType == null) throw new IllegalStateException("Raw type does not have generic type set");
 			} // else if someTypeParameters is null, then the base type is allowed to be non-generic, it's an inner
@@ -24,6 +24,8 @@ import org.aspectj.weaver.TypeVariable;
 import org.aspectj.weaver.TypeVariableReferenceType;
 import org.aspectj.weaver.UnresolvedType;
 import org.aspectj.weaver.World;
+import org.aspectj.weaver.tools.Trace;
+import org.aspectj.weaver.tools.TraceFactory;
 
 /**
  * A utility class that assists in unpacking constituent parts of 
@@ -32,6 +34,8 @@ import org.aspectj.weaver.World;
  */
 public class BcelGenericSignatureToTypeXConverter {
 
+	private static Trace trace = TraceFactory.getTraceFactory().getTrace(BcelGenericSignatureToTypeXConverter.class);
+	
 	public static ResolvedType classTypeSignature2TypeX(
 			Signature.ClassTypeSignature aClassTypeSignature,
 			Signature.FormalTypeParameter[] typeParams,
@@ -75,6 +79,16 @@ public class BcelGenericSignatureToTypeXConverter {
 			// we have to create a parameterized type
 			// type arguments may be array types, class types, or typevariable types
 			ResolvedType theBaseType = UnresolvedType.forSignature(sig.toString()).resolve(world);
+			
+			// Sometimes we may find that when the code is being load-time woven that the types have changed.
+			// Perhaps an old form of a library jar is being used - this can mean we discover right here
+			// that a type is not parameterizable (is that a word?).  I think in these cases it is ok to
+			// just return with what we know (the base type). (see pr152848)
+			if (!(theBaseType.isGenericType() || theBaseType.isRawType())) {
+				if (trace.isTraceEnabled()) trace.event("classTypeSignature2TypeX: this type is not a generic type:",null,new Object[]{theBaseType});
+				return theBaseType;
+			}
+			
 			ResolvedType[] typeArgumentTypes = new ResolvedType[innerType.typeArguments.length];
 			for (int i = 0; i < typeArgumentTypes.length; i++) {
 				typeArgumentTypes[i] = typeArgument2TypeX(innerType.typeArguments[i],typeParams,world,inProgressTypeVariableResolutions);
@@ -84,7 +98,6 @@ public class BcelGenericSignatureToTypeXConverter {
 									theBaseType,
 									typeArgumentTypes,
 									world);
-				
 
 //				world.resolve(UnresolvedType.forParameterizedTypes(
 //						UnresolvedType.forSignature(sig.toString()).resolve(world), 
@@ -0,0 +1,3 @@
+public aspect AnAspect {
+  before(): staticinitialization(*) {}
+}
@@ -0,0 +1,3 @@
+public class BaseType {
+  Pair<String,String> foo;
+}
@@ -0,0 +1 @@
+class Pair<A,B> {}
@@ -0,0 +1 @@
+class Pair {}
@@ -3,6 +3,13 @@
 <!-- AspectJ v1.5.3 Tests -->
 <suite>
 
+    <ajc-test dir="bugs153/pr152848" title="mixing generics">
+      <compile files="PairGeneric.java" options="-1.5" outjar="pair.jar"/>
+      <compile files="BaseType.java" options="-1.5" outjar="basetype.jar" classpath="pair.jar"/>
+      <compile files="PairNormal.java" outjar="pair.jar"/>
+      <compile files="AnAspect.java" options="-1.5 -Xset:runMinimalMemory=true" inpath="basetype.jar;pair.jar"/>
+    </ajc-test>
+
     <ajc-test dir="bugs153/pr152871" title="parsing bytecode less">
       <compile files="MyClass.java" options="-1.5"/>
       <compile files="MyAspect.java" options="-1.5 -Xlint:ignore"/>

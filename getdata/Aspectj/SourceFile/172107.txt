@@ -143,6 +143,8 @@ public class Ajc160Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 		runTest("Suppress warnings2");
 	}
 
+  public void testNullReturnedFromGetField_pr172107() { runTest("null returned from getField()"); }
+	
   /////////////////////////////////////////
   public static Test suite() {
     return XMLBasedAjcTestCase.loadSuite(Ajc160Tests.class);
@@ -139,6 +139,11 @@
         </run>
     </ajc-test>
 
+    <ajc-test dir="bugs160/pr172107" title="null returned from getField()"
+		keywords="pr172107">
+        <compile files="ReadWriteAJBug172107.java,Instrumentation.aj"/>
+		<run class="ReadWriteAJBug172107"/>
+    </ajc-test>
 
  <!-- second section - need a 1.6 vm -->
 
@@ -0,0 +1,40 @@
+import java.lang.reflect.Field;
+
+import org.aspectj.lang.reflect.*;
+
+public aspect Instrumentation {
+
+	/**
+	 * Instrument field reads.
+	 */
+	pointcut getField() : get(* *) && !within(Instrumentation);
+
+	after() : getField() {
+		final FieldSignature signature = (FieldSignature) thisJoinPointStaticPart
+				.getSignature();
+		final Field field = signature.getField();
+		final SourceLocation sl = thisJoinPointStaticPart.getSourceLocation();
+		if (field == null) {
+			throw new IllegalStateException(
+					"See pr172107: get FieldSignature#getField()==null in "
+							+ sl.getFileName() + " at line " + sl.getLine());
+		}
+	}
+
+	/**
+	 * Instrument field reads.
+	 */
+	pointcut setField() : set(* *) && !within(Instrumentation);
+
+	after() : setField() {
+		final FieldSignature signature = (FieldSignature) thisJoinPointStaticPart
+				.getSignature();
+		final Field field = signature.getField();
+		final SourceLocation sl = thisJoinPointStaticPart.getSourceLocation();
+		if (field == null) {
+			throw new IllegalStateException(
+					"See pr172107: set FieldSignature#getField()==null in "
+							+ sl.getFileName() + " at line " + sl.getLine());
+		}
+	}
+}
@@ -0,0 +1,39 @@
+interface I {
+	static final int CONST = 56;
+}
+
+class A {
+	protected int prot;
+	protected String protS;
+	int def;
+	String defS;
+}
+
+class B extends A implements I {
+	void m() {
+		// protected
+		super.prot = 1;
+		super.protS = "1";
+		System.out.println(super.protS + super.prot);
+		prot = 2;
+		protS = "2";
+		System.out.println(protS + prot);
+		// default
+		super.def = 1;
+		super.defS = "1";
+		System.out.println(defS + def);
+		def = 2;
+		defS = "2";
+		System.out.println(defS + def);
+		// interface
+		System.out.println(CONST);
+	}
+}
+
+public class ReadWriteAJBug172107 {
+
+	public static void main(String[] args) {
+		B b = new B();
+		b.m();
+	}
+}
@@ -2615,9 +2615,14 @@ class BcelClassWeaver implements IClassWeaver {
 			// sets of synthetics aren't join points in 1.1
 			return;
 		} else {
-			match(
-				BcelShadow.makeFieldSet(world, mg, ih, enclosingShadow),
-				shadowAccumulator);
+			// Fix for bug 172107 (similar the "get" fix for bug 109728)
+			BcelShadow bs=
+				BcelShadow.makeFieldSet(world, resolvedField, mg, ih, enclosingShadow);
+			String cname = fi.getClassName(cpg);
+			if (!resolvedField.getDeclaringType().getName().equals(cname)) {
+				bs.setActualTargetType(cname);
+			}
+			match(bs, shadowAccumulator);
 		}
 	}
 
@@ -994,6 +994,7 @@ public class BcelShadow extends Shadow {
 
     public static BcelShadow makeFieldSet(
             BcelWorld world,
+            ResolvedMember field,
             LazyMethodGen enclosingMethod,
             InstructionHandle setHandle,
             BcelShadow enclosingShadow) 
@@ -1003,9 +1004,10 @@ public class BcelShadow extends Shadow {
             new BcelShadow(
                 world,
                 FieldSet,
-                BcelWorld.makeFieldJoinPointSignature(
-                    enclosingMethod.getEnclosingClass(),
-                    (FieldInstruction) setHandle.getInstruction()),
+                field,
+//                BcelWorld.makeFieldJoinPointSignature(
+//                    enclosingMethod.getEnclosingClass(),
+//                    (FieldInstruction) setHandle.getInstruction()),
                 enclosingMethod,
                 enclosingShadow);
         ShadowRange r = new ShadowRange(body);

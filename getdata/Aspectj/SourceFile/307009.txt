@@ -0,0 +1,7 @@
+import java.lang.annotation.*;
+
+@Retention(RetentionPolicy.CLASS)
+public @interface Ann
+{
+}
+
@@ -0,0 +1,6 @@
+public aspect Bug {
+	// works when specifying *.aj *.java, fails when using -sourceroots!
+	declare soft : Exception : call(@Ann * *(..));
+	// this works in both cases!
+	//declare soft : Exception : call(* m2(..));
+}
@@ -0,0 +1,6 @@
+public class Test
+{
+	public void m() {
+		new Test2().m2();
+	}
+}
@@ -0,0 +1,7 @@
+public class Test2
+{
+	@Ann
+	public void m2() throws Exception {
+		throw new Exception();
+	}
+}
@@ -18,6 +18,14 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc169Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testDeclareSoftCall_307009_1() {
+		runTest("declare soft and call - 1");
+	}
+
+	public void testDeclareSoftCall_307009_2() {
+		runTest("declare soft and call - 2");
+	}
+
 	public void testAmbiguousMethod_298665() {
 		runTest("ambiguous method");
 	}
@@ -2,9 +2,20 @@
 
 <suite>
 
+   <ajc-test dir="bugs169/pr307009" title="declare soft and call - 1">
+   	<compile files="Test.java Test2.java Ann.java Bug.aj" options="-1.5 -showWeaveInfo">
+   		<message kind="weave" text="Softening exceptions in type 'Test' (Test.java:4) as defined by aspect 'Bug' (Bug.aj:3)"/>
+   	</compile>
+   </ajc-test>
+
+   <ajc-test dir="bugs169/pr307009" title="declare soft and call - 2">
+   	<compile files="Test2.java Test.java Ann.java Bug.aj" options="-1.5 -showWeaveInfo">
+   		<message kind="weave" text="Softening exceptions in type 'Test' (Test.java:4) as defined by aspect 'Bug' (Bug.aj:3)"/>
+   	</compile>
+   </ajc-test>
+   
    <ajc-test dir="bugs169/pr310043" title="rogue error">
    	<compile files="B.java" classpath="code.jar" aspectpath="code.jar"/>
-
    </ajc-test>
 
    <ajc-test dir="bugs169/pr309743" title="itd marker annotations - 1">
@@ -33,6 +33,7 @@ import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.aspectj.weaver.AnnotationAJ;
 import org.aspectj.weaver.BCException;
+import org.aspectj.weaver.Member;
 import org.aspectj.weaver.MemberKind;
 import org.aspectj.weaver.ReferenceType;
 import org.aspectj.weaver.ResolvedMember;
@@ -75,12 +76,14 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 
 	public boolean hasAnnotation(UnresolvedType ofType) {
 		ResolvedType[] annotationTypes = getAnnotationTypes();
-		if (annotationTypes == null)
+		if (annotationTypes == null) {
 			return false;
+		}
 		for (int i = 0; i < annotationTypes.length; i++) {
 			ResolvedType type = annotationTypes[i];
-			if (type.equals(ofType))
+			if (type.equals(ofType)) {
 				return true;
+			}
 		}
 		return false;
 	}
@@ -101,12 +104,12 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 		} else {
 			UnresolvedType declaringType = this.getDeclaringType();
 			if (declaringType instanceof ReferenceType) {
-				ReferenceType referenceDeclaringType = (ReferenceType)declaringType;
+				ReferenceType referenceDeclaringType = (ReferenceType) declaringType;
 				if (referenceDeclaringType.getDelegate() instanceof BcelObjectType) {
 					// worth a look!
-					ResolvedMember field = ((ResolvedType)declaringType).lookupField(this);
-					if (field!=null) {
-						return field.getAnnotations();						
+					ResolvedMember field = ((ResolvedType) declaringType).lookupField(this);
+					if (field != null) {
+						return field.getAnnotations();
 					}
 				}
 			}
@@ -119,8 +122,9 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 			// long abits =
 			realBinding.getAnnotationTagBits(); // ensure resolved
 			Annotation[] annos = getEclipseAnnotations();
-			if (annos == null)
+			if (annos == null) {
 				return null;
+			}
 			for (int i = 0; i < annos.length; i++) {
 				Annotation anno = annos[i];
 				UnresolvedType ut = UnresolvedType.forSignature(new String(anno.resolvedType.signature()));
@@ -129,15 +133,15 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 					return EclipseAnnotationConvertor.convertEclipseAnnotation(anno, w, eclipseFactory);
 				}
 			}
-		} else {		
+		} else {
 			UnresolvedType declaringType = this.getDeclaringType();
 			if (declaringType instanceof ReferenceType) {
-				ReferenceType referenceDeclaringType = (ReferenceType)declaringType;
+				ReferenceType referenceDeclaringType = (ReferenceType) declaringType;
 				if (referenceDeclaringType.getDelegate() instanceof BcelObjectType) {
 					// worth a look!
-					ResolvedMember field = ((ResolvedType)declaringType).lookupField(this);
-					if (field!=null) {
-						return field.getAnnotationOfType(ofType);						
+					ResolvedMember field = ((ResolvedType) declaringType).lookupField(this);
+					if (field != null) {
+						return field.getAnnotationOfType(ofType);
 					}
 				}
 			}
@@ -147,10 +151,10 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 
 	public String getAnnotationDefaultValue() {
 		// Andy, if you are debugging in here and your problem is some kind of incremental build failure where a match on
-		// a member annotation value is failing then you should look at bug 307120.  Under that bug you discovered that
+		// a member annotation value is failing then you should look at bug 307120. Under that bug you discovered that
 		// for privileged field accesses from ITDs, an EclipseResolvedMember may be created (inside the privileged munger - see
 		// PrivilegedHandler) and then later when the annotations are looked up on it, that fails because we can't find the
-		// declaration for the member.  This is because on the incremental build the member will likely represent something
+		// declaration for the member. This is because on the incremental build the member will likely represent something
 		// inside a binary type (BinaryTypeBinding) - and when that happens we should not look on the type declaration but
 		// instead on the delegate for the declaringClass because it will likely be a BcelObjectType with the right stuff
 		// in it - see the other checks on BcelObjectType in this class.
@@ -159,8 +163,9 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 			if (methodDecl instanceof AnnotationMethodDeclaration) {
 				AnnotationMethodDeclaration annoMethodDecl = (AnnotationMethodDeclaration) methodDecl;
 				Expression e = annoMethodDecl.defaultValue;
-				if (e.resolvedType == null)
+				if (e.resolvedType == null) {
 					e.resolve(methodDecl.scope);
+				}
 				// TODO does not cope with many cases...
 				if (e instanceof QualifiedNameReference) {
 
@@ -219,12 +224,19 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 				cachedAnnotationTypes = ResolvedType.EMPTY_RESOLVED_TYPE_ARRAY;
 				UnresolvedType declaringType = this.getDeclaringType();
 				if (declaringType instanceof ReferenceType) {
-					ReferenceType referenceDeclaringType = (ReferenceType)declaringType;
+					ReferenceType referenceDeclaringType = (ReferenceType) declaringType;
 					if (referenceDeclaringType.getDelegate() instanceof BcelObjectType) {
 						// worth a look!
-						ResolvedMember field = ((ResolvedType)declaringType).lookupField(this);
-						if (field!=null) {
-							cachedAnnotationTypes = field.getAnnotationTypes();						
+						if (this.getKind() == Member.METHOD) {
+							ResolvedMember method = ((ResolvedType) declaringType).lookupMethod(this);
+							if (method != null) {
+								cachedAnnotationTypes = method.getAnnotationTypes();
+							}
+						} else {
+							ResolvedMember field = ((ResolvedType) declaringType).lookupField(this);
+							if (field != null) {
+								cachedAnnotationTypes = field.getAnnotationTypes();
+							}
 						}
 					}
 				}
@@ -234,8 +246,9 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 	}
 
 	public String[] getParameterNames() {
-		if (argumentNames != null)
+		if (argumentNames != null) {
 			return argumentNames;
+		}
 		if (realBinding instanceof FieldBinding) {
 			argumentNames = NO_ARGS;
 		} else {
@@ -265,8 +278,8 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 	}
 
 	/**
-	 * Discover the (eclipse form) annotations on this resolved member.  This is done by going to the type declaration,
-	 * looking up the member (field/method) then grabbing the annotations.
+	 * Discover the (eclipse form) annotations on this resolved member. This is done by going to the type declaration, looking up
+	 * the member (field/method) then grabbing the annotations.
 	 * 
 	 * @return an array of (eclipse form) annotations on this member
 	 */
@@ -308,14 +321,14 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 		}
 		return null;
 	}
-	
+
 	private boolean isTypeDeclarationAvailable() {
-		return getTypeDeclaration()!=null;
+		return getTypeDeclaration() != null;
 	}
 
 	/**
 	 * @return the type declaration that contained this member, or NULL if it is not available (eg. this isn't currently related to
-	 * a SOURCE-FORM artifact, it is instead related to a BINARY-FORM artifact)
+	 *         a SOURCE-FORM artifact, it is instead related to a BINARY-FORM artifact)
 	 */
 	private TypeDeclaration getTypeDeclaration() {
 		if (realBinding instanceof MethodBinding) {
@@ -324,8 +337,9 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 				SourceTypeBinding stb = (SourceTypeBinding) mb.declaringClass;
 				if (stb != null) {
 					ClassScope cScope = stb.scope;
-					if (cScope != null)
+					if (cScope != null) {
 						return cScope.referenceContext;
+					}
 				}
 			}
 		} else if (realBinding instanceof FieldBinding) {
@@ -334,8 +348,9 @@ public class EclipseResolvedMember extends ResolvedMemberImpl {
 				SourceTypeBinding stb = (SourceTypeBinding) fb.declaringClass;
 				if (stb != null) {
 					ClassScope cScope = stb.scope;
-					if (cScope != null)
+					if (cScope != null) {
 						return cScope.referenceContext;
+					}
 				}
 			}
 		}

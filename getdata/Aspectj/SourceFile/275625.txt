@@ -20,6 +20,14 @@ import org.aspectj.weaver.LintMessage;
 
 public class Ajc165Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testDecAnnoMethod_pr275625() {
+		runTest("dec anno method");
+	}
+
+	public void testDecAnnoField_pr275625() {
+		runTest("dec anno field");
+	}
+
 	// check ITD can replace a generated default constructor
 	public void testItdDefaultCtor_pr275032() {
 		runTest("itd default ctor");
@@ -2,6 +2,14 @@
 
 <suite>
 
+   <ajc-test dir="bugs165/pr275625" title="dec anno method">
+     <compile files="A.java" options="-1.5"/>
+   </ajc-test>
+   
+   <ajc-test dir="bugs165/pr275625" title="dec anno field">
+     <compile files="F.java" options="-1.5"/>
+   </ajc-test>
+   
    <ajc-test dir="bugs165/pr275032" title="itd default ctor">
      <compile files="A.java X.java" options="-1.5 -Xlint:ignore"/>
      <run class="A">
@@ -861,8 +861,7 @@ class BcelClassWeaver implements IClassWeaver {
 						if (decaM.matches(mg.getMemberView(), world)) {
 							if (doesAlreadyHaveAnnotation(mg.getMemberView(), decaM, reportedProblems)) {
 								// remove the declare @method since don't want
-								// an error when
-								// the annotation is already there
+								// an error when the annotation is already there
 								unusedDecams.remove(decaM);
 								continue; // skip this one...
 							}
@@ -908,15 +907,13 @@ class BcelClassWeaver implements IClassWeaver {
 									continue; // skip this one...
 								}
 
-								if (annotationsToAdd == null)
+								if (annotationsToAdd == null) {
 									annotationsToAdd = new ArrayList();
+								}
 								AnnotationGen a = ((BcelAnnotation) decaM.getAnnotationX()).getBcelAnnotation();
-								// CUSTARD superfluous?
-								// AnnotationGen ag = new
-								// AnnotationGen(a,clazz.getConstantPool
-								// (),true);
-								annotationsToAdd.add(a);
-
+								// create copy to get the annotation type into the right constant pool
+								AnnotationGen ag = new AnnotationGen(a, clazz.getConstantPool(), true);
+								annotationsToAdd.add(ag);
 								mg.addAnnotation(decaM.getAnnotationX());
 								AsmRelationshipProvider.addDeclareAnnotationMethodRelationship(decaM.getSourceLocation(), clazz
 										.getName(), mg.getMemberView(), world.getModelAsAsmManager());// getMethod());
@@ -932,18 +929,7 @@ class BcelClassWeaver implements IClassWeaver {
 					}
 					if (annotationsToAdd != null) {
 						Method oldMethod = mg.getMethod();
-						MethodGen myGen = new MethodGen(oldMethod, clazz.getClassName(), clazz.getConstantPool(), false);// dont
-						// use
-						// tags,
-						// they
-						// won't
-						// get
-						// repaired
-						// like
-						// for
-						// woven
-						// methods
-						// .
+						MethodGen myGen = new MethodGen(oldMethod, clazz.getClassName(), clazz.getConstantPool(), false);
 						for (Iterator iter = annotationsToAdd.iterator(); iter.hasNext();) {
 							AnnotationGen a = (AnnotationGen) iter.next();
 							myGen.addAnnotation(a);
@@ -2045,7 +2031,7 @@ class BcelClassWeaver implements IClassWeaver {
 	 * 
 	 * @param donor the method from which we will copy (and adjust frame and jumps) instructions.
 	 * @param recipient the method the instructions will go into. Used to get the frame size so we can allocate new frame locations
-	 *            for locals in donor.
+	 *        for locals in donor.
 	 * @param frameEnv an environment to map from donor frame to recipient frame, initially populated with argument locations.
 	 * @param fact an instruction factory for recipient
 	 */
@@ -0,0 +1,22 @@
+import java.lang.annotation.*;
+
+public class A {
+  public void m() {}
+
+  public static void main(String []argv) {
+  }
+
+}
+
+aspect X {
+  declare @method: @J * A.m(): @I;
+  declare @method: * A.m(): @K;
+  declare @method: @K * A.m(): @J;
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@interface I {}
+@Retention(RetentionPolicy.RUNTIME)
+@interface J {}
+@Retention(RetentionPolicy.RUNTIME)
+@interface K {}
@@ -0,0 +1,22 @@
+import java.lang.annotation.*;
+
+public class F {
+  int f;
+
+  public static void main(String []argv) {
+  }
+
+}
+
+aspect X {
+  declare @field: @J * F.f: @I;
+  declare @field: * F.f: @K;
+  declare @field: @K * F.f: @J;
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@interface I {}
+@Retention(RetentionPolicy.RUNTIME)
+@interface J {}
+@Retention(RetentionPolicy.RUNTIME)
+@interface K {}

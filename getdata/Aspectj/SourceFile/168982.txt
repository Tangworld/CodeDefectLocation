@@ -0,0 +1,17 @@
+package tracing;
+
+import org.aspectj.lang.JoinPoint;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+public class TracingAspect2<T> {
+        @Pointcut("execution(* *(..))")
+        public void traced() {}
+
+        @Before("traced()")
+        public void log(JoinPoint thisJoinPoint) {
+                System.out.println("Entering ");
+        }
+}
@@ -23,6 +23,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 public class Ajc161Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
 	// AspectJ1.6.1	
+	public void testErrorOnNonabstractGenericAtAspectJAspect_pr168982() { runTest("error on non-abstract generic ataspectj aspect");}
 	public void testIgnoringTypeLevelSuppression_pr234933() { runTest("ignoring type level suppress");}
 	public void testDuplicateMethodSignature_pr223226_2() { runTest("duplicate method signature - 2"); }
 	public void testDuplicateMethodSignature_pr223226() { runTest("duplicate method signature"); }
@@ -3,6 +3,12 @@
 <!-- AspectJ v1.6.1 Tests -->
 <suite>
 
+	<ajc-test dir="bugs161/pr168982" title="error on non-abstract generic ataspectj aspect">
+    	<compile files="TracingAspect2.java" options="-1.5">
+    	  <message kind="error" line="9"/>
+    	</compile>
+    </ajc-test>
+    
 	<ajc-test dir="bugs161/pr234933" title="ignoring type level suppress">
     	<compile files="Foobar.java" options="-1.5 -Xlint:error"/>
     </ajc-test>
@@ -14,6 +14,7 @@
 package org.aspectj.weaver.bcel;
 
 import java.io.PrintStream;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -33,6 +34,7 @@ import org.aspectj.apache.bcel.classfile.annotation.ElementNameValuePairGen;
 import org.aspectj.apache.bcel.classfile.annotation.ElementValueGen;
 import org.aspectj.apache.bcel.classfile.annotation.EnumElementValueGen;
 import org.aspectj.bridge.IMessageHandler;
+import org.aspectj.bridge.MessageUtil;
 import org.aspectj.weaver.AbstractReferenceTypeDelegate;
 import org.aspectj.weaver.AjAttribute;
 import org.aspectj.weaver.AjcMemberMaker;
@@ -338,6 +340,9 @@ public class BcelObjectType extends AbstractReferenceTypeDelegate {
 			// we can finally process the aspect and its associated perclause...
 			perClause = deferredAspectAttribute.reifyFromAtAspectJ(this.getResolvedTypeX());
 		}
+		if (isAspect() && !Modifier.isAbstract(getModifiers()) && isGeneric()) {
+			msgHandler.handleMessage(MessageUtil.error("The generic aspect '"+getResolvedTypeX().getName()+"' must be declared abstract",getResolvedTypeX().getSourceLocation()));
+		}
 
 	}
 

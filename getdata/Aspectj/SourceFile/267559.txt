@@ -439,6 +439,36 @@ public class ReferenceTypeTestCase extends TestCase {
 		// error: arrayListOfString = listOfNumber;
 		assertFalse(ajArrayListOfString.isAssignableFrom(ajListOfNumber));
 		assertFalse(ajArrayListOfString.isCoerceableFrom(ajListOfNumber));
+
+	}
+
+	static class ClassA<T> {
+	}
+
+	static interface IMarker<H> {
+	}
+
+	static class ClassB<T> implements IMarker<ClassA<T>> {
+	}
+
+	static class ClassC<T> implements IMarker<T> {
+	}
+
+	public void testAssignability_pr267559() {
+		ClassB cb = new ClassB();
+		ClassB cb2 = new ClassB();
+
+		ReferenceType rcb = resolve("Lorg/aspectj/weaver/ReferenceTypeTestCase$ClassB;");
+		ReferenceType rcb2 = resolve("Lorg/aspectj/weaver/ReferenceTypeTestCase$ClassB;");
+		boolean b = rcb.isAssignableFrom(rcb2);
+		assertTrue(b);
+		b = rcb2.isAssignableFrom(rcb);
+		assertTrue(b);
+
+		rcb = resolve("Porg/aspectj/weaver/ReferenceTypeTestCase$IMarker<Porg/aspectj/weaver/ReferenceTypeTestCase$ClassA<TT;>;>;");
+		rcb2 = resolve("Lorg/aspectj/weaver/ReferenceTypeTestCase$ClassB;");
+		b = rcb.isAssignableFrom(rcb2);
+		assertTrue(b);
 	}
 
 	public void testAssignable03_method_m4() {
@@ -363,6 +363,8 @@ public class ReferenceType extends ResolvedType {
 		return isAssignableFrom(other, false);
 	}
 
+	// TODO rewrite this method - it is a terrible mess
+
 	// true iff the statement "this = other" would compile.
 	public boolean isAssignableFrom(ResolvedType other, boolean allowMissing) {
 		if (other.isPrimitiveType()) {
@@ -419,12 +421,38 @@ public class ReferenceType extends ResolvedType {
 				boolean parametersAssignable = true;
 				if (myParameters.length == theirParameters.length) {
 					for (int i = 0; i < myParameters.length && parametersAssignable; i++) {
-						if (myParameters[i] == theirParameters[i])
+						if (myParameters[i] == theirParameters[i]) {
 							continue;
-						// dont do this!
+						}
+						// dont do this: pr253109
 						// if (myParameters[i].isAssignableFrom(theirParameters[i], allowMissing)) {
 						// continue;
 						// }
+						ResolvedType mp = myParameters[i];
+						ResolvedType tp = theirParameters[i];
+						if (mp.isParameterizedType() && tp.isParameterizedType()) {
+							if (mp.getGenericType().equals(tp.getGenericType())) {
+								UnresolvedType[] mtps = mp.getTypeParameters();
+								UnresolvedType[] ttps = tp.getTypeParameters();
+								for (int ii = 0; ii < mtps.length; ii++) {
+									if (mtps[ii].isTypeVariableReference() && ttps[ii].isTypeVariableReference()) {
+										TypeVariable mtv = ((TypeVariableReferenceType) mtps[ii]).getTypeVariable();
+										boolean b = mtv.canBeBoundTo((ResolvedType) ttps[ii]);
+										if (!b) {// TODO incomplete testing here I think
+											parametersAssignable = false;
+											break;
+										}
+									} else {
+										parametersAssignable = false;
+										break;
+									}
+								}
+								continue;
+							} else {
+								parametersAssignable = false;
+								break;
+							}
+						}
 						if (myParameters[i].isTypeVariableReference() && theirParameters[i].isTypeVariableReference()) {
 							TypeVariable myTV = ((TypeVariableReferenceType) myParameters[i]).getTypeVariable();
 							// TypeVariable theirTV = ((TypeVariableReferenceType) theirParameters[i]).getTypeVariable();
@@ -0,0 +1,4 @@
+public aspect Aspect
+{
+        public boolean IMarker<PARALLELSTATE>.c;
+}
@@ -0,0 +1,3 @@
+public class ClassA<T> 
+{
+}
\ No newline at end of file
@@ -0,0 +1,3 @@
+abstract public class ClassB<T> implements IMarker<ClassA<T>>
+{
+}
@@ -0,0 +1,3 @@
+public interface IMarker<H>
+{
+}
@@ -34,6 +34,10 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc164Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+	public void testGenericsItdNpe_pr267559() {
+		runTest("generics and itd npe");
+	}
+
 	public void testAnnoStyleLong_pr266564() {
 		runTest("annotation style long");
 	}
@@ -2,6 +2,10 @@
 
 <suite>
 
+   <ajc-test dir="bugs164/pr267559" title="generics and itd npe">
+     <compile files="IMarker.java ClassB.java Aspect.java ClassA.java" options="-1.5"/>
+   </ajc-test>
+   
    <ajc-test dir="bugs164/pr266564" title="annotation style long">
      <compile files="AA.java" options="-1.5"/>
      <run class="business.AA"/>

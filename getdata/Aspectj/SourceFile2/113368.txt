@@ -0,0 +1,36 @@
+public aspect Pr113368 {
+	
+	private pointcut managedBeanConstruction(ManagedBean bean) : 
+        execution(ManagedBean+.new(..)) && this(bean); 
+
+    //NPE's on the if pointcut below    
+    private pointcut topLevelManagedBeanConstruction(ManagedBean bean) : 
+        managedBeanConstruction(bean) && 
+        if(thisJoinPointStaticPart.getSignature().getDeclaringType() == bean.getClass()); 
+
+    after(ManagedBean bean) returning: topLevelManagedBeanConstruction(bean) {
+    		System.out.println("I just constructed " + bean);
+    }
+    
+    public static void main(String[] args) {
+    		new ManagedBean("super-bean");
+    		new ManagedSubBean();
+    }
+    
+}
+
+class ManagedBean {
+	
+	public ManagedBean(String s) {
+		System.out.println(s);
+	}
+}
+
+
+class ManagedSubBean extends ManagedBean {
+	
+	public ManagedSubBean() {
+		super("sub-bean");
+	}
+	
+}
\ No newline at end of file
@@ -1,6 +1,7 @@
 // random collection of pointcuts to check that
 // reflective world and PointcutParser can interpret
 // them correctly.
+import java.lang.annotation.*;
 
 public aspect PointcutLibrary {
 
@@ -10,5 +11,25 @@ public aspect PointcutLibrary {
 	public pointcut propertyGet() : execution(!void get*(..));
 	public pointcut propertySet(Object newValue) 
 		: execution(void set*(..)) && args(newValue);
+	public pointcut getAndThis(Object thisObj) :
+		get(* *) && this(thisObj);
+	public pointcut getAndTarget(Object targetObj) :
+		get(* *) && target(targetObj);
+	public pointcut getAndAtAnnotation(MyAnn ann) :
+		get(* *) && @annotation(ann);
+	public pointcut getAndAtWithin(MyAnn ann) :
+		get(* *) && @within(ann);
+	public pointcut getAndAtWithinCode(MyAnn ann) :
+		get(* *) && @withincode(ann);
+	public pointcut getAndAtThis(MyAnn ann) :
+		get(* *) && @this(ann);
+	public pointcut getAndAtTarget(MyAnn ann) :
+		get(* *) && @target(ann);
+	public pointcut setAndAtArgs(MyAnn ann) :
+		set(* *) && @args(ann);
 
-}
\ No newline at end of file
+	
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@interface MyAnn {}
\ No newline at end of file
@@ -5,13 +5,22 @@ public class ReflectOnAjcCompiledPointcuts {
 	public static void main(String[] args) {
 		PointcutParser p = new PointcutParser();
 		PointcutExpression pe = null;
-		pe = p.parsePointcutExpression("PointcutLibrary.propertyAccess()");
-		pe = p.parsePointcutExpression("PointcutLibrary.propertyUpdate()");
-		pe = p.parsePointcutExpression("PointcutLibrary.methodExecution()");
-		pe = p.parsePointcutExpression("PointcutLibrary.propertyGet()");
-		pe = p.parsePointcutExpression("PointcutLibrary.propertySet(Object)");
+//		pe = p.parsePointcutExpression("PointcutLibrary.propertyAccess()");
+//		pe = p.parsePointcutExpression("PointcutLibrary.propertyUpdate()");
+//		pe = p.parsePointcutExpression("PointcutLibrary.methodExecution()");
+//		pe = p.parsePointcutExpression("PointcutLibrary.propertyGet()");
+//		pe = p.parsePointcutExpression("PointcutLibrary.propertySet(Object)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndThis(Object)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndTarget(Object)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndAtAnnotation(MyAnn)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndAtWithin(MyAnn)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndAtWithinCode(MyAnn)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndAtThis(MyAnn)");
+		pe = p.parsePointcutExpression("PointcutLibrary.getAndAtTarget(MyAnn)");
+		pe = p.parsePointcutExpression("PointcutLibrary.setAndAtArgs(MyAnn)");
 
-		PointcutParameter pp = p.createPointcutParameter("foo",String.class);
+		
+		PointcutParameter pp = p.createPointcutParameter("foo",Object.class);
 		p.parsePointcutExpression("execution(* *(..)) && PointcutLibrary.propertySet(foo)",
 									Object.class,
 									new PointcutParameter[] {pp});

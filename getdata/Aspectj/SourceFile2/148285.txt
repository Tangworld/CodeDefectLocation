@@ -244,6 +244,17 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasntFullBuild();
 	}
 
+/*
+	public void testRefactoring_pr148285() {
+		configureBuildStructureModel(true);
+		initialiseProject("PR148285");
+		build("PR148285");
+		System.err.println("xxx");
+		alter("PR148285","inc1");
+		build("PR148285");
+	}
+*/
+	
 
 	/**
 	 * In order for this next test to run, I had to move the weaver/world pair we keep in the
@@ -0,0 +1,48 @@
+package test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+public class Main {
+        public static void main(String[] args) {
+                new Main().foo();
+        }
+
+        @PerformenceMonitor(expected=1000)
+        public void foo() {
+
+        }
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+@interface PerformenceMonitor {
+        public int expected();
+}
+
+@Aspect
+class Monitor {
+        @Pointcut("execution(@PerformenceMonitor * *(..)) && @annotation(monitoringAnnot)")
+        public void monitored(PerformenceMonitor monitoringAnnot) {}
+
+        @Around("monitored(monitoringAnnot)")
+        public Object flagExpectationMismatch(ProceedingJoinPoint pjp, PerformenceMonitor monitoringAnnot) {
+                long start = System.nanoTime();
+                Object ret = pjp.proceed();
+                long end = System.nanoTime();
+
+                if(end - start > monitoringAnnot.expected()) {
+                        System.out.println("Method " + pjp.getSignature().toShortString() + " took longer than expected\n\t"
+                                        + "Max expected = " + monitoringAnnot.expected() + ", actual = " + (end-start));
+                }
+                return ret;
+        }
+
+}
@@ -0,0 +1,29 @@
+package test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+public class Main {
+        public static void main(String[] args) {
+                new Main().foo();
+        }
+
+        @PerformenceMonitor(expected=1000)
+        public void foo() {
+
+        }
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+@interface PerformenceMonitor {
+        public int expected();
+}
+
@@ -0,0 +1,23 @@
+package test;
+
+import org.aspectj.lang.annotation.*;
+
+@Aspect
+class Monitor {
+        @Pointcut("execution(@PerformenceMonitor * *(..)) && @annotation(monitoringAnnot)")
+        public void monitored(PerformenceMonitor monitoringAnnot) {}
+
+        @Around("monitored(monitoringAnnot)")
+        public Object flagExpectationMismatch(ProceedingJoinPoint pjp, PerformenceMonitor monitoringAnnot) {
+                long start = System.nanoTime();
+                Object ret = pjp.proceed();
+                long end = System.nanoTime();
+
+                if(end - start > monitoringAnnot.expected()) {
+                        System.out.println("Method " + pjp.getSignature().toShortString() + " took longer than expected\n\t" + 
+"Max expected = " + monitoringAnnot.expected() + ", actual = " + (end-start));
+                }
+                return ret;
+        }
+
+}
@@ -244,6 +244,17 @@ public class MultiProjectIncrementalTests extends AbstractMultiProjectIncrementa
 		checkWasntFullBuild();
 	}
 
+/*
+	public void testRefactoring_pr148285() {
+		configureBuildStructureModel(true);
+		initialiseProject("PR148285");
+		build("PR148285");
+		System.err.println("xxx");
+		alter("PR148285","inc1");
+		build("PR148285");
+	}
+*/
+	
 
 	/**
 	 * In order for this next test to run, I had to move the weaver/world pair we keep in the
@@ -0,0 +1,48 @@
+package test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+public class Main {
+        public static void main(String[] args) {
+                new Main().foo();
+        }
+
+        @PerformenceMonitor(expected=1000)
+        public void foo() {
+
+        }
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+@interface PerformenceMonitor {
+        public int expected();
+}
+
+@Aspect
+class Monitor {
+        @Pointcut("execution(@PerformenceMonitor * *(..)) && @annotation(monitoringAnnot)")
+        public void monitored(PerformenceMonitor monitoringAnnot) {}
+
+        @Around("monitored(monitoringAnnot)")
+        public Object flagExpectationMismatch(ProceedingJoinPoint pjp, PerformenceMonitor monitoringAnnot) {
+                long start = System.nanoTime();
+                Object ret = pjp.proceed();
+                long end = System.nanoTime();
+
+                if(end - start > monitoringAnnot.expected()) {
+                        System.out.println("Method " + pjp.getSignature().toShortString() + " took longer than expected\n\t"
+                                        + "Max expected = " + monitoringAnnot.expected() + ", actual = " + (end-start));
+                }
+                return ret;
+        }
+
+}
@@ -0,0 +1,29 @@
+package test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+
+public class Main {
+        public static void main(String[] args) {
+                new Main().foo();
+        }
+
+        @PerformenceMonitor(expected=1000)
+        public void foo() {
+
+        }
+}
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+@interface PerformenceMonitor {
+        public int expected();
+}
+
@@ -0,0 +1,23 @@
+package test;
+
+import org.aspectj.lang.annotation.*;
+
+@Aspect
+class Monitor {
+        @Pointcut("execution(@PerformenceMonitor * *(..)) && @annotation(monitoringAnnot)")
+        public void monitored(PerformenceMonitor monitoringAnnot) {}
+
+        @Around("monitored(monitoringAnnot)")
+        public Object flagExpectationMismatch(ProceedingJoinPoint pjp, PerformenceMonitor monitoringAnnot) {
+                long start = System.nanoTime();
+                Object ret = pjp.proceed();
+                long end = System.nanoTime();
+
+                if(end - start > monitoringAnnot.expected()) {
+                        System.out.println("Method " + pjp.getSignature().toShortString() + " took longer than expected\n\t" + 
+"Max expected = " + monitoringAnnot.expected() + ", actual = " + (end-start));
+                }
+                return ret;
+        }
+
+}

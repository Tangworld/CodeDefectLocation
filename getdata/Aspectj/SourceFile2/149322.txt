@@ -1,7 +0,0 @@
-
-public aspect Aspect {
-
-	before () : call(public * method(..)) && target(Interface) {
-		System.out.println("Aspect.before()");
-	}
-}
@@ -0,0 +1,6 @@
+public aspect Aspect1 {
+
+	before () : call(public * interfaceMethod(..)) && target(Interface) {
+		System.out.println("Aspect1.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -0,0 +1,6 @@
+public aspect Aspect2 {
+
+	before () : call(public * Interface.interfaceMethod(..)) {
+		System.out.println("Aspect2.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -0,0 +1,6 @@
+public aspect Aspect3 {
+
+	before () : call(public * Interface.*(..)) {
+		System.out.println("Aspect3.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -1,5 +1,5 @@
 
 public interface Interface {
 
-	public void method ();
+	public void interfaceMethod ();
 }
@@ -1,8 +1,12 @@
 
 public class Missing implements Interface {
+	
+	public void interfaceMethod () {
+		System.out.println("Missing.interfaceMethod()");
+	}
 
-	public void method () {
-		System.out.println("Missing.method()");
+	public void missingMethod () {
+		System.out.println("Missing.missingMethod()");
 	}
 
 }
@@ -1,14 +0,0 @@
-public class TestFail {
-
-	public void invoke () {
-		Interface i = new Missing();
-		i.method();
-		Missing cf = new Missing();
-		cf.method();
-	}
-	
-	public static void main(String[] args) {
-		new TestFail().invoke();
-	}
-
-}
@@ -1,13 +0,0 @@
-
-public class TestPass {
-
-	public void invoke () {
-		Interface i = new CantFind();
-		i.method();
-	}
-	
-	public static void main(String[] args) {
-		new TestFail();
-	}
-
-}
@@ -0,0 +1,15 @@
+public class TestWithMissing {
+
+	public void invoke () {
+		Interface i = new Missing();
+		i.interfaceMethod();
+		Missing m = new Missing();
+		m.interfaceMethod();
+		m.missingMethod();
+	}
+	
+	public static void main(String[] args) {
+		new TestWithMissing().invoke();
+	}
+
+}
@@ -1,6 +0,0 @@
-<aspectj>
-	<aspects>
-		<aspect name="Aspect"/>
-	</aspects>
-	<weaver options="-verbose -showWeaveInfo"/>
-</aspectj>
\ No newline at end of file
@@ -38,7 +38,9 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testAdviceNotWovenAspectPath_pr147841()          { runTest("advice not woven on aspectpath");}
   public void testGenericSignatures_pr148409()                 { runTest("generic signature problem"); }
 //  public void testBrokenIfArgsCflowAtAj_pr145018() { runTest("ataj crashing with cflow, if and args");}
-  public void testCantFindType_pr149322_1() {runTest("can't find type on interface call");}
+  public void testCantFindType_pr149322_01() {runTest("can't find type on interface call 1");}
+  public void testCantFindType_pr149322_02() {runTest("can't find type on interface call 2");}
+  public void testCantFindType_pr149322_03() {runTest("can't find type on interface call 3");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -111,30 +111,88 @@
      <compile files="Foo.java" options="-1.5"/>
     </ajc-test> 
 
-	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call">
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 1">
 		<compile files="Interface.java"/>
         <compile
 			files="Missing.java"
         	outjar="missing.jar"
         />
-      	<compile files="TestFail.java" classpath="missing.jar"/>
-<!--
-      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="weave" text="void Missing.method()"/>
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect1.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
 		</compile>	        
-      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath .">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="weave" text="void Missing.method()"/>
+      	<compile files="Aspect1.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
 		</compile>	        
--->      	
-      	<compile files="Aspect.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="warning" text="Missing"/>
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect1.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect1.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
+    </ajc-test>    
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 2">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect2.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
+		</compile>	        
+      	<compile files="Aspect2.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine whether missing type Missing is an instance of Interface"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
+		</compile>	        
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect2.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect2.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
+    </ajc-test>    
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 3">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect3.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
+		</compile>	        
+      	<compile files="Aspect3.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine whether missing type Missing is an instance of Interface"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
 		</compile>	        
-<!--      	
-      	<run class="TestFail" ltw="aop.xml"/>
--->      	
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect3.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect3.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
     </ajc-test>    
 
 </suite>
\ No newline at end of file
@@ -0,0 +1,7 @@
+
+public aspect Aspect {
+
+	before () : call(public * method(..)) && target(Interface) {
+		System.out.println("Aspect.before()");
+	}
+}
@@ -0,0 +1,5 @@
+
+public interface Interface {
+
+	public void method ();
+}
@@ -0,0 +1,8 @@
+
+public class Missing implements Interface {
+
+	public void method () {
+		System.out.println("Missing.method()");
+	}
+	
+}
@@ -0,0 +1,14 @@
+public class TestFail {
+
+	public void invoke () {
+		Interface i = new Missing();
+		i.method();
+		Missing cf = new Missing();
+		cf.method();
+	}
+	
+	public static void main(String[] args) {
+		new TestFail().invoke();
+	}
+
+}
@@ -0,0 +1,13 @@
+
+public class TestPass {
+
+	public void invoke () {
+		Interface i = new CantFind();
+		i.method();
+	}
+	
+	public static void main(String[] args) {
+		new TestFail();
+	}
+
+}
@@ -0,0 +1,6 @@
+<aspectj>
+	<aspects>
+		<aspect name="Aspect"/>
+	</aspects>
+	<weaver options="-verbose -showWeaveInfo"/>
+</aspectj>
\ No newline at end of file
@@ -36,6 +36,10 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testVisibilityProblem_pr149071()                 { runTest("visibility problem");}
   // public void testAdviceNotWovenAspectPath_pr147841()          { runTest("advice not woven on aspectpath");}
   public void testGenericSignatures_pr148409()                 { runTest("generic signature problem"); }
+
+  public void testCantFindType_pr149322_1() {
+	  runTest("can't find type on interface call");
+  }
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -98,4 +98,30 @@
       </run>
     </ajc-test>    
 
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestFail.java" classpath="missing.jar"/>
+<!--
+      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="weave" text="void Missing.method()"/>
+		</compile>	        
+      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="weave" text="void Missing.method()"/>
+		</compile>	        
+-->      	
+      	<compile files="Aspect.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="warning" text="Missing"/>
+		</compile>	        
+<!--      	
+      	<run class="TestFail" ltw="aop.xml"/>
+-->      	
+    </ajc-test>    
+    
 </suite>
\ No newline at end of file
@@ -1,7 +0,0 @@
-
-public aspect Aspect {
-
-	before () : call(public * method(..)) && target(Interface) {
-		System.out.println("Aspect.before()");
-	}
-}
@@ -0,0 +1,6 @@
+public aspect Aspect1 {
+
+	before () : call(public * interfaceMethod(..)) && target(Interface) {
+		System.out.println("Aspect1.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -0,0 +1,6 @@
+public aspect Aspect2 {
+
+	before () : call(public * Interface.interfaceMethod(..)) {
+		System.out.println("Aspect2.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -0,0 +1,6 @@
+public aspect Aspect3 {
+
+	before () : call(public * Interface.*(..)) {
+		System.out.println("Aspect3.before() " + thisJoinPoint.getSignature().getName());
+	}
+}
@@ -1,5 +1,5 @@
 
 public interface Interface {
 
-	public void method ();
+	public void interfaceMethod ();
 }
@@ -1,8 +1,12 @@
 
 public class Missing implements Interface {
+	
+	public void interfaceMethod () {
+		System.out.println("Missing.interfaceMethod()");
+	}
 
-	public void method () {
-		System.out.println("Missing.method()");
+	public void missingMethod () {
+		System.out.println("Missing.missingMethod()");
 	}
 
 }
@@ -1,14 +0,0 @@
-public class TestFail {
-
-	public void invoke () {
-		Interface i = new Missing();
-		i.method();
-		Missing cf = new Missing();
-		cf.method();
-	}
-	
-	public static void main(String[] args) {
-		new TestFail().invoke();
-	}
-
-}
@@ -1,13 +0,0 @@
-
-public class TestPass {
-
-	public void invoke () {
-		Interface i = new CantFind();
-		i.method();
-	}
-	
-	public static void main(String[] args) {
-		new TestFail();
-	}
-
-}
@@ -0,0 +1,15 @@
+public class TestWithMissing {
+
+	public void invoke () {
+		Interface i = new Missing();
+		i.interfaceMethod();
+		Missing m = new Missing();
+		m.interfaceMethod();
+		m.missingMethod();
+	}
+	
+	public static void main(String[] args) {
+		new TestWithMissing().invoke();
+	}
+
+}
@@ -1,6 +0,0 @@
-<aspectj>
-	<aspects>
-		<aspect name="Aspect"/>
-	</aspects>
-	<weaver options="-verbose -showWeaveInfo"/>
-</aspectj>
\ No newline at end of file
@@ -38,7 +38,9 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testAdviceNotWovenAspectPath_pr147841()          { runTest("advice not woven on aspectpath");}
   public void testGenericSignatures_pr148409()                 { runTest("generic signature problem"); }
 //  public void testBrokenIfArgsCflowAtAj_pr145018() { runTest("ataj crashing with cflow, if and args");}
-  public void testCantFindType_pr149322_1() {runTest("can't find type on interface call");}
+  public void testCantFindType_pr149322_01() {runTest("can't find type on interface call 1");}
+  public void testCantFindType_pr149322_02() {runTest("can't find type on interface call 2");}
+  public void testCantFindType_pr149322_03() {runTest("can't find type on interface call 3");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -111,30 +111,88 @@
      <compile files="Foo.java" options="-1.5"/>
     </ajc-test> 
 
-	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call">
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 1">
 		<compile files="Interface.java"/>
         <compile
 			files="Missing.java"
         	outjar="missing.jar"
         />
-      	<compile files="TestFail.java" classpath="missing.jar"/>
-<!--
-      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="weave" text="void Missing.method()"/>
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect1.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
 		</compile>	        
-      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath .">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="weave" text="void Missing.method()"/>
+      	<compile files="Aspect1.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
 		</compile>	        
--->      	
-      	<compile files="Aspect.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
-	        <message kind="weave" text="void Interface.method()"/>
-	        <message kind="warning" text="Missing"/>
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect1.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect1.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
+    </ajc-test>    
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 2">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect2.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
+		</compile>	        
+      	<compile files="Aspect2.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine whether missing type Missing is an instance of Interface"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
+		</compile>	        
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect2.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect2.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
+    </ajc-test>    
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call 3">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestWithMissing.java" classpath="missing.jar"/>
+      	<compile files="Aspect3.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="weave" text="void Missing.interfaceMethod()"/>
+		</compile>	        
+      	<compile files="Aspect3.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.interfaceMethod()"/>
+	        <message kind="warning" text="can't determine whether missing type Missing is an instance of Interface"/>
+	        <message kind="warning" text="can't determine superclass of missing type Missing"/>
 		</compile>	        
-<!--      	
-      	<run class="TestFail" ltw="aop.xml"/>
--->      	
+      	<run class="TestWithMissing">
+			<stdout>
+	        	<line text="Aspect3.before() interfaceMethod"/>
+	        	<line text="Missing.interfaceMethod()"/>
+<!--	        	
+	        	<line text="Aspect3.before() interfaceMethod"/>
+-->
+	        	<line text="Missing.interfaceMethod()"/>
+	        	<line text="Missing.missingMethod()"/>
+    		</stdout>
+    	</run>
     </ajc-test>    
 
 </suite>
\ No newline at end of file
@@ -0,0 +1,7 @@
+
+public aspect Aspect {
+
+	before () : call(public * method(..)) && target(Interface) {
+		System.out.println("Aspect.before()");
+	}
+}
@@ -0,0 +1,5 @@
+
+public interface Interface {
+
+	public void method ();
+}
@@ -0,0 +1,8 @@
+
+public class Missing implements Interface {
+
+	public void method () {
+		System.out.println("Missing.method()");
+	}
+	
+}
@@ -0,0 +1,14 @@
+public class TestFail {
+
+	public void invoke () {
+		Interface i = new Missing();
+		i.method();
+		Missing cf = new Missing();
+		cf.method();
+	}
+	
+	public static void main(String[] args) {
+		new TestFail().invoke();
+	}
+
+}
@@ -0,0 +1,13 @@
+
+public class TestPass {
+
+	public void invoke () {
+		Interface i = new CantFind();
+		i.method();
+	}
+	
+	public static void main(String[] args) {
+		new TestFail();
+	}
+
+}
@@ -0,0 +1,6 @@
+<aspectj>
+	<aspects>
+		<aspect name="Aspect"/>
+	</aspects>
+	<weaver options="-verbose -showWeaveInfo"/>
+</aspectj>
\ No newline at end of file
@@ -36,6 +36,10 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testVisibilityProblem_pr149071()                 { runTest("visibility problem");}
   // public void testAdviceNotWovenAspectPath_pr147841()          { runTest("advice not woven on aspectpath");}
   public void testGenericSignatures_pr148409()                 { runTest("generic signature problem"); }
+
+  public void testCantFindType_pr149322_1() {
+	  runTest("can't find type on interface call");
+  }
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -98,4 +98,30 @@
       </run>
     </ajc-test>    
 
+	<ajc-test dir="bugs153/pr149322" title="can't find type on interface call">
+		<compile files="Interface.java"/>
+        <compile
+			files="Missing.java"
+        	outjar="missing.jar"
+        />
+      	<compile files="TestFail.java" classpath="missing.jar"/>
+<!--
+      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath ." classpath="missing.jar">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="weave" text="void Missing.method()"/>
+		</compile>	        
+      	<compile files="Aspect.aj" options="-showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="weave" text="void Missing.method()"/>
+		</compile>	        
+-->      	
+      	<compile files="Aspect.aj" options="-Xlint:warning -showWeaveInfo -inpath .">
+	        <message kind="weave" text="void Interface.method()"/>
+	        <message kind="warning" text="Missing"/>
+		</compile>	        
+<!--      	
+      	<run class="TestFail" ltw="aop.xml"/>
+-->      	
+    </ajc-test>    
+    
 </suite>
\ No newline at end of file

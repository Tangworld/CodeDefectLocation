@@ -23,6 +23,7 @@ import org.aspectj.ajdt.internal.core.builder.AjState;
 import org.aspectj.ajdt.internal.core.builder.IncrementalStateManager;
 import org.aspectj.asm.AsmManager;
 import org.aspectj.asm.IProgramElement;
+import org.aspectj.bridge.IMessage;
 import org.aspectj.testing.util.FileUtil;
 
 /**
@@ -296,23 +297,29 @@ public class MultiProjectIncrementalTests extends AjdeInteractionTestbed {
 		build("PR111779");
 	}
 */
-	
-//	public void testPr113531() {
-//		initialiseProject("PR113531");
-//		build("PR113531");
-//		assertFalse("build should have compiled ok",
-//				MyTaskListManager.hasErrorMessages());
-//		alter("PR113531","inc1");
-//		build("PR113531");
-//		assertEquals("error message should be 'foo cannot be resolved' ",
-//				"foo cannot be resolved",
-//				((IMessage)MyTaskListManager.getErrorMessages().get(0))
-//					.getMessage());
-//		alter("PR113531","inc2");
-//		build("PR113531");
-//		assertTrue("There should be no exceptions handled",
-//				MyErrorHandler.getErrorMessages().isEmpty());		
-//	}
+	// Stage1: Compile two files, pack.A and pack.A1 - A1 sets a protected field in A. 
+	// Stage2: make the field private in class A > gives compile error
+	// Stage3: Add a new aspect whilst there is a compile error !
+	public void testPr113531() {
+		initialiseProject("PR113531");
+		build("PR113531");
+		assertFalse("build should have compiled ok",
+				MyTaskListManager.hasErrorMessages());
+		alter("PR113531","inc1");
+		build("PR113531");
+		assertEquals("error message should be 'foo cannot be resolved' ",
+				"foo cannot be resolved",
+				((IMessage)MyTaskListManager.getErrorMessages().get(0))
+					.getMessage());
+		alter("PR113531","inc2");
+		build("PR113531");
+		assertTrue("There should be no exceptions handled:\n"+MyErrorHandler.getErrorMessages(),
+				MyErrorHandler.getErrorMessages().isEmpty());		
+		assertEquals("error message should be 'foo cannot be resolved' ",
+				"foo cannot be resolved",
+				((IMessage)MyTaskListManager.getErrorMessages().get(0))
+					.getMessage());
+	}
 
 
 	// other possible tests:
@@ -67,6 +67,8 @@ import org.aspectj.weaver.IClassFileProvider;
 import org.aspectj.weaver.IWeaveRequestor;
 import org.aspectj.weaver.IWeaver;
 import org.aspectj.weaver.NewParentTypeMunger;
+import org.aspectj.weaver.ReferenceType;
+import org.aspectj.weaver.ReferenceTypeDelegate;
 import org.aspectj.weaver.ResolvedTypeMunger;
 import org.aspectj.weaver.ResolvedType;
 import org.aspectj.weaver.ShadowMunger;
@@ -980,7 +982,7 @@ public class BcelWeaver implements IWeaver {
                 if (theType.isAnnotationStyleAspect()) {
                     BcelObjectType classType = BcelWorld.getBcelObjectType(theType);
                     if (classType==null) {
-                        throw new BCException("Can't find bcel delegate for "+className+" type="+theType.getClass());
+                       throw new BCException("Can't find bcel delegate for "+className+" type="+theType.getClass());
                     }
                     LazyClassGen clazz = classType.getLazyClassGen();
                     BcelPerClauseAspectAdder selfMunger = new BcelPerClauseAspectAdder(theType, theType.getPerClause().getKind());
@@ -1053,8 +1055,16 @@ public class BcelWeaver implements IWeaver {
 			String className = classFile.getClassName();
 			ResolvedType theType = world.resolve(className);
 			if (theType.isAspect()) {
-				BcelObjectType classType = BcelWorld.getBcelObjectType(theType);
+			   BcelObjectType classType = BcelWorld.getBcelObjectType(theType);
 				if (classType==null) {
+					
+					// Sometimes.. if the Bcel Delegate couldn't be found then a problem occurred at compile time - on
+					// a previous compiler run.  In this case I assert the delegate will still be an EclipseSourceType
+					// and we can ignore the problem here (the original compile error will be reported again from
+					// the eclipse source type) - pr113531
+					ReferenceTypeDelegate theDelegate = ((ReferenceType)theType).getDelegate();
+					if (theDelegate.getClass().getSimpleName().equals("EclipseSourceType")) continue;
+
 					throw new BCException("Can't find bcel delegate for "+className+" type="+theType.getClass());
 				}
 		        weaveAndNotify(classFile, classType,requestor);
@@ -0,0 +1,7 @@
+package pack1;
+
+public abstract aspect A {
+
+	protected int foo;
+	
+}
@@ -0,0 +1,9 @@
+package pack1;
+
+public aspect A1 extends A {
+	
+	private void bar () {
+		foo = 2;
+	}
+	
+}
@@ -0,0 +1,7 @@
+package pack1;
+
+public abstract aspect A {
+
+	private int foo;
+	
+}
@@ -0,0 +1,5 @@
+package pack1;
+
+public aspect A3 {
+
+}
@@ -267,6 +267,8 @@ public class AjdeInteractionTestbed extends TestCase {
 
 	static class MyErrorHandler implements ErrorHandler {
 		static MyErrorHandler _instance = new MyErrorHandler();
+		private List errorMessages = new ArrayList();
+		
 		private MyErrorHandler() {}
 
 		public static ErrorHandler getInstance() { 
@@ -279,12 +281,17 @@ public class AjdeInteractionTestbed extends TestCase {
 
 		public void handleError(String message) {
 			log("ErrorHandler.handleWarning("+message+")");
-			
+			errorMessages.add(message);
 		}
 
 		public void handleError(String message, Throwable t) {
 			log("ErrorHandler.handleError("+message+","+t+")");
 			if (VERBOSE) t.printStackTrace();
+			errorMessages.add(message+","+t+")");
+		}
+		
+		public static List/*String*/ getErrorMessages() {
+			return _instance.errorMessages;
 		}
 
 	}
@@ -23,6 +23,7 @@ import org.aspectj.ajdt.internal.core.builder.AjState;
 import org.aspectj.ajdt.internal.core.builder.IncrementalStateManager;
 import org.aspectj.asm.AsmManager;
 import org.aspectj.asm.IProgramElement;
+import org.aspectj.bridge.IMessage;
 import org.aspectj.testing.util.FileUtil;
 
 /**
@@ -296,6 +297,23 @@ public class MultiProjectIncrementalTests extends AjdeInteractionTestbed {
 		build("PR111779");
 	}
 */
+	
+//	public void testPr113531() {
+//		initialiseProject("PR113531");
+//		build("PR113531");
+//		assertFalse("build should have compiled ok",
+//				MyTaskListManager.hasErrorMessages());
+//		alter("PR113531","inc1");
+//		build("PR113531");
+//		assertEquals("error message should be 'foo cannot be resolved' ",
+//				"foo cannot be resolved",
+//				((IMessage)MyTaskListManager.getErrorMessages().get(0))
+//					.getMessage());
+//		alter("PR113531","inc2");
+//		build("PR113531");
+//		assertTrue("There should be no exceptions handled",
+//				MyErrorHandler.getErrorMessages().isEmpty());		
+//	}
 
 
 	// other possible tests:

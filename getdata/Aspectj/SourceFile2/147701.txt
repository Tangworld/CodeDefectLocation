@@ -32,6 +32,9 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 //  public void testBrokenIfArgsCflowAtAj_pr145018() { runTest("ataj crashing with cflow, if and args");}
 //  public void testItdCallingGenericMethod_pr145391() { runTest("itd calling generic method");}
 //  public void testItdCallingGenericMethod_pr145391_2() { runTest("itd calling generic method - 2");}
+  public void testPackageIgnoredForException_pr147701_1() { runTest("package for exception ignored");}
+  public void testPackageIgnoredForException_pr147701_2() { runTest("package for exception ignored - 2");}
+  public void testPackageIgnoredForException_pr147701_3() { runTest("package for exception ignored - 3");}
   public void testBrokenAddSerialVersionUID_pr145950() {runTest("fails to discover Serializable");}
   public void testNoUnnecessaryDeclarationOfThrownExcp_pr129282_1() {runTest("no unnecessary declaration of thrown exception warning - 1");}
   public void testNoUnnecessaryDeclarationOfThrownExcp_pr129282_2() {runTest("no unnecessary declaration of thrown exception warning - 2");}
@@ -630,6 +630,22 @@
     <ajc-test dir="bugs152" title="new IProgramElement handle methods">
       <compile files="pr141730.aj" options="-emacssym -1.5"/>
     </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored">
+      <compile files="TestBean.java" options="-1.5"/>
+      <run class="a.b.c.TestBean"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored - 2">
+      <compile files="TestBean2.java" options="-1.5"/>
+      <run class="a.b.c.TestBean2"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored - 3">
+      <compile files="TestBean3.java" options="-1.5">
+        <message kind="error" text="@DeclareParents: defaultImpl=&quot;a.b.c.Impl&quot; does not implement the interface 'a.b.c.I'"/>
+      </compile>
+    </ajc-test>
 
     <ajc-test dir="bugs152" title="declare @method relationship">
      <compile files="pr143924.aj" options="-1.5 -showWeaveInfo -emacssym">
@@ -734,6 +734,9 @@ public class AtAjAttributes {
                                             + defaultImplClassName
                                             + "\" has no public no-arg constructor", struct);
                             }
+                            if (!fieldType.isAssignableFrom(impl)) {
+                            	reportError("@DeclareParents: defaultImpl=\""+defaultImplClassName+"\" does not implement the interface '"+fieldType.toString()+"'",struct);
+                            }
                         }
 
                     }
@@ -1168,7 +1168,6 @@ public class BcelTypeMunger extends ConcreteTypeMunger {
             );
 
             mg.getBody().append(body);
-            // XXX make sure to check that we set exceptions properly on this guy.
             weaver.addLazyMethodGen(mg);
             weaver.getLazyClassGen().warnOnAddedMethod(mg.getMethod(),getSignature().getSourceLocation());
             return true;
@@ -227,7 +227,7 @@ public class BcelWorld extends World implements Repository {
     static String[] makeBcelTypesAsClassNames(UnresolvedType[] types) {
         String[] ret = new String[types.length];
         for (int i = 0, len = types.length; i < len; i++) {
-            ret[i] = types[i].getClassName();//makeBcelType(types[i]);
+            ret[i] = types[i].getName();
         }
         return ret;
     }
@@ -0,0 +1,26 @@
+// simple version - we go bang if Impl doesnt implement I...
+
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m(); }
+
+class Impl implements I {
+  public Impl() {}
+  public void m() {}
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean()).m();
+  }
+}
+
+class BeansException extends Exception {}
@@ -0,0 +1,24 @@
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m() throws BeansException; }
+
+class Impl implements I {
+  public Impl() {}
+  public void m() throws BeansException { }
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean2", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean2 {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean2()).m();
+  }
+}
+
+class BeansException extends Exception {}
@@ -0,0 +1,26 @@
+// simple version - we go bang if Impl doesnt implement I...
+
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m(); }
+
+class Impl { // error!!!  implements I {
+  public Impl() {}
+  public void m() {}
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean3", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean3 {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean3()).m();
+  }
+}
+
+class BeansException extends Exception {}
@@ -32,6 +32,9 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 //  public void testBrokenIfArgsCflowAtAj_pr145018() { runTest("ataj crashing with cflow, if and args");}
 //  public void testItdCallingGenericMethod_pr145391() { runTest("itd calling generic method");}
 //  public void testItdCallingGenericMethod_pr145391_2() { runTest("itd calling generic method - 2");}
+  public void testPackageIgnoredForException_pr147701_1() { runTest("package for exception ignored");}
+  public void testPackageIgnoredForException_pr147701_2() { runTest("package for exception ignored - 2");}
+  public void testPackageIgnoredForException_pr147701_3() { runTest("package for exception ignored - 3");}
   public void testBrokenAddSerialVersionUID_pr145950() {runTest("fails to discover Serializable");}
   public void testNoUnnecessaryDeclarationOfThrownExcp_pr129282_1() {runTest("no unnecessary declaration of thrown exception warning - 1");}
   public void testNoUnnecessaryDeclarationOfThrownExcp_pr129282_2() {runTest("no unnecessary declaration of thrown exception warning - 2");}
@@ -630,6 +630,22 @@
     <ajc-test dir="bugs152" title="new IProgramElement handle methods">
       <compile files="pr141730.aj" options="-emacssym -1.5"/>
     </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored">
+      <compile files="TestBean.java" options="-1.5"/>
+      <run class="a.b.c.TestBean"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored - 2">
+      <compile files="TestBean2.java" options="-1.5"/>
+      <run class="a.b.c.TestBean2"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr147701" title="package for exception ignored - 3">
+      <compile files="TestBean3.java" options="-1.5">
+        <message kind="error" text="@DeclareParents: defaultImpl=&quot;a.b.c.Impl&quot; does not implement the interface 'a.b.c.I'"/>
+      </compile>
+    </ajc-test>
 
     <ajc-test dir="bugs152" title="declare @method relationship">
      <compile files="pr143924.aj" options="-1.5 -showWeaveInfo -emacssym">
@@ -734,6 +734,9 @@ public class AtAjAttributes {
                                             + defaultImplClassName
                                             + "\" has no public no-arg constructor", struct);
                             }
+                            if (!fieldType.isAssignableFrom(impl)) {
+                            	reportError("@DeclareParents: defaultImpl=\""+defaultImplClassName+"\" does not implement the interface '"+fieldType.toString()+"'",struct);
+                            }
                         }
 
                     }
@@ -1168,7 +1168,6 @@ public class BcelTypeMunger extends ConcreteTypeMunger {
             );
 
             mg.getBody().append(body);
-            // XXX make sure to check that we set exceptions properly on this guy.
             weaver.addLazyMethodGen(mg);
             weaver.getLazyClassGen().warnOnAddedMethod(mg.getMethod(),getSignature().getSourceLocation());
             return true;
@@ -227,7 +227,7 @@ public class BcelWorld extends World implements Repository {
     static String[] makeBcelTypesAsClassNames(UnresolvedType[] types) {
         String[] ret = new String[types.length];
         for (int i = 0, len = types.length; i < len; i++) {
-            ret[i] = types[i].getClassName();//makeBcelType(types[i]);
+            ret[i] = types[i].getName();
         }
         return ret;
     }
@@ -0,0 +1,26 @@
+// simple version - we go bang if Impl doesnt implement I...
+
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m(); }
+
+class Impl implements I {
+  public Impl() {}
+  public void m() {}
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean()).m();
+  }
+}
+
+class BeansException extends Exception {}
@@ -0,0 +1,24 @@
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m() throws BeansException; }
+
+class Impl implements I {
+  public Impl() {}
+  public void m() throws BeansException { }
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean2", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean2 {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean2()).m();
+  }
+}
+
+class BeansException extends Exception {}
@@ -0,0 +1,26 @@
+// simple version - we go bang if Impl doesnt implement I...
+
+package a.b.c;
+
+import org.aspectj.lang.annotation.*;
+
+interface I { public void m(); }
+
+class Impl { // error!!!  implements I {
+  public Impl() {}
+  public void m() {}
+}
+
+@Aspect
+class TestBeanAdvice {
+  @DeclareParents(value="a.b.c.TestBean3", defaultImpl=a.b.c.Impl.class)
+  private I implementationInterface;
+}
+
+public class TestBean3 {
+  public static void main(String []argv) throws Exception {
+    ((I)new TestBean3()).m();
+  }
+}
+
+class BeansException extends Exception {}

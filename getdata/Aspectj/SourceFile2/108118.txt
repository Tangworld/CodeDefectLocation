@@ -21,7 +21,7 @@ public aspect AnnotatedAspect05 {
 	after() : handler(*) {}
 
 	@MethodAnnotation
-	@SuppressAjWarnings
+	@SuppressAjWarnings("adviceDidNotMatch")
 	Object around() : call(new(..)) { return proceed(); }
 
 	public static void main(String[] args) {
@@ -2,7 +2,7 @@ aspect CovAspect06 {
 
   pointcut p(): call(Car Sub.getCar());
 
-  @org.aspectj.lang.annotation.SuppressAjWarnings
+  @org.aspectj.lang.annotation.SuppressAjWarnings("adviceDidNotMatch")
   before(): p() {
   	System.out.println("[call(Car Sub.getCar()) matched on '"+thisJoinPoint+":"+thisJoinPoint.getSourceLocation()+"']");
   }
@@ -0,0 +1,46 @@
+import org.aspectj.lang.annotation.*;
+
+public aspect SuppressionDuringMatching {
+	
+//	// XLint:unmatchedSuperTypeInCall
+//	// XLint:adviceDidNotApply
+//	before() : call(* Sub.foo()) {
+//		
+//	}
+//	
+//	@SuppressAjWarnings
+//	before() : call(* Sub.foo()) {
+//		
+//	}
+//	
+//	// XLint:unmatchedSuperTypeInCall
+//	@SuppressAjWarnings("adviceDidNotApply")
+//	before() : call(* Sub.foo()) {
+//		
+//	}
+//	
+	
+	// XLint:adviceDidNotApply
+	@SuppressAjWarnings("unmatchedSuperTypeInCall")
+	before() : call(* Sub.foo()) {
+		
+	}
+	
+	
+}
+
+class Super {
+	
+	public void foo() {}
+	
+	void bar() {
+		foo();
+	}
+}
+
+class Sub extends Super {
+	
+	void bar() {
+		foo();
+	}
+}
\ No newline at end of file
@@ -46,4 +46,8 @@ public class SuppressedWarnings extends XMLBasedAjcTestCase {
   public void testSuppressionWithCflow_pr93345() {
     runTest("XLint warning for advice not applied with cflow(execution)");
   }
+  
+  public void testSuppressionOfMessagesIssuedDuringMatching() {
+	  runTest("SuppressAjWarnings raised during matching");
+  }
 }
\ No newline at end of file
@@ -2783,6 +2783,11 @@
         </stderr>
       </run>
    </ajc-test>
+   
+   <ajc-test dir="java5/suppressedWarnings" title="SuppressAjWarnings raised during matching">
+       <compile files="SuppressionDuringMatching.aj" options="-1.5">
+       </compile>
+   </ajc-test>
 
    <!-- ============================================================== -->
 
@@ -33,6 +33,7 @@ import org.aspectj.weaver.Member;
 import org.aspectj.weaver.ResolvedMember;
 import org.aspectj.weaver.ResolvedType;
 import org.aspectj.weaver.Shadow;
+import org.aspectj.weaver.ShadowMunger;
 import org.aspectj.weaver.UnresolvedType;
 import org.aspectj.weaver.WeaverMessages;
 import org.aspectj.weaver.World;
@@ -40,6 +41,7 @@ import org.aspectj.weaver.ast.Literal;
 import org.aspectj.weaver.ast.Test;
 import org.aspectj.weaver.patterns.ExactTypePattern;
 import org.aspectj.weaver.patterns.ExposedState;
+import org.aspectj.weaver.patterns.PerClause;
 import org.aspectj.weaver.patterns.Pointcut;
 
 /**
@@ -76,6 +78,20 @@ public class BcelAdvice extends Advice {
 
     // ---- implementations of ShadowMunger's methods
 
+	public ShadowMunger concretize(ResolvedType fromType, World world, PerClause clause) {
+		suppressLintWarnings(world);
+		ShadowMunger ret = super.concretize(fromType, world, clause);
+		clearLintSuppressions(world);
+		return ret;
+	}
+	
+	public boolean match(Shadow shadow, World world) {
+		suppressLintWarnings(world);
+		boolean ret = super.match(shadow, world);
+		clearLintSuppressions(world);
+		return ret;
+	}
+	
     public void specializeOn(Shadow shadow) {
 	  	if (getKind() == AdviceKind.Around) {
 	  		((BcelShadow)shadow).initializeForAroundClosure();
@@ -98,16 +114,9 @@ public class BcelAdvice extends Advice {
     	}
 
     	World world = shadow.getIWorld();
-    	if (suppressedLintKinds == null) {
-    		if (signature instanceof BcelMethod) {
-    			this.suppressedLintKinds = Utility.getSuppressedWarnings(signature.getAnnotations(), world.getLint());
-    		} else {
-    			this.suppressedLintKinds = Collections.EMPTY_LIST;
-    		}
-    	}
-    	world.getLint().suppressKinds(suppressedLintKinds);
+    	suppressLintWarnings(world);
 		pointcutTest = getPointcut().findResidue(shadow, exposedState);
-		world.getLint().clearSuppressions();
+		clearLintSuppressions(world);
 
 		// these initializations won't be performed by findResidue, but need to be
 		// so that the joinpoint is primed for weaving
@@ -566,4 +575,18 @@ public class BcelAdvice extends Advice {
 		return hasMatchedAtLeastOnce;
 	}
 
+	protected void suppressLintWarnings(World inWorld) {
+		if (suppressedLintKinds == null) {
+    		if (signature instanceof BcelMethod) {
+    			this.suppressedLintKinds = Utility.getSuppressedWarnings(signature.getAnnotations(), inWorld.getLint());
+    		} else {
+    			this.suppressedLintKinds = Collections.EMPTY_LIST;
+    		}
+    	}
+    	inWorld.getLint().suppressKinds(suppressedLintKinds);
+	}
+	
+	protected void clearLintSuppressions(World inWorld) {
+		inWorld.getLint().clearSuppressions();
+	}
 }
@@ -734,7 +734,8 @@ public class Utility {
             	for (int j = 0; j < values.length; j++) {
             		// We know values in the array are strings
 					SimpleElementValue value = (SimpleElementValue)values[j];
-					suppressedWarnings.add(lint.getLintKind(value.getValueString()));
+					Lint.Kind lintKind = lint.getLintKind(value.getValueString());
+					if (lintKind != null) suppressedWarnings.add(lintKind);
 				}
             }
           }

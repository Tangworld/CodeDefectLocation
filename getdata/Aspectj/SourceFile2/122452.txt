@@ -28,8 +28,8 @@ public class Ajc151Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testParameterizedCollectionFieldMatching_pr124808() { runTest("parameterized collection fields matched via pointcut");}
   public void testGenericAspectsAndAnnotations_pr124654() { runTest("generic aspects and annotations");}
   public void testCallInheritedGenericMethod_pr124999() { runTest("calling inherited generic method from around advice");}
-  //public void testIncorrectlyReferencingPointcuts_pr122452()    { runTest("incorrectly referencing pointcuts");}
-  //public void testIncorrectlyReferencingPointcuts_pr122452_2()    { runTest("incorrectly referencing pointcuts - 2");}
+  public void testIncorrectlyReferencingPointcuts_pr122452()    { runTest("incorrectly referencing pointcuts");}
+  public void testIncorrectlyReferencingPointcuts_pr122452_2()    { runTest("incorrectly referencing pointcuts - 2");}
 
   public void testMixingNumbersOfTypeParameters_pr125080()   { 
 	  runTest("mixing numbers of type parameters");    
@@ -71,11 +71,17 @@
     </ajc-test>
 
     <ajc-test dir="bugs151" title="incorrectly referencing pointcuts">
-        <compile files="pr122452.aj" options="-1.5"/>
+        <compile files="pr122452.aj" options="-1.5">
+          <message kind="warning" line="2" text="no match for this type name: Point [Xlint:invalidAbsoluteTypeName]"/>
+          <message kind="warning" line="3" text="no match for this type name: related.Hello [Xlint:invalidAbsoluteTypeName]"/>
+          <message kind="error" line="4" text="Syntax error on token &quot;*&quot;, &quot;(&quot; expected"/>
+        </compile>
     </ajc-test>
 
     <ajc-test dir="bugs151" title="incorrectly referencing pointcuts - 2">
-        <compile files="pr122452_2.aj" options="-1.5"/>
+        <compile files="pr122452_2.aj" options="-1.5">
+          <message kind="error" line="2" text="Syntax error on token &quot;*&quot;, &quot;(&quot; expected"/>
+        </compile>
     </ajc-test>
 
     <ajc-test dir="bugs151/pr125080" title="mixing numbers of type parameters">
@@ -546,8 +546,13 @@ public class PatternParser {
     		onType = null;
     	}
 
+		String simpleName = name.maybeGetSimpleName();
+		if (simpleName ==  null) {
+			throw new ParserException("(",tokenSource.peek(-1));
+		}
+
 		TypePatternList arguments = parseArgumentsPattern();
-		return new ReferencePointcut(onType, name.maybeGetSimpleName(), arguments);
+		return new ReferencePointcut(onType, simpleName, arguments);
 	}
 
 	private Pointcut parseDesignatorPointcut(PointcutDesignatorHandler pcdHandler) {
@@ -1325,7 +1330,11 @@ public class PatternParser {
 		if (shouldEnd && t!=IToken.EOF) {
 			throw new ParserException("<string>;",token);
 		}
-
+		// bug 125027: since we've eaten the ";" we need to set the index
+		// to be one less otherwise the end position isn't set correctly.
+		int currentIndex = tokenSource.getIndex();
+		tokenSource.setIndex(currentIndex-1);
+		
 		return result.toString();
 
 	}
@@ -44,6 +44,13 @@ public class DeclareErrorOrWarningTestCase extends TestCase {
 
 	}
 
+	public void testStartAndEndPositionSet() throws IOException {
+		DeclareErrorOrWarning d =
+			parse("declare error: call(void foo()): \"that is bad\";");
+		assertEquals("start position should be 0", 0, d.getStart());
+		assertEquals("end position should be 46", 46, d.getEnd());
+	}
+	
 	private DeclareErrorOrWarning parse(String string) {
 		return (DeclareErrorOrWarning)new PatternParser(string).parseDeclare();
 	}
@@ -0,0 +1,7 @@
+public aspect pr122452 {
+    pointcut greeting() : call (* Point.sayHello(..));
+    pointcut greeting2() : call (* related.Hello.sayHello(..));
+    after() returning() : greeting*() {
+        System.out.println(" World!");
+    }
+}
@@ -0,0 +1,5 @@
+public aspect pr122452_2 {
+    after() returning() : greeting*() {  
+        System.out.println(" World!");
+    }
+}
@@ -27,6 +27,9 @@ public class Ajc151Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testParameterizedCollectionFieldMatching_pr124808() { runTest("parameterized collection fields matched via pointcut");}
   public void testGenericAspectsAndAnnotations_pr124654() { runTest("generic aspects and annotations");}
   public void testCallInheritedGenericMethod_pr124999() { runTest("calling inherited generic method from around advice");}
+  //public void testIncorrectlyReferencingPointcuts_pr122452()    { runTest("incorrectly referencing pointcuts");}
+  //public void testIncorrectlyReferencingPointcuts_pr122452_2()    { runTest("incorrectly referencing pointcuts - 2");}
+  
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -69,4 +69,13 @@
           </stderr>
         </run>
     </ajc-test>
+    
+    <ajc-test dir="bugs151" title="incorrectly referencing pointcuts">
+        <compile files="pr122452.aj" options="-1.5"/>
+    </ajc-test>
+    
+    <ajc-test dir="bugs151" title="incorrectly referencing pointcuts - 2">
+        <compile files="pr122452_2.aj" options="-1.5"/>
+    </ajc-test>
+
 </suite>
\ No newline at end of file

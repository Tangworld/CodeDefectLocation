@@ -595,7 +595,7 @@ public class UnresolvedType implements TypeVariableDeclaringElement {
      */
     public UnresolvedType getOutermostType() {
     	if (isArray() || isPrimitiveType()) return this;
-		String sig = getSignature();
+		String sig = getErasureSignature();
 		int dollar = sig.indexOf('$');
 		if (dollar != -1) {
 			return UnresolvedType.forSignature(sig.substring(0, dollar) + ';');
@@ -0,0 +1,15 @@
+public class PR119543 {
+	
+	public abstract static aspect A<T> {
+		
+		private pointcut caching();
+		private pointcut permitted();
+		
+		before() : caching() {
+		}
+	}
+	
+	static aspect A1 extends A<String> {				
+	}
+
+}
@@ -42,6 +42,9 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
     return new File("../tests/src/org/aspectj/systemtest/ajc150/ajc150.xml");
   }
 
+ // public void testGenericPTW_pr119539_1() { runTest("generic pertypewithin aspect - 1");}
+  //public void testGenericPTW_pr119539_2() { runTest("generic pertypewithin aspect - 2");}
+  //public void testGenericPTW_pr119539_3() { runTest("generic pertypewithin aspect - 3");}
   /*
   public void testBrokenDispatchByITD_pr72834() { runTest("broken dispatch");}
   public void testMissingAccessor_pr73856() { runTest("missing accessor");}
@@ -798,6 +801,10 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	  runTest("no NPE with or pointcut and more than one args");
   }
 
+  public void testNoSOBWithGenericInnerAspects_pr119543() {
+	  runTest("no StringOutOfBoundsException with generic inner aspects");
+  }
+  
   // helper methods.....
 
   public SyntheticRepository createRepos(File cpentry) {

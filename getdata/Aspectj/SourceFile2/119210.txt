@@ -2231,7 +2231,7 @@ public class BcelShadow extends Shadow {
 		        Utility.createConversion(
 		            getFactory(), 
 		            BcelWorld.makeBcelType(mungerSig.getReturnType()), 
-		            extractedMethod.getReturnType()));
+		            extractedMethod.getReturnType(),world.isInJava5Mode()));
 		    if (! isFallsThrough()) {
 		        advice.append(InstructionFactory.createReturn(extractedMethod.getReturnType()));
 		    }
@@ -2659,7 +2659,7 @@ public class BcelShadow extends Shadow {
 	            Utility.createConversion(
 	                getFactory(), 
 	                BcelWorld.makeBcelType(munger.getSignature().getReturnType()), 
-	                callbackMethod.getReturnType());
+	                callbackMethod.getReturnType(),world.isInJava5Mode());
 			if (!isFallsThrough()) {
 				returnConversionCode.append(
 					InstructionFactory.createReturn(callbackMethod.getReturnType()));
@@ -394,11 +394,15 @@ public class Utility {
         }
     }
 
+    public static InstructionList createConversion(InstructionFactory factory,Type fromType,Type toType) {
+    	return createConversion(factory,fromType,toType,false);
+    }
 
     public static InstructionList createConversion(
             InstructionFactory fact,
             Type fromType,
-            Type toType) {
+            Type toType,
+            boolean allowAutoboxing) {
         //System.out.println("cast to: " + toType);
 
         InstructionList il = new InstructionList();
@@ -459,6 +463,35 @@ public class Utility {
                 && ((ReferenceType)fromType).isAssignmentCompatibleWith(toType)) {
             return il;
         }
+        
+        if (allowAutoboxing) {
+	        if (toType instanceof BasicType && fromType instanceof ReferenceType) {
+	        	// unboxing
+	        	String name = toType.toString() + "Value";
+	            il.append(
+	                fact.createInvoke(
+	                    "org.aspectj.runtime.internal.Conversions",
+	                    name,
+	                    toType,
+	                    new Type[] { Type.OBJECT },
+	                    Constants.INVOKESTATIC));
+	            return il;
+	        }
+	        
+	        if (fromType instanceof BasicType && toType instanceof ReferenceType) {
+	        	// boxing
+	        	String name = fromType.toString() + "Object";
+	            il.append(
+	                fact.createInvoke(
+	                    "org.aspectj.runtime.internal.Conversions",
+	                    name,
+	                    Type.OBJECT,
+	                    new Type[] { fromType },
+	                    Constants.INVOKESTATIC));
+	            il.append(fact.createCast(Type.OBJECT, toType));
+	            return il;
+	        }
+        }
 
         il.append(fact.createCast(fromType, toType));
         return il;
@@ -0,0 +1,8 @@
+public class TestLib {
+
+          public static void main(String[] args) {
+                System.err.println("obtaining five, got "+new TestLib().getFive());
+          }
+          
+          public int getFive() { return 5; }
+}
\ No newline at end of file
@@ -0,0 +1,8 @@
+public class TestLib2 {
+
+          public static void main(String[] args) {
+                System.err.println("obtaining five, got "+new TestLib2().getFive());
+          }
+          
+          public Integer getFive() { return new Integer(5); }
+}
\ No newline at end of file
@@ -0,0 +1,19 @@
+public aspect ThreadAspectLib {
+//        pointcut setThreadLocalsField(): set(private int TestLib.myInt);
+//
+//        Integer around():setThreadLocalsField()
+//        {
+//                try{
+//                        return new Integer(2);
+//                }
+//                catch(Exception e)
+//                {
+//                        e.printStackTrace();
+//                        return null;
+//                }
+//        }
+        
+        Integer around(): call(* getFive()) {
+        	return new Integer(3);
+        }
+}
\ No newline at end of file
@@ -0,0 +1,19 @@
+public aspect ThreadAspectLib2 {
+//        pointcut setThreadLocalsField(): set(private int TestLib.myInt);
+//
+//        Integer around():setThreadLocalsField()
+//        {
+//                try{
+//                        return new Integer(2);
+//                }
+//                catch(Exception e)
+//                {
+//                        e.printStackTrace();
+//                        return null;
+//                }
+//        }
+        
+        int around(): call(* getFive()) {
+        	return 3;
+        }
+}
\ No newline at end of file
@@ -42,7 +42,7 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
     return new File("../tests/src/org/aspectj/systemtest/ajc150/ajc150.xml");
   }
 
- // public void testGenericPTW_pr119539_1() { runTest("generic pertypewithin aspect - 1");}
+  //public void testGenericPTW_pr119539_1() { runTest("generic pertypewithin aspect - 1");}
   //public void testGenericPTW_pr119539_2() { runTest("generic pertypewithin aspect - 2");}
   //public void testGenericPTW_pr119539_3() { runTest("generic pertypewithin aspect - 3");}
   /*
@@ -79,7 +79,9 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testFieldGet_pr114343_2()       { runTest("field-get, generics and around advice - 2");}
   public void testFieldGet_pr114343_3()       { runTest("field-get, generics and around advice - 3");}
   public void testCaptureBinding_pr114744()   { runTest("capturebinding wildcard problem");}
-  
+  public void testAutoboxingAroundAdvice_pr119210_1()   { runTest("autoboxing around advice - 1");}
+  public void testAutoboxingAroundAdvice_pr119210_2()   { runTest("autoboxing around advice - 2");}
+  public void testAutoboxingAroundAdvice_pr119210_3()   { runTest("autoboxing around advice - 3");}
   public void testBadDecp_pr110788_1() { runTest("bad generic decp - 1");}
   public void testBadDecp_pr110788_2() { runTest("bad generic decp - 2");}
   public void testBadDecp_pr110788_3() { runTest("bad generic decp - 3");}
@@ -68,6 +68,31 @@
      <compile files="Pr114054.aj" options=""/>
      <run class="Pr114054"/>
     </ajc-test>  
+
+    <ajc-test dir="bugs150/pr119210" pr="119210" title="autoboxing around advice - 1">
+     <compile files="TestLib.java,ThreadAspectLib.java" options="-1.5"/>
+     <run class="TestLib">
+       <stderr>
+          <line text="obtaining five, got 3"/>
+       </stderr>
+     </run>
+    </ajc-test> 
+ 
+    <ajc-test dir="bugs150/pr119210" pr="119210" title="autoboxing around advice - 2">
+     <compile files="TestLib2.java,ThreadAspectLib2.java" options="-1.5"/>
+     <run class="TestLib2">
+       <stderr>
+          <line text="obtaining five, got 3"/>
+       </stderr>
+     </run>
+    </ajc-test> 
+   
+    <ajc-test dir="bugs150/pr119210" pr="119210" title="autoboxing around advice - 3">
+     <compile files="TestLib2.java,ThreadAspectLib2.java">
+       <message kind="error" line="16" text="incompatible return type applying to method-call(java.lang.Integer TestLib2.getFive())"/>
+       <message kind="error" line="4" text="incompatible return type applying to method-call(java.lang.Integer TestLib2.getFive())"/>
+     </compile>
+    </ajc-test> 
 
     <ajc-test dir="bugs150/pr119539" pr="119539" title="generic pertypewithin aspect - 1">
      <compile files="GenericPerTypeWithin.java" options="-1.5 -showWeaveInfo">

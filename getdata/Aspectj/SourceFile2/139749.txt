@@ -38,7 +38,7 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testReferencePCutInDeclareWarning_pr138215() { runTest("Reference pointcut fails inside @DeclareWarning");}
 //  public void testReferencePCutInPerClause_pr138219() { runTest("Can't use a FQ Reference pointcut in any pointcut expression referenced by a per-clause");}
 //  public void testDoubleAnnotationMatching_pr138223() { runTest("Double at annotation matching (no binding)");}
-//  public void testSuperCallsInAtAspectJAdvice_pr139749() { runTest("Super calls in @AspectJ advice");}
+  public void testSuperCallsInAtAspectJAdvice_pr139749() { runTest("Super calls in @AspectJ advice");}
 
   public void testNoClassCastExceptionWithPerThis_pr138286() { runTest("No ClassCastException with perThis");}
 
@@ -165,8 +165,12 @@ public class BcelAccessForInlineMunger extends BcelTypeMunger {
                             realizedCannotInline = true;
                         } else {
                             // specific handling for super.foo() calls, where foo is non public
-                            if (aspectType.getSuperclass() != null
-                                    && aspectType.getSuperclass().getName().equals(callee.getName())) {
+                        	ResolvedType memberType = m_aspectGen.getWorld().resolve(resolvedMember.getDeclaringType());
+                        	if (!aspectType.equals(memberType) &&
+                        		memberType.isAssignableFrom(aspectType)) {
+                        		// old test was...
+  //                            if (aspectType.getSuperclass() != null
+  //                                    && aspectType.getSuperclass().getName().equals(resolvedMember.getDeclaringType().getName())) {
                                 ResolvedMember accessor = createOrGetInlineAccessorForSuperDispatch(resolvedMember);
                                 InvokeInstruction newInst = factory.createInvoke(
                                         aspectType.getName(),
@@ -0,0 +1,36 @@
+
+package a.b.c;
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+
+class ASuperClass {
+
+	protected void takesApjp(ProceedingJoinPoint pjp) {
+		System.out.println(pjp);
+	}
+
+}
+
+@Aspect
+public class AroundAdvicePassingPjpAsArgToSuper extends ASuperClass {
+
+	@Around("execution(* foo())")
+	public Object passesPjp(ProceedingJoinPoint pjp) throws Throwable {
+		takesApjp(pjp);
+		Object ret = pjp.proceed();
+		return ret;
+	}
+	
+	public static void main(String[] args) {
+		new C().foo();
+	}
+}
+
+class C {
+
+	public Object foo() {
+		return new Object();
+    }
+}
\ No newline at end of file
@@ -38,7 +38,8 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testReferencePCutInDeclareWarning_pr138215() { runTest("Reference pointcut fails inside @DeclareWarning");}
 //  public void testReferencePCutInPerClause_pr138219() { runTest("Can't use a FQ Reference pointcut in any pointcut expression referenced by a per-clause");}
 //  public void testDoubleAnnotationMatching_pr138223() { runTest("Double at annotation matching (no binding)");}
-  
+//  public void testSuperCallsInAtAspectJAdvice_pr139749() { runTest("Super calls in @AspectJ advice");}
+
   public void testNoClassCastExceptionWithPerThis_pr138286() { runTest("No ClassCastException with perThis");}
 
 // this next one reported as a bug by Rob Harrop, but I can't reproduce the failure yet...
@@ -192,4 +192,9 @@
       </run>
     </ajc-test>
 
+	<ajc-test dir="bugs152/pr139749" pr="139749" title="Super calls in @AspectJ advice">
+	  <compile files="AroundAdvicePassingPjpAsArgToSuper.java" options="-1.5">
+	  </compile>
+	  <run class="a.b.c.AroundAdvicePassingPjpAsArgToSuper"/>
+	</ajc-test>
 </suite>
\ No newline at end of file

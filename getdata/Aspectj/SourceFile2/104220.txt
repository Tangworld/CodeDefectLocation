@@ -0,0 +1,29 @@
+// pr104220 - adviceexecution joinpoint toString forms
+
+public aspect Pr104220 {
+	
+	before() : adviceexecution() && !within(Pr104220) {
+		System.out.println(thisJoinPoint.getKind());
+		System.out.println(thisJoinPoint.toString());
+		System.out.println(thisJoinPoint.toShortString());
+		System.out.println(thisJoinPoint.toLongString());
+	}
+
+	public static void main(String[] args) {
+		new C().foo();
+	}
+	
+}
+
+class C {
+	
+	public void foo() {}
+	
+}
+
+aspect SomeAspect {
+	
+	before() : execution(* foo(..)) {}
+	
+}
+
@@ -674,6 +674,10 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 	  runTest("Anonymous types and nome matching");
   }
 
+  public void testAdviceExecutionJPToStringForms() {
+	  runTest("adviceexecution join point toString forms");
+  }
+  
   // helper methods.....
 
   public SyntheticRepository createRepos(File cpentry) {
@@ -37,6 +37,18 @@
       </run>
     </ajc-test>
 
+    <ajc-test dir="bugs150" pr="104220" title="adviceexecution join point toString forms">
+      <compile files="Pr104220.aj"/>
+      <run class="Pr104220">
+        <stdout>
+          <line text="adviceexecution"/>
+          <line text="adviceexecution(void SomeAspect.before())"/>
+          <line text="adviceexecution(SomeAspect.before())"/>
+          <line text="adviceexecution(void SomeAspect.before())"/>
+        </stdout>
+      </run>
+    </ajc-test>
+    
     <ajc-test dir="bugs150/pr113066" title="possible static imports bug - 1">
         <compile files="Consts.java,TestNPE.java" options="-1.5"/>
     </ajc-test>
Binary files differ
Binary files differ
@@ -177,6 +177,6 @@ public interface JoinPoint {
     static String INITIALIZATION = "initialization";
     static String EXCEPTION_HANDLER = "exception-handler";
 
-    static String ADVICE_EXECUTION = "advice-execution"; //??? consider this vs. pcd
+    static String ADVICE_EXECUTION = "adviceexecution"; 
 
 }
@@ -15,6 +15,7 @@
 package org.aspectj.runtime.reflect;
 
 import java.lang.reflect.Method;
+import java.util.StringTokenizer;
 
 import org.aspectj.lang.reflect.AdviceSignature;
 
@@ -43,19 +44,30 @@ class AdviceSignatureImpl extends CodeSignatureImpl implements AdviceSignature {
     }
 
     protected String createToString(StringMaker sm) {
-        //XXX this signature needs a lot of work        
-        StringBuffer buf = new StringBuffer("ADVICE: ");
-        buf.append(sm.makeModifiersString(getModifiers()));
+        StringBuffer buf = new StringBuffer();
+//        buf.append(sm.makeModifiersString(getModifiers()));
         if (sm.includeArgs) buf.append(sm.makeTypeName(getReturnType()));
         if (sm.includeArgs) buf.append(" ");        
         buf.append(sm.makePrimaryTypeName(getDeclaringType(),getDeclaringTypeName()));
         buf.append(".");
-        buf.append(getName());        
+        buf.append(toAdviceName(getName()));        
         sm.addSignature(buf, getParameterTypes());
         sm.addThrows(buf, getExceptionTypes());
         return buf.toString();
     }
 
+    private String toAdviceName(String methodName) {
+    		if (methodName.indexOf('$') == -1) return methodName;
+    		StringTokenizer strTok = new StringTokenizer(methodName,"$");
+    		while (strTok.hasMoreTokens()) {
+    			String token = strTok.nextToken();
+    			if ( token.startsWith("before") ||
+    				 token.startsWith("after") ||
+    				 token.startsWith("around") ) return token;    			   
+    		}
+    		return methodName;
+    }
+    
     /* (non-Javadoc)
 	 * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()
 	 */
@@ -16,6 +16,8 @@ package org.aspectj.runtime.reflect;
 
 import java.lang.reflect.Modifier;
 
+import org.aspectj.lang.JoinPoint;
+
 class StringMaker {
     boolean shortTypeNames = true;
     boolean includeArgs = true;

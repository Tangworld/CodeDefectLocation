@@ -170,7 +170,9 @@ public class ConcreteAspectCodeGen {
                 		n = n.substring(0,n.indexOf("$"));
                 		elligibleAbstractions.add(n);
                 	} else {
-                		elligibleAbstractions.add(method.getName());
+                		// Only interested in abstract methods that take no parameters and are marked @Pointcut
+                		if (hasPointcutAnnotation(method))
+                			elligibleAbstractions.add(method.getName());
                 	}
                 } else {
                     reportError("Abstract method '" + method.getName() + "' cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): " + stringify());
@@ -209,6 +211,17 @@ public class ConcreteAspectCodeGen {
         sb.append("'/> in aop.xml");
         return sb.toString();
     }
+    
+    private boolean hasPointcutAnnotation(ResolvedMember member) {
+    	  AnnotationX[] as = member.getAnnotations();
+    	  if (as==null || as.length==0) return false;
+    	  for (int i = 0; i < as.length; i++) {
+			if (as[i].getTypeSignature().equals("Lorg/aspectj/lang/annotation/Pointcut;")) {
+				return true;
+			}
+		}
+    	  return false;
+    }
 
     /**
      * Build the bytecode for the concrete aspect
@@ -378,11 +378,7 @@ public class Ajc151Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testEmptyPointcutInAtAspectJWithLTW_pr125475 () {
 	  runTest("define empty pointcut using aop.xml"); 
   }
-  
-  public void testLTWGeneratedAspectWithAbstractMethod_pr125480 () {
-	  runTest("aop.xml aspect inherits abstract method that has concrete implementation in parent"); 
-  }
-  
+
   public void testGenericAspectsWithAnnotationTypeParameters() {
 	  runTest("Generic aspects with annotation type parameters");
   }
@@ -318,12 +318,6 @@
         </run>
     </ajc-test>
 
-    <ajc-test dir="bugs151/pr125480" title="aop.xml aspect inherits abstract method that has concrete implementation in parent">
-        <compile files="HelloWorld.java"/>
-        <compile files="AbstractMethods.aj, ConcreteMethods.aj"/>
-        <run class="HelloWorld" ltw="aop-tracing.xml"/>
-    </ajc-test>
-    
     <ajc-test dir="bugs151/pr125699" title="inherit advice with this() and thisJoinPoint">
         <compile files="Tracing.aj, TestTracing.aj, AtTestTracing.java" options="-1.5">
           <message kind="warning" line="13" text="advice defined in Tracing has not been applied [Xlint:adviceDidNotMatch]"/>
@@ -17,6 +17,8 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testLTWGeneratedAspectAbstractMethod_pr125480() { runTest("aop.xml aspect inheriting abstract method ");} 
+  public void testLTWGeneratedAspectAbstractMethod_pr125480_2() { runTest("aop.xml aspect inheriting abstract method - code style");} 
   //public void testSuperITDExplosion_pr134425() { runTest("super ITDs");}
   //public void testMisbehavingDeclareAnnotation_pr135865() { runTest("misbehaving declare annotation");}
   //public void testMisbehavingDeclareAnnotation_pr135865_2() { runTest("misbehaving declare annotation - 2");}
@@ -246,6 +246,29 @@
       <compile files="AtAspectWithPerClause.aj" options="-1.5">
       </compile>
     </ajc-test>
+    
+    <ajc-test dir="bugs152/pr125480" title="aop.xml aspect inheriting abstract method ">
+        <compile files="HelloWorld.java"/>
+        <compile files="AbstractMethods.aj, ConcreteMethods.aj" options="-1.5"/>
+        <run class="HelloWorld" ltw="aop-tracing.xml">
+          <stdout>
+            <line text="advice running"/>
+            <line text="Hello World!"/>
+          </stdout>
+        </run>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr125480/case2" title="aop.xml aspect inheriting abstract method - code style">
+        <compile files="HelloWorld.java"/>
+        <compile files="AbstractMethods.aj, ConcreteMethods.aj" options="-1.5"/>
+        <run class="HelloWorld" ltw="aop-tracing.xml">
+          <stdout>
+            <line text="advice running"/>
+            <line text="Hello World!"/>
+          </stdout>
+        </run>
+    </ajc-test>
+    
 
     <ajc-test dir="bugs152/pr138223" pr="138223" title="Double at annotation matching (no binding)">
       <compile files="DoubleAnnotationMatching.aj" options="-1.5">
@@ -0,0 +1,31 @@
+import org.aspectj.lang.annotation.*;
+
+
+@Aspect
+public abstract class AbstractMethods {
+
+  @Pointcut
+  protected abstract void tracingScope();
+
+  @Before("tracingScope()")
+  public void doit() {
+    test();
+    System.out.println("advice running");
+  }
+  protected abstract void test();
+}
+
+/*
+public abstract aspect AbstractMethods {
+
+	protected abstract pointcut tracingScope ();
+	
+	before () : tracingScope () {
+		test();
+                System.out.println("advice running");
+	}
+	
+	protected abstract void test ();
+//	protected void test () {}
+}
+*/
@@ -0,0 +1,6 @@
+import org.aspectj.lang.annotation.Aspect;
+
+@Aspect
+public class AtAspectTestConcreteMethods extends ConcreteMethods {
+
+}
@@ -0,0 +1,7 @@
+
+
+public abstract aspect ConcreteMethods extends AbstractMethods {
+
+	protected void test () {}
+
+}
@@ -0,0 +1,11 @@
+public class HelloWorld {
+
+	public static void main(String[] args) {
+		new HelloWorld().println();
+	}
+
+	public void println() {
+		System.out.print("Hello World!");
+	}
+
+}
@@ -0,0 +1,10 @@
+<aspectj>
+	<aspects>
+        <concrete-aspect name="TraceHelloWorld" extends="ConcreteMethods">
+        	<pointcut name="tracingScope" expression="within(HelloWorld) AND call(* println(..))"/>
+        </concrete-aspect>
+	</aspects>
+    
+    <weaver options=""/>
+</aspectj>
+
@@ -0,0 +1,13 @@
+
+public abstract aspect AbstractMethods {
+
+	protected abstract pointcut tracingScope ();
+	
+	before () : tracingScope () {
+		test();
+                System.out.println("advice running");
+	}
+	
+	protected abstract void test ();
+//	protected void test () {}
+}
@@ -0,0 +1,6 @@
+import org.aspectj.lang.annotation.Aspect;
+
+@Aspect
+public class AtAspectTestConcreteMethods extends ConcreteMethods {
+
+}
@@ -0,0 +1,7 @@
+
+
+public abstract aspect ConcreteMethods extends AbstractMethods {
+
+	protected void test () {}
+
+}
@@ -0,0 +1,11 @@
+public class HelloWorld {
+
+	public static void main(String[] args) {
+		new HelloWorld().println();
+	}
+
+	public void println() {
+		System.out.print("Hello World!");
+	}
+
+}
@@ -0,0 +1,10 @@
+<aspectj>
+	<aspects>
+        <concrete-aspect name="TraceHelloWorld" extends="ConcreteMethods">
+        	<pointcut name="tracingScope" expression="within(HelloWorld) AND call(* println(..))"/>
+        </concrete-aspect>
+	</aspects>
+    
+    <weaver options=""/>
+</aspectj>
+

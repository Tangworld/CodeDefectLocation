@@ -195,7 +195,8 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testSyntaxErrorNPE_pr103266() {runTest("NPE on syntax error");}
 
   public void testFinalAbstractClass_pr109486() { runTest("Internal compiler error (ClassParser.java:242)");}
-  //public void testComplexBinding_pr102210() { runTest("NullPointerException trying to compile");}
+ 
+  public void testComplexBinding_pr102210() { runTest("NullPointerException trying to compile");}
 
   public void testIllegalStateExceptionOnNestedParameterizedType_pr106634() { 
 	  runTest("IllegalStateException unpacking signature of nested parameterized type");
@@ -683,7 +683,21 @@ public class BcelWeaver implements IWeaver {
     // the effects of itds (on within for example), interfaces, the fact that
     // join points can have multiple signatures and so on.
     private boolean couldEverMatchSameJoinPoints(Pointcut left, Pointcut right) {
-    	if ((left instanceof OrPointcut) || (right instanceof OrPointcut)) return true;
+    	
+    	if (left instanceof OrPointcut) {
+    	  OrPointcut leftOrPointcut = (OrPointcut)left;
+    	  if (couldEverMatchSameJoinPoints(leftOrPointcut.getLeft(),right)) return true;
+    	  if (couldEverMatchSameJoinPoints(leftOrPointcut.getRight(),right)) return true;
+    	  return false;
+    	}
+    	
+    	if (right instanceof OrPointcut) {
+    	  OrPointcut rightOrPointcut = (OrPointcut)right;
+    	  if (couldEverMatchSameJoinPoints(left,rightOrPointcut.getLeft())) return true;
+    	  if (couldEverMatchSameJoinPoints(left,rightOrPointcut.getRight())) return true;
+    	  return false;
+    	}
+
     	// look for withins
     	WithinPointcut leftWithin = (WithinPointcut) findFirstPointcutIn(left,WithinPointcut.class);
     	WithinPointcut rightWithin = (WithinPointcut) findFirstPointcutIn(right,WithinPointcut.class);
@@ -27,19 +27,20 @@ public class PointcutRewriter {
 	private static final boolean WATCH_PROGRESS = false;
 
 	public Pointcut rewrite(Pointcut pc) {
-		if (WATCH_PROGRESS) System.out.println(pc);
+		if (WATCH_PROGRESS) System.out.println("Initial pointcut is        ==> " + pc);
 		Pointcut result = distributeNot(pc);
-		if (WATCH_PROGRESS) System.out.println("==> " + result);
+		if (WATCH_PROGRESS) System.out.println("Distributing NOT gives     ==> " + result);
 		result = pullUpDisjunctions(result);
-		if (WATCH_PROGRESS) System.out.println("==> " + result);
+		if (WATCH_PROGRESS) System.out.println("Pull up disjunctions gives ==> " + result);
 		result = simplifyAnds(result);
-		if (WATCH_PROGRESS) System.out.println("==> " + result);
+		if (WATCH_PROGRESS) System.out.println("Simplifying ANDs gives     ==> " + result);
 		result = sortOrs(result);
-		if (WATCH_PROGRESS) System.out.println("==> " + result);
+		if (WATCH_PROGRESS) System.out.println("Sorting ORs gives          ==> " + result);
 		return result;
 	}
 
 
+	
 	// !!X => X
 	// !(X && Y) => !X || !Y
 	// !(X || Y) => !X && !Y
@@ -95,16 +96,20 @@ public class PointcutRewriter {
 				// (A || B) && C => (A && C) || (B && C)
 				Pointcut leftLeft = ((OrPointcut)left).getLeft();
 				Pointcut leftRight = ((OrPointcut)left).getRight();
-				return new OrPointcut(
-							new AndPointcut(leftLeft,right),
-							new AndPointcut(leftRight,right));
+				return pullUpDisjunctions(
+							new OrPointcut(
+									new AndPointcut(leftLeft,right),
+									new AndPointcut(leftRight,right))
+							);
 			} else if (isOr(right) && !isOr(left)) {
 				// A && (B || C) => (A && B) || (A && C)
 				Pointcut rightLeft = ((OrPointcut)right).getLeft();
 				Pointcut rightRight = ((OrPointcut)right).getRight();
-				return new OrPointcut(
-							new AndPointcut(left,rightLeft),
-							new AndPointcut(left,rightRight));
+				return pullUpDisjunctions(
+							new OrPointcut(
+									new AndPointcut(left,rightLeft),
+									new AndPointcut(left,rightRight))
+							);
 
 			} else {
 				return new AndPointcut(left,right);
@@ -0,0 +1,34 @@
+import java.util.*;
+
+public aspect PR102210 {
+
+ pointcut complex(List list):
+   (execution(public * *(String, List)) && args(*,list)) ||
+   (execution(public * *(String, List, String)) && args(*,list,*)) ||
+   (execution(public * *(String, String[], List, String)) && args(*,*,list,*));
+
+  before(List l): complex(l) {
+    System.err.println("List size is "+l.size());
+  }
+
+  public static void main(String []argv) {
+    List l = new ArrayList();
+    l.add(".");
+    m1("xxx",l);
+    l.add(".");
+    m2("xxx",l,"yyy");
+    l.add(".");
+    m3("xxx",new String[]{"xxx","yyy"},l,"zzz");
+  }
+
+  public static void m1(String a,List b) { 
+    System.err.println("m1 running"); 
+  }
+  public static void m2(String a,List b,String c) { 
+    System.err.println("m2 running"); 
+  }
+  public static void m3(String a,String[] b,List c,String d) { 
+    System.err.println("m3 running");
+  }
+
+}
@@ -195,6 +195,7 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testSyntaxErrorNPE_pr103266() {runTest("NPE on syntax error");}
 
   public void testFinalAbstractClass_pr109486() { runTest("Internal compiler error (ClassParser.java:242)");}
+  //public void testComplexBinding_pr102210() { runTest("NullPointerException trying to compile");}
 
   public void testIllegalStateExceptionOnNestedParameterizedType_pr106634() { 
 	  runTest("IllegalStateException unpacking signature of nested parameterized type");
@@ -70,7 +70,21 @@
    <ajc-test dir="bugs150" pr="107486" title="anonymous inner classes">
         <compile files="pr107486.aj">
         </compile>
-    </ajc-test>
+   </ajc-test>
+   
+   <ajc-test dir="bugs150" pr="102210" title="NullPointerException trying to compile">
+        <compile files="PR102210.java"/>
+        <run class="PR102210">
+          <stderr>
+            <line text="List size is 1"/>
+            <line text="m1 running"/>
+            <line text="List size is 2"/>
+            <line text="m2 running"/>
+            <line text="List size is 3"/>
+            <line text="m3 running"/>
+          </stderr>
+        </run>
+   </ajc-test>
 
    <ajc-test dir="bugs150" pr="107486" title="multiple anonymous inner classes">
         <compile files="pr107486part2.aj">

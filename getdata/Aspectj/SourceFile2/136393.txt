@@ -180,7 +180,8 @@ public class InterTypeConstructorDeclaration extends InterTypeDeclaration {
 		MethodBinding explicitConstructor = null;
 		if (explicitConstructorCall != null) {
 			explicitConstructor = explicitConstructorCall.binding;
-			if (explicitConstructor.alwaysNeedsAccessMethod()) {
+			// If it is null then we are going to report something else is wrong with this code!
+			if (explicitConstructor!=null && explicitConstructor.alwaysNeedsAccessMethod()) {
 				explicitConstructor = explicitConstructor.getAccessMethod(true);
 			}
 		}
@@ -305,13 +306,12 @@ public class InterTypeConstructorDeclaration extends InterTypeDeclaration {
 
 
 	private AjAttribute makeAttribute(EclipseFactory world) {
-		if (explicitConstructorCall != null && !(explicitConstructorCall.binding instanceof ProblemMethodBinding)) {
+		if (explicitConstructorCall != null && (explicitConstructorCall.binding!=null) && !(explicitConstructorCall.binding instanceof ProblemMethodBinding)) {
 			MethodBinding explicitConstructor = explicitConstructorCall.binding;
 			if (explicitConstructor.alwaysNeedsAccessMethod()) {
 				explicitConstructor = explicitConstructor.getAccessMethod(true);
 			}
 
-			
 			((NewConstructorTypeMunger)munger).setExplicitConstructor(
 				world.makeResolvedMember(explicitConstructor));
 		} else {
@@ -46,7 +46,8 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 //public void testAtAspectWithReferencePCPerClause_pr138220() { runTest("@Aspect with reference pointcut in perclause");}  
 
   public void testJarChecking_pr137235_1() { runTest("directory with .jar extension: source and outjar"); }	    
-  public void testJarChecking_pr137235_2() { runTest("directory with .jar extension"); }	  
+  public void testJarChecking_pr137235_2() { runTest("directory with .jar extension"); }
+  public void testMakePreMethodNPE_pr136393() { runTest("NPE in makePreMethod");}
   /////////////////////////////////////////
   public static Test suite() {
     return XMLBasedAjcTestCase.loadSuite(Ajc152Tests.class);
@@ -180,7 +180,8 @@ public class InterTypeConstructorDeclaration extends InterTypeDeclaration {
 		MethodBinding explicitConstructor = null;
 		if (explicitConstructorCall != null) {
 			explicitConstructor = explicitConstructorCall.binding;
-			if (explicitConstructor.alwaysNeedsAccessMethod()) {
+			// If it is null then we are going to report something else is wrong with this code!
+			if (explicitConstructor!=null && explicitConstructor.alwaysNeedsAccessMethod()) {
 				explicitConstructor = explicitConstructor.getAccessMethod(true);
 			}
 		}
@@ -305,13 +306,12 @@ public class InterTypeConstructorDeclaration extends InterTypeDeclaration {
 
 
 	private AjAttribute makeAttribute(EclipseFactory world) {
-		if (explicitConstructorCall != null && !(explicitConstructorCall.binding instanceof ProblemMethodBinding)) {
+		if (explicitConstructorCall != null && (explicitConstructorCall.binding!=null) && !(explicitConstructorCall.binding instanceof ProblemMethodBinding)) {
 			MethodBinding explicitConstructor = explicitConstructorCall.binding;
 			if (explicitConstructor.alwaysNeedsAccessMethod()) {
 				explicitConstructor = explicitConstructor.getAccessMethod(true);
 			}
 
-			
 			((NewConstructorTypeMunger)munger).setExplicitConstructor(
 				world.makeResolvedMember(explicitConstructor));
 		} else {
@@ -46,7 +46,8 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 //public void testAtAspectWithReferencePCPerClause_pr138220() { runTest("@Aspect with reference pointcut in perclause");}  
 
   public void testJarChecking_pr137235_1() { runTest("directory with .jar extension: source and outjar"); }	    
-  public void testJarChecking_pr137235_2() { runTest("directory with .jar extension"); }	  
+  public void testJarChecking_pr137235_2() { runTest("directory with .jar extension"); }
+  public void testMakePreMethodNPE_pr136393() { runTest("NPE in makePreMethod");}
   /////////////////////////////////////////
   public static Test suite() {
     return XMLBasedAjcTestCase.loadSuite(Ajc152Tests.class);
@@ -0,0 +1,23 @@
+package hello;
+
+public aspect World {
+        pointcut greeting():
+                execution(* Hello.sayHello(..));
+        after() returning: greeting() {
+                System.out.println(" World!");
+        }
+
+        String.new(Hello c) {
+                this(h.sayHell());
+        }
+
+        private static void main(String[] args) {
+                String s = new String(new Hello());
+                Stystems.substring(0);
+        }
+
+}
+
+class Hello {
+  public void sayHell() {}
+}
\ No newline at end of file
@@ -223,4 +223,11 @@
         </run>
     </ajc-test>
 
+	<ajc-test dir="bugs152/pr136393" title="NPE in makePreMethod">
+	  <compile files="World.aj" options="-1.5">
+  	    <message kind="warning" line="10" text="this affected type is not exposed to the weaver: java.lang.String [Xlint:typeNotExposedToWeaver]"/>
+	    <message kind="error" line="11" text="h cannot be resolved"/>
+	    <message kind="error" line="16" text="Stystems cannot be resolved"/>
+	  </compile>
+	</ajc-test>
 </suite>
\ No newline at end of file

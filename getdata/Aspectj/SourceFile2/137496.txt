@@ -0,0 +1,28 @@
+interface P<T> {
+  public T pm(T t);
+//  public String pm2(String t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+//  public String pm2(String s) { return s;}
+}
+
+public class H {
+
+  public static void main(String []argv) {
+    C test = new CImpl();
+    test.pm("foo"); // manifests as 'Object pm(Object) call' due to type C being used
+//    test.pm2("foo");
+  }
+}
+
+aspect X {
+  Object around(): call(* pm(..)) { System.err.println("advice"); return null;}
+//  before(): call(* pm2(..)) {}
+}
\ No newline at end of file
@@ -27,6 +27,7 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testPointcutsAndGenerics_pr137496_3() { runTest("pointcuts and generics - E");}
   public void testPointcutsAndGenerics_pr137496_4() { runTest("pointcuts and generics - F");}
   public void testPointcutsAndGenerics_pr137496_5() { runTest("pointcuts and generics - G");}
+  public void testPointcutsAndGenerics_pr137496_6() { runTest("pointcuts and generics - H");}
   public void testAspectLibrariesAndASM_pr135001() { runTest("aspect libraries and asm");}
   public void testStackOverflow_pr136258() { runTest("stack overflow");}
   public void testIncorrectOverridesEvaluation13() { runTest("incorrect overrides evaluation - 1.3"); }
@@ -119,6 +119,17 @@
       </run>
     </ajc-test>
 
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - H">
+      <compile files="H.java" options="-1.5 -showWeaveInfo">
+        <message kind="weave" text="Join point 'method-call(java.lang.Object C.pm(java.lang.Object))' in Type 'H' (H.java:20) advised by around advice from 'X' (H.java:26)"/>
+      </compile>
+      <run class="H">
+        <stderr>
+          <line text="advice"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/binaryDecp" title="incorrect overrides evaluation - 1.3">
       <compile files="SubClassLoader.java,SubSubClassLoader.java" options="-1.3" outjar="lib.jar"/>
       <compile files="X.aj" inpath="lib.jar" options="-showWeaveInfo">
@@ -3179,7 +3179,11 @@ public class BcelShadow extends Shadow {
         if (getKind() == PreInitialization) {
         	returnType = UnresolvedType.OBJECTARRAY;
         } else {
-        	returnType = getReturnType();
+
+	    	if (getKind() == ConstructorCall) returnType = getSignature().getDeclaringType();
+	    	else if (getKind() == FieldSet) returnType = ResolvedType.VOID;
+	    	else returnType = getSignature().getReturnType().resolve(world);
+//        	returnType = getReturnType(); // for this and above lines, see pr137496
         }
         return
             new LazyMethodGen(
@@ -345,6 +345,9 @@ public abstract class ResolvedType extends UnresolvedType implements AnnotatedEl
         while (i.hasNext()) {
             ResolvedMember f = (ResolvedMember) i.next();
             if (matches(f, m)) return f;
+            if (f.hasBackingGenericMember() && m.getName().equals(f.getName())) { // might be worth checking the method behind the parameterized method (see pr137496)
+            	  if (matches(f.getBackingGenericMember(),m)) return f;
+            }
         }
         return null; //ResolvedMember.Missing;
         //throw new BCException("can't find " + m);
@@ -0,0 +1,28 @@
+interface P<T> {
+  public T pm(T t);
+//  public String pm2(String t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+//  public String pm2(String s) { return s;}
+}
+
+public class B {
+
+  public static void main(String []argv) {
+    C test = new CImpl();
+    test.pm("foo"); // manifests as 'Object pm(Object) call' due to type C being used
+//    test.pm2("foo");
+  }
+}
+
+aspect X {
+  before(): call(* pm(..)) { System.err.println("advice");}
+//  before(): call(* pm2(..)) {}
+}
\ No newline at end of file
@@ -0,0 +1,28 @@
+interface P<T> {
+  public T pm(T t);
+  public String pm2(String t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+  public String pm2(String s) { System.err.println(s);return s;}
+}
+
+public class D {
+
+  public static void main(String []argv) {
+    CImpl test = new CImpl();
+    test.pm("foo"); // manifests as 'String pm(String) call' due to type CImpl being used
+    test.pm2("foo");
+  }
+}
+
+aspect X {
+  before(): call(* pm(..)) { System.err.println("advice");}
+  before(): call(* pm2(..)) { System.err.println("advice2");}
+}
\ No newline at end of file
@@ -0,0 +1,24 @@
+interface P<T> {
+  public T pm(T t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+}
+
+public class E {
+
+  public static void main(String []argv) {
+    C test = new CImpl();
+    test.pm("foo"); // manifests as 'Object pm(Object) call' due to type C being used
+  }
+}
+
+aspect X {
+  before(): call(* pm(String)) { System.err.println("advice");} // matches?
+}
\ No newline at end of file
@@ -0,0 +1,24 @@
+interface P<T> {
+  public T pm(T t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+}
+
+public class F {
+
+  public static void main(String []argv) {
+    C test = new CImpl();
+    test.pm("foo"); // manifests as 'Object pm(Object) call' due to type C being used
+  }
+}
+
+aspect X {
+  before(): call(String pm(..)) { System.err.println("advice");} // matches?
+}
\ No newline at end of file
@@ -0,0 +1,24 @@
+interface P<T> {
+  public T pm(T t);
+}
+
+interface C extends P<String> {
+  public void cm();
+}
+
+class CImpl implements C {
+  public void cm() {}
+  public String pm(String s)  { System.err.println(s);return s;}
+}
+
+public class G {
+
+  public static void main(String []argv) {
+    C test = new CImpl();
+    test.pm("foo"); // manifests as 'Object pm(Object) call' due to type C being used
+  }
+}
+
+aspect X {
+  before(): call(* pm(Object)) { System.err.println("advice");} // no match...
+}
\ No newline at end of file
@@ -17,6 +17,11 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testPointcutsAndGenerics_pr137496_1() { runTest("pointcuts and generics - B");}
+  public void testPointcutsAndGenerics_pr137496_2() { runTest("pointcuts and generics - D");}
+  public void testPointcutsAndGenerics_pr137496_3() { runTest("pointcuts and generics - E");}
+  public void testPointcutsAndGenerics_pr137496_4() { runTest("pointcuts and generics - F");}
+  public void testPointcutsAndGenerics_pr137496_5() { runTest("pointcuts and generics - G");}
   public void testAspectLibrariesAndASM_pr135001() { runTest("aspect libraries and asm");}
   public void testStackOverflow_pr136258() { runTest("stack overflow");}
   public void testIncorrectOverridesEvaluation13() { runTest("incorrect overrides evaluation - 1.3"); }
@@ -20,6 +20,71 @@
       <run class="StatisticsTypeImpl"/>
     </ajc-test>
 
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - B">
+      <compile files="B.java" options="-1.5 -showWeaveInfo">
+        <!--message kind="weave" text="Join point 'method-call(java.lang.String C.pm(java.lang.String))' in Type 'B' (B.java:20) advised by before advice from 'X' (B.java:26)"/-->
+        <message kind="weave" text="Join point 'method-call(java.lang.Object C.pm(java.lang.Object))' in Type 'B' (B.java:20) advised by before advice from 'X' (B.java:26)"/>
+        <!--message kind="weave" text="Join point 'method-call(java.lang.String C.pm2(java.lang.String))' in Type 'B' (B.java:21) advised by before advice from 'X' (B.java:27)"/-->
+      </compile>
+      <run class="B">
+        <stderr>
+          <line text="advice"/>
+          <line text="foo"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - D">
+      <compile files="D.java" options="-1.5 -showWeaveInfo">
+		<message kind="weave" text="Join point 'method-call(java.lang.String CImpl.pm(java.lang.String))' in Type 'D' (D.java:20) advised by before advice from 'X' (D.java:26)"/>
+		<message kind="weave" text="Join point 'method-call(java.lang.String CImpl.pm2(java.lang.String))' in Type 'D' (D.java:21) advised by before advice from 'X' (D.java:27)"/>
+      </compile>
+      <run class="D">
+        <stderr>
+          <line text="advice"/>
+          <line text="foo"/>
+          <line text="advice2"/>
+          <line text="foo"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - E">
+      <compile files="E.java" options="-1.5 -showWeaveInfo">
+      	<message kind="weave" text="Join point 'method-call(java.lang.Object C.pm(java.lang.Object))' in Type 'E' (E.java:18) advised by before advice from 'X' (E.java:23)"/>
+      </compile>
+      <run class="E">
+        <stderr>
+          <line text="advice"/>
+          <line text="foo"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
+    
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - F">
+      <compile files="F.java" options="-1.5 -showWeaveInfo">
+        <message kind="weave" text="Join point 'method-call(java.lang.Object C.pm(java.lang.Object))' in Type 'F' (F.java:18) advised by before advice from 'X' (F.java:23)"/>
+      </compile>
+      <run class="F">
+        <stderr>
+          <line text="advice"/>
+          <line text="foo"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/pr137496" title="pointcuts and generics - G">
+      <compile files="G.java" options="-1.5 -showWeaveInfo">
+        <message kind="warning" line="23" text="advice defined in X has not been applied [Xlint:adviceDidNotMatch]"/>
+      </compile>
+      <run class="G">
+        <stderr>
+          <line text="foo"/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/binaryDecp" title="incorrect overrides evaluation - 1.3">
       <compile files="SubClassLoader.java,SubSubClassLoader.java" options="-1.3" outjar="lib.jar"/>
       <compile files="X.aj" inpath="lib.jar" options="-showWeaveInfo">

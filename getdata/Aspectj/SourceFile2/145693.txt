@@ -671,8 +671,10 @@ public class AjBuildManager implements IOutputClassFileNameProvider,IBinarySourc
 
     /** init only on initial batch compile? no file-specific options */
 	private void initBcelWorld(IMessageHandler handler) throws IOException {
-		List cp = buildConfig.getBootclasspath();
-		cp.addAll(buildConfig.getClasspath());
+		List cp = 
+		buildConfig.getFullClasspath(); // pr145693
+		//buildConfig.getBootclasspath();
+		//cp.addAll(buildConfig.getClasspath());
 		BcelWorld bcelWorld = new BcelWorld(cp, handler, null);
 		bcelWorld.setBehaveInJava5Way(buildConfig.getBehaveInJava5Way());
 		bcelWorld.setAddSerialVerUID(buildConfig.isAddSerialVerUID());
@@ -22,18 +22,19 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   public void testIllegalStateException_pr148737() { runTest("illegalstateexception for non generic type");}
-  public void testAtajInheritance_pr149305_1() { runTest("ataj inheritance - 1");}
-  public void testAtajInheritance_pr149305_2() { runTest("ataj inheritance - 2");}
-  public void testAtajInheritance_pr149305_3() { runTest("ataj inheritance - 3");}
+  public void testAtajInheritance_pr149305_1()     { runTest("ataj inheritance - 1");}
+  public void testAtajInheritance_pr149305_2()     { runTest("ataj inheritance - 2");}
+  public void testAtajInheritance_pr149305_3()     { runTest("ataj inheritance - 3");}
   public void testVerificationFailureForAspectOf_pr148693() {
 	runTest("verification problem");   // build the code
 	Utils.verifyClass(ajc,"mypackage.MyAspect"); // verify it <<< BRAND NEW VERIFY UTILITY FOR EVERYONE TO TRY ;)
   }
-  public void testIncorrectAnnotationValue_pr148537()    { runTest("incorrect annotation value");}
-  public void testVerifyErrNoTypeCflowField_pr145693_1() {	runTest("verifyErrNoTypeCflowField"); }
-//  public void testVerifyErrInpathNoTypeCflowField_pr145693_2() { runTest("verifyErrInpathNoTypeCflowField"); }
-//  public void testCpathNoTypeCflowField_pr145693_3()     { runTest("cpathNoTypeCflowField"); }
-
+  public void testIncorrectAnnotationValue_pr148537()          { runTest("incorrect annotation value");}
+  public void testVerifyErrNoTypeCflowField_pr145693_1()       { runTest("verifyErrNoTypeCflowField"); }
+  public void testVerifyErrInpathNoTypeCflowField_pr145693_2() { runTest("verifyErrInpathNoTypeCflowField"); }
+  public void testCpathNoTypeCflowField_pr145693_3()           { runTest("cpathNoTypeCflowField"); }
+  public void testVisibilityProblem_pr149071()                 { runTest("visiblity problem");}
+  //public void testAdviceNotWovenAspectPath_pr147841() { runTest("advice not woven on aspectpath");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -33,6 +33,7 @@ public class WeaverMessages {
 	public static final String FIELDS_CANT_HAVE_VOID_TYPE = "fieldCantBeVoid";
 	public static final String NO_NEWARRAY_JOINPOINTS_BY_DEFAULT = "noNewArrayJoinpointsByDefault";
 	public static final String UNSUPPORTED_POINTCUT_PRIMITIVE = "unsupportedPointcutPrimitive";
+	public static final String MISSING_TYPE_PREVENTS_MATCH = "missingTypePreventsMatch";
 
 	public static final String DECP_OBJECT = "decpObject";
 	public static final String CANT_EXTEND_SELF="cantExtendSelf";
@@ -28,6 +28,7 @@ wildcardTypePatternNotAllowed=wildcard type pattern not allowed, must use type n
 fieldCantBeVoid=fields cannot have a void type
 noNewArrayJoinpointsByDefault=There are no join points for array construction unless -Xjoinpoints:arrayconstruction is specified
 unsupportedPointcutPrimitive=Pointcut expression ''{0}'' contains unsupported pointcut primitive ''{1}''
+missingTypePreventsMatch="Unable to determine match at this join point because the type ''{0}'' cannot be found"
 
 # Declare parents messages...
 decpObject=can''t change the parents of java.lang.Object
@@ -671,8 +671,10 @@ public class AjBuildManager implements IOutputClassFileNameProvider,IBinarySourc
 
     /** init only on initial batch compile? no file-specific options */
 	private void initBcelWorld(IMessageHandler handler) throws IOException {
-		List cp = buildConfig.getBootclasspath();
-		cp.addAll(buildConfig.getClasspath());
+		List cp = 
+		buildConfig.getFullClasspath(); // pr145693
+		//buildConfig.getBootclasspath();
+		//cp.addAll(buildConfig.getClasspath());
 		BcelWorld bcelWorld = new BcelWorld(cp, handler, null);
 		bcelWorld.setBehaveInJava5Way(buildConfig.getBehaveInJava5Way());
 		bcelWorld.setAddSerialVerUID(buildConfig.isAddSerialVerUID());
@@ -22,18 +22,19 @@ public class Ajc153Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   // public void testArgnamesAndJavac_pr148381() { runTest("argNames and javac");}
   // public void testCFlowXMLAspectLTW_pr149096() { runTest("cflow xml concrete aspect"); }
   public void testIllegalStateException_pr148737() { runTest("illegalstateexception for non generic type");}
-  public void testAtajInheritance_pr149305_1() { runTest("ataj inheritance - 1");}
-  public void testAtajInheritance_pr149305_2() { runTest("ataj inheritance - 2");}
-  public void testAtajInheritance_pr149305_3() { runTest("ataj inheritance - 3");}
+  public void testAtajInheritance_pr149305_1()     { runTest("ataj inheritance - 1");}
+  public void testAtajInheritance_pr149305_2()     { runTest("ataj inheritance - 2");}
+  public void testAtajInheritance_pr149305_3()     { runTest("ataj inheritance - 3");}
   public void testVerificationFailureForAspectOf_pr148693() {
 	runTest("verification problem");   // build the code
 	Utils.verifyClass(ajc,"mypackage.MyAspect"); // verify it <<< BRAND NEW VERIFY UTILITY FOR EVERYONE TO TRY ;)
   }
-  public void testIncorrectAnnotationValue_pr148537()    { runTest("incorrect annotation value");}
-  public void testVerifyErrNoTypeCflowField_pr145693_1() {	runTest("verifyErrNoTypeCflowField"); }
-//  public void testVerifyErrInpathNoTypeCflowField_pr145693_2() { runTest("verifyErrInpathNoTypeCflowField"); }
-//  public void testCpathNoTypeCflowField_pr145693_3()     { runTest("cpathNoTypeCflowField"); }
-
+  public void testIncorrectAnnotationValue_pr148537()          { runTest("incorrect annotation value");}
+  public void testVerifyErrNoTypeCflowField_pr145693_1()       { runTest("verifyErrNoTypeCflowField"); }
+  public void testVerifyErrInpathNoTypeCflowField_pr145693_2() { runTest("verifyErrInpathNoTypeCflowField"); }
+  public void testCpathNoTypeCflowField_pr145693_3()           { runTest("cpathNoTypeCflowField"); }
+  public void testVisibilityProblem_pr149071()                 { runTest("visiblity problem");}
+  //public void testAdviceNotWovenAspectPath_pr147841() { runTest("advice not woven on aspectpath");}
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -33,6 +33,7 @@ public class WeaverMessages {
 	public static final String FIELDS_CANT_HAVE_VOID_TYPE = "fieldCantBeVoid";
 	public static final String NO_NEWARRAY_JOINPOINTS_BY_DEFAULT = "noNewArrayJoinpointsByDefault";
 	public static final String UNSUPPORTED_POINTCUT_PRIMITIVE = "unsupportedPointcutPrimitive";
+	public static final String MISSING_TYPE_PREVENTS_MATCH = "missingTypePreventsMatch";
 
 	public static final String DECP_OBJECT = "decpObject";
 	public static final String CANT_EXTEND_SELF="cantExtendSelf";
@@ -28,6 +28,7 @@ wildcardTypePatternNotAllowed=wildcard type pattern not allowed, must use type n
 fieldCantBeVoid=fields cannot have a void type
 noNewArrayJoinpointsByDefault=There are no join points for array construction unless -Xjoinpoints:arrayconstruction is specified
 unsupportedPointcutPrimitive=Pointcut expression ''{0}'' contains unsupported pointcut primitive ''{1}''
+missingTypePreventsMatch="Unable to determine match at this join point because the type ''{0}'' cannot be found"
 
 # Declare parents messages...
 decpObject=can''t change the parents of java.lang.Object

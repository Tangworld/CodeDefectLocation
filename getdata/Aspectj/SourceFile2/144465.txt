@@ -221,6 +221,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
         world.setXnoInline(weaverOption.noInline);
         // AMC - autodetect as per line below, needed for AtAjLTWTests.testLTWUnweavable
         world.setBehaveInJava5Way(LangUtil.is15VMOrGreater());
+        world.setAddSerialVerUID(weaverOption.addSerialVersionUID);
 
         /* First load defaults */
 		bcelWorld.getLint().loadDefaultProperties();
@@ -37,6 +37,7 @@ public class Options {
     private final static String OPTION_verbose = "-verbose";
     private final static String OPTION_reweavable = "-Xreweavable";//notReweavable is default for LTW
     private final static String OPTION_noinline = "-Xnoinline";
+    private final static String OPTION_addSerialVersionUID = "-XaddSerialVersionUID";
     private final static String OPTION_hasMember = "-XhasMember";
     private final static String OPTION_pinpoint = "-Xdev:pinpoint";
     private final static String OPTION_showWeaveInfo = "-showWeaveInfo";
@@ -88,6 +89,8 @@ public class Options {
                 weaverOption.lazyTjp = true;
             } else if (arg.equalsIgnoreCase(OPTION_noinline)) {
                 weaverOption.noInline = true;
+            } else if (arg.equalsIgnoreCase(OPTION_addSerialVersionUID)) {
+            	weaverOption.addSerialVersionUID=true;
             } else if (arg.equalsIgnoreCase(OPTION_noWarn) || arg.equalsIgnoreCase(OPTION_noWarnNone)) {
                 weaverOption.noWarn = true;
             } else if (arg.equalsIgnoreCase(OPTION_proceedOnError)) {
@@ -151,6 +154,7 @@ public class Options {
         boolean verbose;
         boolean notReWeavable = true;//default to notReweavable for LTW (faster)
         boolean noInline;
+        boolean addSerialVersionUID;
         boolean showWeaveInfo;
         boolean pinpoint;
         IMessageHandler messageHandler;
@@ -294,6 +294,7 @@ public class AjcTask extends MatchingTask {
         		"reweavable", "reweavable:compress", "notReweavable", "noInline",
             	"terminateAfterCompilation","hasMember",
                 "ajruntimetarget:1.2", "ajruntimetarget:1.5", 
+                "addSerialVersionUID"
 
                 //, "targetNearSource", "OcodeSize",
                  };
@@ -526,6 +527,10 @@ public class AjcTask extends MatchingTask {
     public void setXNotReweavable(boolean notReweavable) {
     	cmd.addFlag("-XnotReweavable",notReweavable);
     }
+
+    public void setXaddSerialVersionUID(boolean addUID) {
+    	cmd.addFlag("-XaddSerialVersionUID",addUID);
+    }
 
     public void setXNoInline(boolean noInline) {
     	cmd.addFlag("-XnoInline",noInline);
@@ -0,0 +1,5 @@
+aspect AnAspect {
+	before(): staticinitialization(BigHorribleClass) {
+		
+	}
+}
\ No newline at end of file
@@ -0,0 +1,28 @@
+import java.io.Serializable;
+import java.lang.reflect.Field;
+
+public class BigHorribleClass implements Serializable,Comparable {
+  public static void main(String[] args) {
+	  try {
+		  BigHorribleClass b = (BigHorribleClass)BigHorribleClass.class.newInstance();
+	      Field f = BigHorribleClass.class.getDeclaredField("serialVersionUID");
+	      long l = f.getLong(b);
+	      System.err.println("SerialVersionUID is "+l);
+	  } catch (Exception e) {
+	      System.err.println("Problem: "+e.toString());
+	  }
+  }
+  
+  public int anInt;
+  
+  public static boolean aBoolean = false;
+  
+  public long foo = 376;
+  
+  public void m() {}
+  public int compareTo(Object o) { return 0;}
+  public String m2(boolean b,long l, String s) { return "";}
+  
+  public static transient short fo2 = 3;
+  
+}
\ No newline at end of file
@@ -0,0 +1,8 @@
+<aspectj>
+        <aspects>
+                <aspect name="AnAspect"/>
+        </aspects>
+
+        <weaver options="-showWeaveInfo -XaddSerialVersionUID">
+        </weaver>
+</aspectj>
@@ -24,6 +24,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testLTWAndGeneratingSUID_pr144465() { runTest("ltw with serialversionUID creation"); }
   public void testAspects14PerSingleton_pr122253() { runTest("aspects14 - persingleton");}
   public void testAspects14PerCflow_pr122253() { runTest("aspects14 - percflow");}
   public void testAspects14PerThis_pr122253() { runTest("aspects14 - perthis");}
@@ -339,6 +339,17 @@
       </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
+      <compile files="BigHorribleClass.java"/>
+      <compile files="AnAspect.java"/>
+      <run class="BigHorribleClass" ltw="aop1.xml">
+        <stderr>
+          <line text="weaveinfo Join point 'staticinitialization(void BigHorribleClass.&lt;clinit&gt;())'"/>
+          <line text="SerialVersionUID is "/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/pr125480" title="aop.xml aspect inheriting abstract method ">
         <compile files="HelloWorld.java"/>
         <compile files="AbstractMethods.aj, ConcreteMethods.aj" options="-1.5"/>
@@ -221,6 +221,7 @@ public class ClassLoaderWeavingAdaptor extends WeavingAdaptor {
         world.setXnoInline(weaverOption.noInline);
         // AMC - autodetect as per line below, needed for AtAjLTWTests.testLTWUnweavable
         world.setBehaveInJava5Way(LangUtil.is15VMOrGreater());
+        world.setAddSerialVerUID(weaverOption.addSerialVersionUID);
 
         /* First load defaults */
 		bcelWorld.getLint().loadDefaultProperties();
@@ -37,6 +37,7 @@ public class Options {
     private final static String OPTION_verbose = "-verbose";
     private final static String OPTION_reweavable = "-Xreweavable";//notReweavable is default for LTW
     private final static String OPTION_noinline = "-Xnoinline";
+    private final static String OPTION_addSerialVersionUID = "-XaddSerialVersionUID";
     private final static String OPTION_hasMember = "-XhasMember";
     private final static String OPTION_pinpoint = "-Xdev:pinpoint";
     private final static String OPTION_showWeaveInfo = "-showWeaveInfo";
@@ -88,6 +89,8 @@ public class Options {
                 weaverOption.lazyTjp = true;
             } else if (arg.equalsIgnoreCase(OPTION_noinline)) {
                 weaverOption.noInline = true;
+            } else if (arg.equalsIgnoreCase(OPTION_addSerialVersionUID)) {
+            	weaverOption.addSerialVersionUID=true;
             } else if (arg.equalsIgnoreCase(OPTION_noWarn) || arg.equalsIgnoreCase(OPTION_noWarnNone)) {
                 weaverOption.noWarn = true;
             } else if (arg.equalsIgnoreCase(OPTION_proceedOnError)) {
@@ -151,6 +154,7 @@ public class Options {
         boolean verbose;
         boolean notReWeavable = true;//default to notReweavable for LTW (faster)
         boolean noInline;
+        boolean addSerialVersionUID;
         boolean showWeaveInfo;
         boolean pinpoint;
         IMessageHandler messageHandler;
@@ -294,6 +294,7 @@ public class AjcTask extends MatchingTask {
         		"reweavable", "reweavable:compress", "notReweavable", "noInline",
             	"terminateAfterCompilation","hasMember",
                 "ajruntimetarget:1.2", "ajruntimetarget:1.5", 
+                "addSerialVersionUID"
 
                 //, "targetNearSource", "OcodeSize",
                  };
@@ -526,6 +527,10 @@ public class AjcTask extends MatchingTask {
     public void setXNotReweavable(boolean notReweavable) {
     	cmd.addFlag("-XnotReweavable",notReweavable);
     }
+
+    public void setXaddSerialVersionUID(boolean addUID) {
+    	cmd.addFlag("-XaddSerialVersionUID",addUID);
+    }
 
     public void setXNoInline(boolean noInline) {
     	cmd.addFlag("-XnoInline",noInline);
@@ -0,0 +1,5 @@
+aspect AnAspect {
+	before(): staticinitialization(BigHorribleClass) {
+		
+	}
+}
\ No newline at end of file
@@ -0,0 +1,28 @@
+import java.io.Serializable;
+import java.lang.reflect.Field;
+
+public class BigHorribleClass implements Serializable,Comparable {
+  public static void main(String[] args) {
+	  try {
+		  BigHorribleClass b = (BigHorribleClass)BigHorribleClass.class.newInstance();
+	      Field f = BigHorribleClass.class.getDeclaredField("serialVersionUID");
+	      long l = f.getLong(b);
+	      System.err.println("SerialVersionUID is "+l);
+	  } catch (Exception e) {
+	      System.err.println("Problem: "+e.toString());
+	  }
+  }
+  
+  public int anInt;
+  
+  public static boolean aBoolean = false;
+  
+  public long foo = 376;
+  
+  public void m() {}
+  public int compareTo(Object o) { return 0;}
+  public String m2(boolean b,long l, String s) { return "";}
+  
+  public static transient short fo2 = 3;
+  
+}
\ No newline at end of file
@@ -0,0 +1,8 @@
+<aspectj>
+        <aspects>
+                <aspect name="AnAspect"/>
+        </aspects>
+
+        <weaver options="-showWeaveInfo -XaddSerialVersionUID">
+        </weaver>
+</aspectj>
@@ -24,6 +24,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testLTWAndGeneratingSUID_pr144465() { runTest("ltw with serialversionUID creation"); }
   public void testAspects14PerSingleton_pr122253() { runTest("aspects14 - persingleton");}
   public void testAspects14PerCflow_pr122253() { runTest("aspects14 - percflow");}
   public void testAspects14PerThis_pr122253() { runTest("aspects14 - perthis");}
@@ -339,6 +339,17 @@
       </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
+      <compile files="BigHorribleClass.java"/>
+      <compile files="AnAspect.java"/>
+      <run class="BigHorribleClass" ltw="aop1.xml">
+        <stderr>
+          <line text="weaveinfo Join point 'staticinitialization(void BigHorribleClass.&lt;clinit&gt;())'"/>
+          <line text="SerialVersionUID is "/>
+        </stderr>
+      </run>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/pr125480" title="aop.xml aspect inheriting abstract method ">
         <compile files="HelloWorld.java"/>
         <compile files="AbstractMethods.aj, ConcreteMethods.aj" options="-1.5"/>

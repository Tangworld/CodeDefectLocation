@@ -51,6 +51,8 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   public void testGeneratingCodeForAnOldRuntime_pr116679_1() { runTest("generating code for a 1.2.1 runtime - 1");}
   public void testGeneratingCodeForAnOldRuntime_pr116679_2() { runTest("generating code for a 1.2.1 runtime - 2");}
 
+  public void testAmbiguousMethod_pr118599_1() { runTest("ambiguous method when binary weaving - 1");}
+  public void testAmbiguousMethod_pr118599_2() { runTest("ambiguous method when binary weaving - 2");}
   public void testAtDeclareParents_pr117681() { runTest("at declare parents");}
   public void testPrivilegeProblem_pr87525() { runTest("privilege problem with switch");}
   public void testGenericAspects_pr115237() { runTest("aspectOf and generic aspects");}
@@ -81,6 +83,8 @@ public class Ajc150Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
   public void testVarargsITD_pr110906() { runTest("ITD varargs problem");}
   public void testBadRenderer_pr86903() { runTest("bcelrenderer bad");}
+//  public void testIllegalInitialization_pr118326_1() { runTest("illegal initialization - 1");}
+//  public void testIllegalInitialization_pr118326_2() { runTest("illegal initialization - 2");}
   public void testLintForAdviceSorting_pr111667() { runTest("lint for advice sorting");}
 
   public void testIncompatibleClassChangeError_pr113630_1() {runTest("IncompatibleClassChangeError - errorscenario");}
@@ -63,8 +63,19 @@
     <ajc-test dir="bugs150" pr="114054" title="pertarget and negated pointcut">
      <compile files="Pr114054.aj" options=""/>
      <run class="Pr114054"/>
+    </ajc-test>  
+    
+    <ajc-test dir="bugs150/pr118599" pr="118599" title="ambiguous method when binary weaving - 1">
+     <!-- separate compilation was failing  -->
+     <compile files="Attributable.java" outjar="foo.jar" options="-1.5"/>
+     <compile files="AnAttributedClass.java" aspectpath="foo.jar" options="-1.5"/>
     </ajc-test>
 
+    <ajc-test dir="bugs150/pr118599" pr="118599" title="ambiguous method when binary weaving - 2">
+     <!-- complete compilation works -->
+     <compile files="Attributable.java,AnAttributedClass.java" options="-1.5"/>
+    </ajc-test>
+
     <ajc-test dir="bugs150" pr="104220" title="adviceexecution join point toString forms">
       <compile files="Pr104220.aj"/>
       <run class="Pr104220">
@@ -85,13 +96,28 @@
      <compile files="Test.java,TestAspect.java,Audit.java,AuditImpl.java" options="-1.5"/>
      <run class="Test"/>
     </ajc-test>
-    
+        
     <ajc-test dir="bugs150/pr111667" pr="111667" title="lint for advice sorting">
      <compile files="A.java,X.java,Y.java" options="-1.5 -Xlint:warning">
        <message kind="warning" line="9" text="at this shadow method-execution(void A.m1()) no precedence is specified between advice applying from aspect X and aspect Y [Xlint:unorderedAdviceAtShadow]"/>
      </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs150/pr118326" pr="118326" title="illegal initialization - 1">
+     <compile files="Foo.java,Bar.java">
+       <message kind="error" line="2" text="Type mismatch: cannot convert from null to int"/>
+       <message kind="error" line="6" text="Type mismatch: cannot convert from Integer to int"/>
+       <message kind="error" line="8" text="Type mismatch: cannot convert from String to int"/>
+     </compile>
+    </ajc-test>
+    
+    <ajc-test dir="bugs150/pr118326" pr="118326" title="illegal initialization - 2">
+     <compile files="Foo.java,Bar.java" options="-1.5">
+       <message kind="error" line="2" text="Type mismatch: cannot convert from null to int"/>
+       <message kind="error" line="8" text="Type mismatch: cannot convert from String to int"/>
+     </compile>
+    </ajc-test>
+        
     <ajc-test dir="bugs150/pr117296" pr="117296" title="self bounding generic types">
      <compile files="PropertySupport.java" options="-1.5"/>
      <run class="PropertySupport"/>
@@ -118,7 +144,7 @@
 		<compile files="Simple.java" options="-Xajruntimetarget:1.2"/>
 		<run class="Simple" classpath="../lib/aspectj/lib/aspectjrt121.jar"/>
 	</ajc-test>
-
+	
 	<ajc-test dir="compatibility/case2" title="generating code for a 1.2.1 runtime - 2">
 		<compile files="TrackingErrors.aj,A.java" options="-Xajruntimetarget:1.2"/>
 		<run class="A" classpath="../lib/aspectj/lib/aspectjrt121.jar"/>
@@ -128,7 +154,8 @@
 		<compile files="AdviceWithArgs.aj" options="-1.5"></compile>
 		<run class="AdviceWithArgs"/>
 	</ajc-test>
-
+	
+	
 	<ajc-test dir="java5/reflection" pr="114322" title="reflection on abstract ITDs (Billing example)">
 		<compile files="ReflectBilling.java,Billing.aj" options="-1.5"/>
 		<run class="ReflectBilling">
@@ -42,7 +42,7 @@ public class InterTypeMemberFinder implements IMemberFinder {
 	private List interTypeMethods = new ArrayList();
 
 	public SourceTypeBinding sourceTypeBinding;
-
+	
 	public FieldBinding getField(SourceTypeBinding sourceTypeBinding,char[] fieldName,InvocationSite site,Scope scope) {
 		FieldBinding retField = sourceTypeBinding.getFieldBase(fieldName, true);  // XXX may need to get the correct value for second parameter in the future (see #55341)
 		if (interTypeFields.isEmpty()) return retField;
@@ -435,6 +435,7 @@ public class InterTypeMemberFinder implements IMemberFinder {
 			MethodBinding[] baseMethods = sourceTypeBinding.methods;
 			for (int i=0, len=baseMethods.length; i < len; i++) {
 				MethodBinding b = baseMethods[i];
+				sourceTypeBinding.resolveTypesFor(b); // this will return fast if its already been done.
 				if (matches(binding, b)) {
 					// this always means we should remove the existing method
 					if (b.sourceMethod() != null) {
@@ -0,0 +1,6 @@
+public class AnAttributedClass implements Attributable {
+
+  public void doSomething() {
+    this.setAttribute("foo", "bar");
+  }
+}
@@ -0,0 +1,20 @@
+import java.util.*;
+public interface Attributable {
+
+  void setAttribute(String name, Object attribute);
+  Object getAttribute(String name);
+
+  static aspect DefImpl {
+
+    private Map<String,Object> Attributable.attributes =
+      new HashMap<String,Object>();
+
+    public void Attributable.setAttribute(String name, Object attribute) {
+      this.attributes.put(name, attribute);
+    }
+
+    public Object Attributable.getAttribute(String name) {
+      return this.attributes.get(name);
+    }
+  }
+}

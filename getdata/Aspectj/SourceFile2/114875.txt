@@ -240,10 +240,12 @@ public class ValidateAtAspectJAnnotationsVisitor extends ASTVisitor {
 			TypeBinding parentBinding = parentRef.resolvedType;
 			if (parentBinding instanceof SourceTypeBinding) {
 				SourceTypeBinding parentSTB = (SourceTypeBinding) parentBinding;
-				TypeDeclaration parentDecl = parentSTB.scope.referenceContext;
-				if (isAspect(parentDecl) && !Modifier.isAbstract(parentDecl.modifiers)) {
-					typeDecl.scope.problemReporter().signalError(typeDecl.sourceStart,typeDecl.sourceEnd,"cannot extend a concrete aspect");
-				}			
+				if (parentSTB.scope!=null) { // scope is null if its a binarytypebinding (in AJ world, thats a subclass of SourceTypeBinding)
+					TypeDeclaration parentDecl = parentSTB.scope.referenceContext; 
+					if (isAspect(parentDecl) && !Modifier.isAbstract(parentDecl.modifiers)) {
+						typeDecl.scope.problemReporter().signalError(typeDecl.sourceStart,typeDecl.sourceEnd,"cannot extend a concrete aspect");
+					}			
+				}
 			}
 		}
 
@@ -0,0 +1,16 @@
+package com.aspectj.test;
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+public abstract class Base {
+
+    @Pointcut //
+    abstract void method();
+
+
+    public static void main(String args[]){
+    }
+}
@@ -0,0 +1,17 @@
+package com.aspectj.test;
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+public class Sub extends Base{
+
+    @Pointcut( "execution(* com.aspectj.test.Base.main(..))" )
+    void method(){};
+
+    @Before("method()")
+    public void test(){
+
+    }
+}
@@ -0,0 +1,16 @@
+package com.aspectj.test;
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.Pointcut;
+
+@Aspect
+public abstract class Base {
+
+    @Pointcut //
+    abstract void method();
+
+
+    public static void main(String args[]){
+    }
+}
@@ -289,6 +289,17 @@ public class MultiProjectIncrementalTests extends AjdeInteractionTestbed {
 		build("PR92837");
 	}
 
+	public void testPr114875() {
+		initialiseProject("pr114875");
+		build("pr114875");
+		alter("pr114875","inc1");
+		build("pr114875");
+		checkWasntFullBuild();
+		alter("pr114875","inc2");
+		build("pr114875");
+		checkWasntFullBuild();
+	}
+	
 /*	public void testPr111779() {
 		super.VERBOSE=true;
 		initialiseProject("PR111779");
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2005 Contributors.
+ * All rights reserved. 
+ * This program and the accompanying materials are made available 
+ * under the terms of the Eclipse Public License v1.0 
+ * which accompanies this distribution and is available at 
+ * http://eclipse.org/legal/epl-v10.html 
+ * 
+ * Contributors:
+ *   Alexandre Vasseur         initial implementation
+ *******************************************************************************/
+package ataspectj.bugs;
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Pointcut;
+import org.aspectj.lang.annotation.Before;
+
+/**
+ * @author <a href="mailto:alex AT gnilux DOT com">Alexandre Vasseur</a>
+ */
+@Aspect
+public class AbstractAspectNPEChild extends AbstractAspectNPEParent {
+
+    @Pointcut("execution(* ataspectj.bugs.AbstractAspectNPEParent.main(..))")
+    void method(){};
+
+    @Before("method()")
+    public void test(){
+
+    }
+}
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2005 Contributors.
+ * All rights reserved. 
+ * This program and the accompanying materials are made available 
+ * under the terms of the Eclipse Public License v1.0 
+ * which accompanies this distribution and is available at 
+ * http://eclipse.org/legal/epl-v10.html 
+ * 
+ * Contributors:
+ *   Alexandre Vasseur         initial implementation
+ *******************************************************************************/
+package ataspectj.bugs;
+
+import org.aspectj.lang.annotation.Pointcut;
+import org.aspectj.lang.annotation.Aspect;
+
+/**
+ * @author <a href="mailto:alex AT gnilux DOT com">Alexandre Vasseur</a>
+ */
+@Aspect
+public abstract class AbstractAspectNPEParent {
+
+    @Pointcut
+    abstract void method();//NPE at AJC time
+
+    public static void main(String args[]){
+    }
+}
@@ -128,4 +128,9 @@ public class AtAjSyntaxTests extends XMLBasedAjcTestCase {
     public void testDeclareParentsImplements() {
         runTest("DeclareParentsImplements");
     }
-}
\ No newline at end of file
+
+    public void testAbstractAspectNPE() {
+        runTest("AbstractAspectNPE");
+    }
+
+}
@@ -166,4 +166,11 @@
         <run class="ataspectj.DeclareParentsImplementsTest"/>
     </ajc-test>
 
+    <ajc-test dir="java5/ataspectj" title="AbstractAspectNPE">
+        <compile files="ataspectj/bugs/AbstractAspectNPEParent.java,ataspectj/bugs/AbstractAspectNPEChild.java"
+            options="-1.5 -showWeaveInfo">
+            <message kind="weave" text="Join point 'method-execution(void ataspectj.bugs.AbstractAspectNPEParent.main"/>            
+        </compile>
+    </ajc-test>
+
 </suite>
\ No newline at end of file

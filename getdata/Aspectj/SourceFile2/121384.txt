@@ -17,7 +17,6 @@ import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
-import java.lang.reflect.Modifier;
 
 import org.aspectj.apache.bcel.Constants;
 import org.aspectj.apache.bcel.classfile.Attribute;
@@ -29,10 +28,10 @@ import org.aspectj.apache.bcel.classfile.LocalVariable;
 import org.aspectj.apache.bcel.classfile.LocalVariableTable;
 import org.aspectj.apache.bcel.classfile.Method;
 import org.aspectj.apache.bcel.classfile.annotation.Annotation;
+import org.aspectj.apache.bcel.classfile.annotation.ClassElementValue;
 import org.aspectj.apache.bcel.classfile.annotation.ElementNameValuePair;
 import org.aspectj.apache.bcel.classfile.annotation.RuntimeAnnotations;
 import org.aspectj.apache.bcel.classfile.annotation.RuntimeVisibleAnnotations;
-import org.aspectj.apache.bcel.classfile.annotation.ClassElementValue;
 import org.aspectj.apache.bcel.generic.Type;
 import org.aspectj.bridge.IMessage;
 import org.aspectj.bridge.IMessageHandler;
@@ -52,9 +51,6 @@ import org.aspectj.weaver.ResolvedPointcutDefinition;
 import org.aspectj.weaver.ResolvedType;
 import org.aspectj.weaver.UnresolvedType;
 import org.aspectj.weaver.WeaverMessages;
-import org.aspectj.weaver.NewFieldTypeMunger;
-import org.aspectj.weaver.ResolvedMemberImpl;
-import org.aspectj.weaver.Member;
 import org.aspectj.weaver.patterns.AndPointcut;
 import org.aspectj.weaver.patterns.DeclareErrorOrWarning;
 import org.aspectj.weaver.patterns.DeclareParents;
@@ -671,16 +667,18 @@ public class AtAjAttributes {
                 if (fieldType.isInterface()) {
                     TypePattern parent = new ExactTypePattern(UnresolvedType.forSignature(struct.field.getSignature()), false, false);
                     parent.resolve(struct.enclosingType.getWorld());
-                    //TODO kick ISourceLocation sl = struct.bField.getSourceLocation();    ??
                     // first add the declare implements like
                     List parents = new ArrayList(1); parents.add(parent);
+                    DeclareParents dp = new DeclareParents(
+                            typePattern,
+                            parents,
+                            false
+                        );
+                    //TODO kick ISourceLocation sl = struct.bField.getSourceLocation();    ??
+                    dp.setLocation(struct.context,0,0); // not ideal...
                     struct.ajAttributes.add(
                             new AjAttribute.DeclareAttribute(
-                                    new DeclareParents(
-                                        typePattern,
-                                        parents,
-                                        false
-                                    )
+                                    dp
                             )
                     );
 
@@ -364,6 +364,19 @@ public class MultiProjectIncrementalTests extends AjdeInteractionTestbed {
 		build("PR115251");
 		checkWasntFullBuild();
 	}
+	
+	public void testPr121384() {
+//		AjdeInteractionTestbed.VERBOSE=true;
+//		AsmManager.setReporting("c:/foo.txt",true,true,true,false);
+		MyBuildOptionsAdapter.setNonStandardOptions("-showWeaveInfo");
+		configureBuildStructureModel(true);
+		initialiseProject("pr121384");
+		build("pr121384"); 
+		checkWasFullBuild();
+		alter("pr121384","inc1");
+		build("pr121384");
+		checkWasntFullBuild();
+	}
 
 
 /*	public void testPr111779() {
@@ -0,0 +1,22 @@
+package moodytest;
+
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.DeclareParents;
+
+@Aspect
+public class AnnotationMoodIndicator {
+  public interface Moody {
+     Mood getMood();
+     void setMood(Mood mood);
+  }
+
+  public static class MoodyImpl implements Moody {
+     Mood mood = Mood.HAPPY;
+
+     public Mood getMood() { return mood; }
+     public void setMood(Mood mood) { this.mood = mood; }
+  }
+
+  @DeclareParents(value="moodytest.AnnotationMoodyImplementor",defaultImpl=MoodyImpl.class)
+  private Moody introduced;
+}
@@ -0,0 +1,5 @@
+package moodytest;
+
+public class AnnotationMoodyImplementor {
+
+}
@@ -0,0 +1,5 @@
+package moodytest;
+
+public enum Mood {
+	HAPPY, SAD, CONFUSED
+}
@@ -0,0 +1,29 @@
+package moodytest;
+
+import moodytest.AnnotationMoodyImplementor;
+import moodytest.Mood;
+import junit.framework.TestCase;
+
+public class AnnotationMoodTester extends TestCase {
+	   AnnotationMoodyImplementor ami0 = null;
+	   AnnotationMoodyImplementor ami1 = null;
+
+	   public AnnotationMoodTester(String name) { super(name); }
+
+	   protected void setUp() throws Exception {
+	      ami0 = new AnnotationMoodyImplementor();
+	      ami1 = new AnnotationMoodyImplementor();
+	   }
+
+	   public void testHappyDefault() {
+	      assertEquals("ami0 should be happy!", Mood.HAPPY, ami0.getMood());
+	   }
+
+	   public void testOneConfused() {
+	      ami0.setMood(Mood.CONFUSED);
+	      assertEquals("ami0 should now be confused", Mood.CONFUSED,
+	 ami0.getMood());
+	      assertEquals("ami1 should still be happy", Mood.HAPPY,
+	 ami1.getMood());
+	   }
+}

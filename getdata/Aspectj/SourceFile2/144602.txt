@@ -112,7 +112,8 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
             generatePerObjectAspectOfMethod(gen);
             generatePerObjectHasAspectMethod(gen);
             generatePerObjectBindMethod(gen);
-            generatePerObjectGetSetMethods(gen);
+            // these will be added by the PerObjectInterface munger that affects the type - pr144602
+//            generatePerObjectGetSetMethods(gen); 
         } else if (kind == PerClause.PERCFLOW) {
             generatePerCflowAspectOfMethod(gen);
             generatePerCflowHasAspectMethod(gen);
@@ -173,19 +174,20 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
         if (kind == PerClause.SINGLETON) {
             ResolvedMember perSingletonFieldInfo = AjcMemberMaker.perSingletonField(aspectType);
             classGen.addField(makeFieldGen(classGen, perSingletonFieldInfo).getField(), null);
-        } else if (kind == PerClause.PEROBJECT) {
-            ResolvedMember perObjectFieldInfo = AjcMemberMaker.perObjectField(aspectType, aspectType);
-            classGen.addField(makeFieldGen(classGen, perObjectFieldInfo).getField(), null);
-            // if lazy generation of the inner interface MayHaveAspect works on LTW (see previous note)
-            // it should be done here.
+// pr144602 - don't need to do this, PerObjectInterface munger will do it
+//        } else if (kind == PerClause.PEROBJECT) {
+//           ResolvedMember perObjectFieldInfo = AjcMemberMaker.perObjectField(aspectType, aspectType);
+//            classGen.addField(makeFieldGen(classGen, perObjectFieldInfo).getField(), null);
+//            // if lazy generation of the inner interface MayHaveAspect works on LTW (see previous note)
+//            // it should be done here.
         } else if (kind == PerClause.PERCFLOW) {
             ResolvedMember perCflowFieldInfo = AjcMemberMaker.perCflowField(aspectType);
             classGen.addField(makeFieldGen(classGen, perCflowFieldInfo).getField(), null);
         } else if (kind == PerClause.PERTYPEWITHIN) {
             ResolvedMember perTypeWithinForField = AjcMemberMaker.perTypeWithinWithinTypeField(aspectType, aspectType);
             classGen.addField(makeFieldGen(classGen, perTypeWithinForField).getField(), null);
-        } else {
-            throw new Error("Should not happen - no such kind " + kind.toString());
+//        } else {
+//            throw new Error("Should not happen - no such kind " + kind.toString());
         }
     }
 
@@ -577,4 +579,7 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
         );
     }
 
+//    public boolean isLateTypeMunger() {
+  //  	return true;
+    //}
 }
@@ -0,0 +1,26 @@
+import org.aspectj.lang.annotation.*;
+
+@Aspect("perthis(call( * SomeClass.someMethod(..)))")
+public class MyAspect {
+
+    @Pointcut("call( * SomeClass.someMethod(..)) && args(j,k, *)")
+    public void pointcut( int j, int k) {}
+
+    @Before("pointcut( j,k)")
+    public void advice( int j, int k ) {  }
+
+  public static void main(String []argv) { new SomeClass().foo();}
+} 
+
+class SomeClass {
+ public void someMethod(int a,int b,int c) {
+ }
+
+  public void foo() {
+    someMethod(1,2,3);
+    someMethod(2,3,4);
+    someMethod(3,4,5);
+  }
+
+}
+
@@ -24,6 +24,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testAtAJVerificationError_pr144602() { runTest("atAJ perthis aspect verification error");}
   public void testLTWAndGeneratingSUID_pr144465() { runTest("ltw with serialversionUID creation"); }
   public void testAspects14PerSingleton_pr122253() { runTest("aspects14 - persingleton");}
   public void testAspects14PerCflow_pr122253() { runTest("aspects14 - percflow");}
@@ -94,6 +94,12 @@
      <run class="TopLevelType"/>
     </ajc-test>
 
+    
+    <ajc-test dir="bugs152/pr144602" title="atAJ perthis aspect verification error">
+     <compile files="MyAspect.aj" options="-1.5"/>
+     <run class="MyAspect"/>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/pr132349" title="ITD on inner type of generic type - 2">
      <compile files="TopLevelType2.java" options="-1.5">
        <message kind="error" line="12"/> <!-- error message is currently crap - its a parser message -->
@@ -339,7 +345,7 @@
       </compile>
     </ajc-test>
 
-    <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
+   <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
       <compile files="BigHorribleClass.java"/>
       <compile files="AnAspect.java"/>
       <run class="BigHorribleClass" ltw="aop1.xml">
@@ -112,7 +112,8 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
             generatePerObjectAspectOfMethod(gen);
             generatePerObjectHasAspectMethod(gen);
             generatePerObjectBindMethod(gen);
-            generatePerObjectGetSetMethods(gen);
+            // these will be added by the PerObjectInterface munger that affects the type - pr144602
+//            generatePerObjectGetSetMethods(gen); 
         } else if (kind == PerClause.PERCFLOW) {
             generatePerCflowAspectOfMethod(gen);
             generatePerCflowHasAspectMethod(gen);
@@ -173,19 +174,20 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
         if (kind == PerClause.SINGLETON) {
             ResolvedMember perSingletonFieldInfo = AjcMemberMaker.perSingletonField(aspectType);
             classGen.addField(makeFieldGen(classGen, perSingletonFieldInfo).getField(), null);
-        } else if (kind == PerClause.PEROBJECT) {
-            ResolvedMember perObjectFieldInfo = AjcMemberMaker.perObjectField(aspectType, aspectType);
-            classGen.addField(makeFieldGen(classGen, perObjectFieldInfo).getField(), null);
-            // if lazy generation of the inner interface MayHaveAspect works on LTW (see previous note)
-            // it should be done here.
+// pr144602 - don't need to do this, PerObjectInterface munger will do it
+//        } else if (kind == PerClause.PEROBJECT) {
+//           ResolvedMember perObjectFieldInfo = AjcMemberMaker.perObjectField(aspectType, aspectType);
+//            classGen.addField(makeFieldGen(classGen, perObjectFieldInfo).getField(), null);
+//            // if lazy generation of the inner interface MayHaveAspect works on LTW (see previous note)
+//            // it should be done here.
         } else if (kind == PerClause.PERCFLOW) {
             ResolvedMember perCflowFieldInfo = AjcMemberMaker.perCflowField(aspectType);
             classGen.addField(makeFieldGen(classGen, perCflowFieldInfo).getField(), null);
         } else if (kind == PerClause.PERTYPEWITHIN) {
             ResolvedMember perTypeWithinForField = AjcMemberMaker.perTypeWithinWithinTypeField(aspectType, aspectType);
             classGen.addField(makeFieldGen(classGen, perTypeWithinForField).getField(), null);
-        } else {
-            throw new Error("Should not happen - no such kind " + kind.toString());
+//        } else {
+//            throw new Error("Should not happen - no such kind " + kind.toString());
         }
     }
 
@@ -577,4 +579,7 @@ public class BcelPerClauseAspectAdder extends BcelTypeMunger {
         );
     }
 
+//    public boolean isLateTypeMunger() {
+  //  	return true;
+    //}
 }
@@ -0,0 +1,26 @@
+import org.aspectj.lang.annotation.*;
+
+@Aspect("perthis(call( * SomeClass.someMethod(..)))")
+public class MyAspect {
+
+    @Pointcut("call( * SomeClass.someMethod(..)) && args(j,k, *)")
+    public void pointcut( int j, int k) {}
+
+    @Before("pointcut( j,k)")
+    public void advice( int j, int k ) {  }
+
+  public static void main(String []argv) { new SomeClass().foo();}
+} 
+
+class SomeClass {
+ public void someMethod(int a,int b,int c) {
+ }
+
+  public void foo() {
+    someMethod(1,2,3);
+    someMethod(2,3,4);
+    someMethod(3,4,5);
+  }
+
+}
+
@@ -24,6 +24,7 @@ import org.aspectj.testing.XMLBasedAjcTestCase;
 
 public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
+  public void testAtAJVerificationError_pr144602() { runTest("atAJ perthis aspect verification error");}
   public void testLTWAndGeneratingSUID_pr144465() { runTest("ltw with serialversionUID creation"); }
   public void testAspects14PerSingleton_pr122253() { runTest("aspects14 - persingleton");}
   public void testAspects14PerCflow_pr122253() { runTest("aspects14 - percflow");}
@@ -94,6 +94,12 @@
      <run class="TopLevelType"/>
     </ajc-test>
 
+    
+    <ajc-test dir="bugs152/pr144602" title="atAJ perthis aspect verification error">
+     <compile files="MyAspect.aj" options="-1.5"/>
+     <run class="MyAspect"/>
+    </ajc-test>
+    
     <ajc-test dir="bugs152/pr132349" title="ITD on inner type of generic type - 2">
      <compile files="TopLevelType2.java" options="-1.5">
        <message kind="error" line="12"/> <!-- error message is currently crap - its a parser message -->
@@ -339,7 +345,7 @@
       </compile>
     </ajc-test>
 
-    <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
+   <ajc-test dir="bugs152/pr144465" title="ltw with serialversionUID creation">
       <compile files="BigHorribleClass.java"/>
       <compile files="AnAspect.java"/>
       <run class="BigHorribleClass" ltw="aop1.xml">

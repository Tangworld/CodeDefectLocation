@@ -199,9 +199,11 @@ public class BcelTypeMunger extends ConcreteTypeMunger {
           if (!superMethod.getName().equals("<init>")) {
 		    LazyMethodGen   subMethod = findMatchingMethod(newParentTarget, superMethod);
             if (subMethod!=null && !subMethod.isBridgeMethod()) { // FIXME asc is this safe for all bridge methods?
-              cont = enforceDecpRule3_visibilityChanges(weaver, newParent, superMethod, subMethod) && cont;
-              cont = enforceDecpRule4_compatibleReturnTypes(weaver, superMethod, subMethod)        && cont;
-              cont = enforceDecpRule5_cantChangeFromStaticToNonstatic(weaver,munger.getSourceLocation(),superMethod,subMethod) && cont;
+              if (!(subMethod.isSynthetic() && superMethod.isSynthetic())) {
+	              cont = enforceDecpRule3_visibilityChanges(weaver, newParent, superMethod, subMethod) && cont;
+	              cont = enforceDecpRule4_compatibleReturnTypes(weaver, superMethod, subMethod)        && cont;
+	              cont = enforceDecpRule5_cantChangeFromStaticToNonstatic(weaver,munger.getSourceLocation(),superMethod,subMethod) && cont;
+              }
             }                
           }
         }
@@ -333,7 +333,8 @@ public class ResolvedMemberImpl extends MemberImpl implements IHasPosition, Anno
     }
 
 	public boolean isSynthetic() {
-		return false;
+		// See Bcelmethod.isSynthetic() which takes account of preJava5 Synthetic modifier
+		return (modifiers & 4096)!=0; // do we know better? 
 	}
 
     public void write(DataOutputStream s) throws IOException {
@@ -22,6 +22,7 @@ import java.util.List;
 import org.aspectj.apache.bcel.classfile.Attribute;
 import org.aspectj.apache.bcel.classfile.ExceptionTable;
 import org.aspectj.apache.bcel.classfile.GenericSignatureParser;
+import org.aspectj.apache.bcel.classfile.JavaClass;
 import org.aspectj.apache.bcel.classfile.LocalVariable;
 import org.aspectj.apache.bcel.classfile.LocalVariableTable;
 import org.aspectj.apache.bcel.classfile.Method;
@@ -47,6 +48,8 @@ final class BcelMethod extends ResolvedMemberImpl {
 
 	private Method method;
 	private boolean isAjSynthetic;
+	private boolean isSynthetic;
+	private boolean knowIfSynthetic = false;
 	private ShadowMunger associatedShadowMunger;
 	private ResolvedPointcutDefinition preResolvedPointcut;  // used when ajc has pre-resolved the pointcut of some @Advice
 
@@ -395,4 +398,30 @@ final class BcelMethod extends ResolvedMemberImpl {
 			 method = null;
 		 }
 	 }
+
+	public boolean isSynthetic() {
+		if (!knowIfSynthetic) workOutIfSynthetic();
+		return isSynthetic;
+	}
+
+	// Pre Java5 synthetic is an attribute 'Synthetic', post Java5 it is a modifier (4096 or 0x1000)
+	private void workOutIfSynthetic() {
+		knowIfSynthetic=true;
+		JavaClass jc = bcelObjectType.getJavaClass();
+		isSynthetic=false;
+		if (jc==null) return; // what the hell has gone wrong?
+		if (jc.getMajor()<49/*Java5*/) {
+			// synthetic is an attribute
+			String[] synthetics =  getAttributeNames(false);
+			if (synthetics!=null) {
+				for (int i = 0; i < synthetics.length; i++) {
+					if (synthetics[i].equals("Synthetic")) {isSynthetic=true;break;}
+				}
+			}
+		} else {
+			// synthetic is a modifier (4096)
+			isSynthetic = (modifiers&4096)!=0;
+		}
+	}
+
 }
@@ -1464,6 +1464,12 @@ public final class LazyMethodGen {
     	return memberView.isAjSynthetic();
     }
 
+
+    boolean isSynthetic() {
+    	if (memberView == null) return false;
+    	return memberView.isSynthetic();
+    }
+    
     public ISourceLocation getSourceLocation() {
       if (memberView!=null) return memberView.getSourceLocation();
       return null;
@@ -0,0 +1,27 @@
+// Bug reported that we incorrectly consider static methods when looking at
+// binary weaving decp rules - we shouldn't consider them overriding
+
+import java.util.*;
+
+public class SubClassLoader  {
+  private static List l;
+
+  class Inner {
+   public void foo() {
+     System.err.println(l.toString());
+   }
+  }
+
+
+/*
+  // this one would override java.lang.ClassLoader.access$000 on an IBM VM
+  public static List access$000(ClassLoader cl,String s,byte[] bs,int i,int j,Object o) {
+    return null;
+  }
+
+  // this one would override java.lang.ClassLoader.access$000 on an SUN VM:w
+  public static List access$000() {
+    return null;
+  }
+*/
+}
@@ -0,0 +1,12 @@
+import java.util.*;
+
+public class SubSubClassLoader {
+  private static String l;
+
+  class Inner2 {
+   public void foo() {
+     System.err.println(l.toString());
+   }
+  }
+
+}
@@ -0,0 +1,4 @@
+public aspect X {
+  declare parents: SubSubClassLoader extends SubClassLoader;
+//  declare parents: SubClassLoader extends ClassLoader;
+}
@@ -19,6 +19,8 @@ public class Ajc152Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
 
   public void testAspectLibrariesAndASM_pr135001() { runTest("aspect libraries and asm");}
   public void testStackOverflow_pr136258() { runTest("stack overflow");}
+  public void testIncorrectOverridesEvaluation13() { runTest("incorrect overrides evaluation - 1.3"); }
+  public void testIncorrectOverridesEvaluation15() { runTest("incorrect overrides evaluation - 1.5"); }
 
   /////////////////////////////////////////
   public static Test suite() {
@@ -20,4 +20,18 @@
       <run class="StatisticsTypeImpl"/>
     </ajc-test>
 
+    <ajc-test dir="bugs152/binaryDecp" title="incorrect overrides evaluation - 1.3">
+      <compile files="SubClassLoader.java,SubSubClassLoader.java" options="-1.3" outjar="lib.jar"/>
+      <compile files="X.aj" inpath="lib.jar" options="-showWeaveInfo">
+        <message kind="weave" text="Setting superclass of type 'SubSubClassLoader' (SubSubClassLoader.java) to 'SubClassLoader' (X.aj)"/>
+      </compile>
+    </ajc-test>
+    
+    <ajc-test dir="bugs152/binaryDecp" title="incorrect overrides evaluation - 1.5">
+      <compile files="SubClassLoader.java,SubSubClassLoader.java" options="-1.5" outjar="lib.jar"/>
+      <compile files="X.aj" inpath="lib.jar" options="-showWeaveInfo">
+        <message kind="weave" text="Setting superclass of type 'SubSubClassLoader' (SubSubClassLoader.java) to 'SubClassLoader' (X.aj)"/>
+      </compile>
+    </ajc-test>
+    
 </suite>
\ No newline at end of file

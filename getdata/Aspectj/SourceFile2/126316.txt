@@ -70,6 +70,10 @@ public class Ajc151Tests extends org.aspectj.testing.XMLBasedAjcTestCase {
   	  // the argument is org.aspectj.lang.JoinPoint, check that this is added
   	  assertFalse("printParameters method should have arguments",pe2.getParameterTypes().isEmpty());	  
   }
+
+  public void testParameterizedEnum_pr126316() {
+	  runTest("E extends Enum(E) again");
+  }
 
   /*
    * @AspectJ bugs and enhancements
@@ -138,6 +138,9 @@
         </compile>
     </ajc-test>
 
+    <ajc-test dir="bugs151" title="E extends Enum(E) again">
+        <compile files="Pr126316.aj" options="-1.5"/>
+    </ajc-test>
 
     <!-- New features down here... when they arent big enough to have their own test file -->
 
@@ -57,8 +57,8 @@ public class BoundedReferenceType extends ReferenceType {
 	/**
 	 * only for use when resolving GenericsWildcardTypeX or a TypeVariableReferenceType
 	 */
-	protected BoundedReferenceType(String sig, World world) {
-		super(sig,world);
+	protected BoundedReferenceType(String sig, String sigErasure, World world) {
+		super(sig, sigErasure, world);
 		setUpperBound(world.resolve(UnresolvedType.OBJECT));
 		setDelegate(new ReferenceTypeReferenceTypeDelegate((ReferenceType)getUpperBound()));
 	}
@@ -70,6 +70,10 @@ public class ReferenceType extends ResolvedType {
     public ReferenceType(String signature, World world) {
         super(signature, world);
     }
+
+    public ReferenceType(String signature, String signatureErasure, World world) {
+        super(signature,signatureErasure, world);
+    }
 
     /**
      * Constructor used when creating a parameterized type.
@@ -31,7 +31,9 @@ public class TypeVariableReferenceType extends BoundedReferenceType implements T
 	public TypeVariableReferenceType(
 			TypeVariable aTypeVariable,
 			World aWorld) {
-		super(aTypeVariable.getFirstBound().getSignature(),aWorld);
+		super(aTypeVariable.getFirstBound().getSignature(),
+			  aTypeVariable.getFirstBound().getErasureSignature(),
+			  aWorld);
 		this.typeVariable = aTypeVariable;
 		this.isExtends    = false;
 		this.isSuper      = false;
@@ -209,7 +209,7 @@ public abstract class World implements Dump.INode {
         // might be a problem here, not sure '?' should make it to here as a signature, the 
         // proper signature for wildcard '?' is '*'
         	// fault in generic wildcard, can't be done earlier because of init issues
-        	ResolvedType something = new BoundedReferenceType("?",this);
+        	ResolvedType something = new BoundedReferenceType("?","Ljava/lang/Object",this);
         	typeMap.put("?",something);
         	return something;
         }
@@ -0,0 +1,14 @@
+class EnumFun<E extends Enum<E>> {
+
+  public E get() { return null; }
+
+}
+
+aspect SimpleAspect {
+
+    Object around() : execution(* *(..)) {
+        System.out.println("before");
+        return proceed();
+    }
+
+}
\ No newline at end of file
